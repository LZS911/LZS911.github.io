{"pageProps":{"post":{"title":"从 Koa 到 Nest：全栈 TypeScript 应用的现代化改造.md","date":"2024-11-28","slug":"从 Koa 到 Nest：全栈 TypeScript 应用的现代化改造","author":"Ai.Haibara","content":"<h2 id=\"引言\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#引言\"><span class=\"icon icon-link\"></span></a>引言</h2>\n<h3 id=\"项目背景\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#项目背景\"><span class=\"icon icon-link\"></span></a>项目背景</h3>\n<p>项目最初采用以下技术栈构建:\n后端: Koa + TypeScript\n数据存储: 文件系统\n前端: React + Ant Design\n部署: Docker</p>\n<p>Koa 是一个轻量级的 Node.js Web 框架,通过中间件架构提供了优雅的 API 设计。项目初期选择 Koa 是看中其简洁性和灵活性。</p>\n<ol>\n<li>完整技术栈\nNode\nTypescript\nKoa\nReact + antd</li>\n<li>构建方式\n启动 node 环境的 docker 镜像，进入镜像 clone 代码然后通过脚本启动服务</li>\n</ol>\n<h3 id=\"痛点分析\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#痛点分析\"><span class=\"icon icon-link\"></span></a>痛点分析</h3>\n<p>随着项目规模扩大,原有架构暴露出几个主要问题:</p>\n<ol>\n<li>数据存储的局限性</li>\n</ol>\n<ul>\n<li>文件系统存储难以支持复杂查询</li>\n<li>数据一致性难以保证</li>\n<li>性能瓶颈明显</li>\n</ul>\n<ol start=\"2\">\n<li>构建部署流程繁琐</li>\n</ol>\n<ul>\n<li>需要在 Docker 内手动克隆代码</li>\n<li>部署步骤多,容易出错</li>\n<li>CI/CD 支持不完善</li>\n</ul>\n<ol start=\"3\">\n<li>类型安全问题</li>\n</ol>\n<ul>\n<li>前后端 API 类型定义分离</li>\n<li>类型不一致导致运行时错误</li>\n<li>代码维护成本高</li>\n</ul>\n<ol start=\"4\">\n<li>代码数据耦合</li>\n</ol>\n<ul>\n<li>部分业务数据硬编码在代码中</li>\n<li>修改数据需要重新部署</li>\n<li>不利于后期维护</li>\n</ul>\n<h4 id=\"改造的目标和预期成果\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#改造的目标和预期成果\"><span class=\"icon icon-link\"></span></a>改造的目标和预期成果。</h4>\n<ol>\n<li>引入 MySQL 作为数据持久层</li>\n<li>优化项目构建以及发布方式</li>\n<li><strong>前后端类型安全</strong></li>\n<li>代码与数据解耦</li>\n</ol>\n<h2 id=\"技术选型与评估\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#技术选型与评估\"><span class=\"icon icon-link\"></span></a>技术选型与评估</h2>\n<h3 id=\"后端框架-nestjs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#后端框架-nestjs\"><span class=\"icon icon-link\"></span></a>后端框架: Nest.js</h3>\n<p>选择 Nest.js 的主要原因:</p>\n<ul>\n<li>完整的企业级框架支持</li>\n<li>优秀的 TypeScript 支持</li>\n<li>模块化架构,利于代码组织</li>\n<li>丰富的生态系统</li>\n</ul>\n<h3 id=\"orm-层-prisma\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#orm-层-prisma\"><span class=\"icon icon-link\"></span></a>ORM 层: Prisma</h3>\n<p>Prisma 作为现代化的 ORM 框架:</p>\n<ul>\n<li>类型安全的数据库访问</li>\n<li>强大的数据模型定义</li>\n<li>自动生成类型定义</li>\n<li>支持数据库迁移</li>\n</ul>\n<h3 id=\"ts-test\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ts-test\"><span class=\"icon icon-link\"></span></a><a href=\"https://ts-rest.com/\">ts-test</a></h3>\n<p>ts-rest 提供了端到端的类型安全解决方案</p>\n<h3 id=\"数据持久层\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#数据持久层\"><span class=\"icon icon-link\"></span></a>数据持久层</h3>\n<p><a href=\"https://relph1119.github.io/mysql-learning-notes/#/mysql/00-%E4%B8%87%E9%87%8C%E9%95%BF%E5%BE%81%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%88%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%EF%BC%89-%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E9%98%85%E8%AF%BB%E6%9C%AC%E5%B0%8F%E5%86%8C\">MySQL</a></p>\n<h3 id=\"ui\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ui\"><span class=\"icon icon-link\"></span></a>UI</h3>\n<p>调整为 React + <a href=\"https://ui.shadcn.com/\">shadcn/ui</a> 的组合</p>\n<h3 id=\"部署方案优化\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#部署方案优化\"><span class=\"icon icon-link\"></span></a>部署方案优化</h3>\n<p>新的部署流程:</p>\n<ul>\n<li>构建 Docker 镜像并推送到私有仓库</li>\n<li>服务器拉取 docker-compose 配置</li>\n<li>自动化部署和服务编排</li>\n</ul>\n<h2 id=\"改造实施\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#改造实施\"><span class=\"icon icon-link\"></span></a>改造实施</h2>\n<h3 id=\"阶段规划\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#阶段规划\"><span class=\"icon icon-link\"></span></a>阶段规划</h3>\n<ol>\n<li>数据迁移阶段</li>\n</ol>\n<ul>\n<li>设计数据库模型</li>\n<li>数据迁移脚本开发</li>\n<li>数据一致性验证</li>\n</ul>\n<ol start=\"2\">\n<li>后端改造阶段</li>\n</ol>\n<ul>\n<li>引入 Nest.js 框架</li>\n<li>整合 Prisma ORM</li>\n<li>API 层重构</li>\n</ul>\n<ol start=\"3\">\n<li>前端改造阶段</li>\n</ol>\n<ul>\n<li>UI 组件迁移</li>\n<li>API 调用适配</li>\n<li>类型系统对接</li>\n</ul>\n<h4 id=\"数据迁移\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#数据迁移\"><span class=\"icon icon-link\"></span></a>数据迁移</h4>\n<h4 id=\"后端改造\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#后端改造\"><span class=\"icon icon-link\"></span></a>后端改造</h4>\n<h4 id=\"前端改造\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#前端改造\"><span class=\"icon icon-link\"></span></a>前端改造</h4>\n<h2 id=\"项目总结\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#项目总结\"><span class=\"icon icon-link\"></span></a>项目总结</h2>\n<h3 id=\"重构过程中遇到的一些问题\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#重构过程中遇到的一些问题\"><span class=\"icon icon-link\"></span></a>重构过程中遇到的一些问题</h3>\n<ol>\n<li>依赖包 @octokit/core 类型问题</li>\n<li>prisma 环境变量配置</li>\n<li>api-model 包产物问题</li>\n<li>数据库结构设计的不完善导致表结构频繁更新</li>\n</ol>","theme":"fancy","tag":[null]}},"__N_SSG":true}