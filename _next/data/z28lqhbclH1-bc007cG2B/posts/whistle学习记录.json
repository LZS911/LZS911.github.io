{"pageProps":{"post":{"title":"whistle学习记录.md","date":"2022-12-07","slug":"whistle学习记录","author":"Ai.Haibara","content":"<h2 id=\"简介\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#简介\"><span class=\"icon icon-link\"></span></a>简介</h2>\n<p>whistle是基于Node实现的跨平台web调试代理工具，同类型的工具有Fiddler和Charles，主要用于查看、修改 HTTP、HTTPS、Websocket 的请求、响应，也可以作为HTTP代理服务器使用。\n在使用了Fiddler、Charles以及whistle这三款代理工具之后，总结出来的whistle的优势有以下几点：</p>\n<p>配置简单：whistle 的配置类似于系统hosts的配置，一切操作都可以通过配置实现，支持域名、路径、正则表达式、通配符、通配路径等多种匹配方式。\n支持扩展：whistle 提供了插件扩展能力，通过插件可以新增whistle的协议实现更复杂的操作、也可以用来存储或监控指定请求、集成业务本地开发调试环境等等，基本上可以做任何你想做的事情，且开发、发布及安装whistle插件也都很简单。\n内置 weinre：通过 weinre 可以修改调试移动端DOM结构、捕获页面异常等。\n界面简单易懂：从界面来看，whistle 的功能划分为了 network（网络）、rules（规则）、values（数据）、pulgins（插件）四大模块，通过tab页签进行切换。\n文档全面：whistle 官网提供了详细的说明文档，工作中遇到的情况只要查阅文档都能解决。</p>\n<p>下图是whistle支持的功能:</p>\n<p><img src=\"/assets/whistle/example-1.png\" alt=\"alt\"></p>\n<h2 id=\"安装启动\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#安装启动\"><span class=\"icon icon-link\"></span></a>安装启动</h2>\n<h3 id=\"安装node\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#安装node\"><span class=\"icon icon-link\"></span></a>安装Node</h3>\n<p>由于whistle是基于Node的，自然需要先安装Node环境，这里不再多做说明。下面是whistle官网对Node版本的建议：</p>\n<p>whistle支持v0.10.0以上版本的Node，为获取更好的性能，推荐安装最新版本的Node。</p>\n<h3 id=\"安装whistle\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#安装whistle\"><span class=\"icon icon-link\"></span></a>安装whistle</h3>\n<p>Node安装完成后，执行如下命令安装whistle：</p>\n<pre><code class=\"language-ssh\">npm install -g whistle\n</code></pre>\n<p>查看版本：</p>\n<pre><code class=\"language-ssh\">whistle -V\n</code></pre>\n<p>如果能正确输出whistle的版本信息，就表示安装成功了。之后可通过help命令查看帮助信息：</p>\n<pre><code class=\"language-ssh\">whistle help\n</code></pre>\n<h3 id=\"启动whistle\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#启动whistle\"><span class=\"icon icon-link\"></span></a>启动whistle</h3>\n<p>whistle支持三种等价的命令whistle、w2、wproxy，本文使用w2命令。下面是常用的命令：\n启动whistle:</p>\n<pre><code class=\"language-ssh\">w2 start\n</code></pre>\n<p>whistle的默认端口是8899，如果要指定端口号，执行下面的命令：</p>\n<pre><code class=\"language-ssh\">w2 start -p 8888\n</code></pre>\n<p>重启whistle（也支持指定端口）:</p>\n<pre><code class=\"language-ssh\">w2 restart\n</code></pre>\n<p>停止whistle:</p>\n<pre><code class=\"language-ssh\">w2 stop\n</code></pre>\n<h2 id=\"配置代理\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#配置代理\"><span class=\"icon icon-link\"></span></a>配置代理</h2>\n<p>配置代理时有两个关键的参数：服务器IP和端口号。端口号比较简单，对应w2 start命令启动好的端口号即可。服务器IP的话需要分两种情况：一种是本地，对应127.0.0.1即可，另一种是远程，这时候需要填服务器的IP。配置所需要的信息在启动whistle时控制台会告诉我们，见下图</p>\n<p><img src=\"/assets/whistle/example-2.png\" alt=\"alt\"></p>\n<p>从上面的图片可以看出，端口号为8899，IP有127.0.0.1、10.1.2.30、192.168.137.1和192.168.191.1这四个，如果是本地代理的话，这四个IP都可以（如果不想每次IP更换都要重新配置，选127.0.0.1呀），如果是远程代理，除了127.0.0.1之外，其他都可以的（仍然不建议填10.1.2.30这个IP，理由同上）。</p>\n<p>下面来说下配置代理的几种方式：</p>\n<h3 id=\"浏览器代理\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#浏览器代理\"><span class=\"icon icon-link\"></span></a>浏览器代理</h3>\n<p>浏览器代理的话要使用浏览器的代理插件，这里介绍chrome和firefox两种：</p>\n<p>chrome：使用 SwitchOmega 插件。\nfirefox：地址栏输入访问 about:preferences，找到 Network Proxy，选择 手动代理配置(Manual proxy configuration)，输入代理服务器地址、端口，保存即可。</p>\n<h3 id=\"全局代理\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#全局代理\"><span class=\"icon icon-link\"></span></a>全局代理</h3>\n<ol>\n<li>\n<p><a href=\"http://jingyan.baidu.com/article/0aa22375866c8988cc0d648c.html\">Windows</a></p>\n</li>\n<li>\n<p><a href=\"http://jingyan.baidu.com/article/a378c960849144b3282830dc.html\">Mac</a>: System Preferences > Network > Advanced > Proxies > HTTP or HTTPS</p>\n<p><img src=\"/assets/whistle/example-3.png\" alt=\"alt\"></p>\n</li>\n<li>\n<p>Linux: Settings > Network > VPN > Network Proxy > Manual</p>\n<p><img src=\"/assets/whistle/example-4.png\" alt=\"alt\"></p>\n</li>\n<li>\n<p>移动端需要在设置中配置当前 Wi-Fi 的代理，以 iOS 为例：</p>\n<p><img src=\"/assets/whistle/example-5.png\" alt=\"alt\"></p>\n</li>\n</ol>\n<h2 id=\"安装https证书\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#安装https证书\"><span class=\"icon icon-link\"></span></a>安装https证书</h2>\n<p>关闭防火墙或者给 whistle 设置了白名单之后，如果whistle的设置页面可以正常打开，这表示说我们可以代理http请求了。\n如果你的页面和接口全部是http请求，就可以忽略安装https证书的这一步了。但现实是除了本地或者预发环境，我们很难找到不是https的了（很多预发环境也是https的），因此还是建议提前把证书装上。\n如果你的环境中出现了以下情况（当然，没有装好证书的话这些情况基本都会出现的），就是https证书没有安装或者没装好：</p>\n<ol>\n<li>whistle 的配置页面可以打开，但是网页不能打开或者只加载了一部分页面</li>\n<li>京东App数据更新不了或展示不全，或者扫码提示“无法获取信息”</li>\n<li>whistle配置页面中network中443端口的请求前面有小锁，或者抓不到请求</li>\n<li>浏览器提示“您的连接不是私密连接”</li>\n</ol>\n<h3 id=\"下载证书并开启拦截https\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#下载证书并开启拦截https\"><span class=\"icon icon-link\"></span></a>下载证书并开启拦截https</h3>\n<p>我们可以通过下面的方式下载证书：</p>\n<ol>\n<li>在配置代理的设备上打开浏览器，在浏览器中输入 rootca.pro 即可下载，这种是最便捷的方式</li>\n<li>在启动了whistle的机器上用浏览器打开配置页面，点击https，会弹出一个带二维码的界面，点击Download RootCA 或者扫二维码下载   <img src=\"/assets/whistle/example-6.png\" alt=\"alt\"></li>\n</ol>\n<h2 id=\"基础篇\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#基础篇\"><span class=\"icon icon-link\"></span></a>基础篇</h2>\n<h3 id=\"控制台\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#控制台\"><span class=\"icon icon-link\"></span></a>控制台</h3>\n<p>whistle控制台核心部分的分区如下</p>\n<p><img src=\"/assets/whistle/example-7.png\" alt=\"alt\"></p>\n<ol>\n<li>NetWork: 查看请求响应的详细信息及请求列表的Timeline</li>\n<li>Rules: 匹配规则，whistle核心，详见下一节配置方式</li>\n<li>Values: 配置key-value的数据，在Rules里面配置可以通过{key}获取</li>\n<li>Plugins: 显示所有已安装的插件列表，开启关闭插件功能</li>\n</ol>\n<h2 id=\"配置方式\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#配置方式\"><span class=\"icon icon-link\"></span></a>配置方式</h2>\n<p>在文章的开头就说过，whistle的所有操作都可以通过配置实现，配置方式扩展于系统 hosts 配置方式(ip domain或组合方式ip domain1 domain2 domainN)，具有更丰富的匹配模式及更灵活的配置方式。\nwhistle默认的配置方式是将匹配模式(pattern)写在左边，操作uri(operatorURI)写在右边。这样，whistle会将请求的url与pattern进行匹配，如果匹配上就执行operatorURI对应的操作：</p>\n<pre><code class=\"language-code\">pattern operatorURI\n</code></pre>\n<blockquote>\n<p>pattern和operatorURI也可以左右互换（<a href=\"http://wproxy.org/whistle/mode.html\">link</a>），为了行文的清晰，不造成新的混淆，这里只介绍我常用的配置方式，我认为只掌握一种就够了。</p>\n</blockquote>\n<p>我们配置hosts时，如果一个IP要对应多个域名，会这样子写：</p>\n<pre><code class=\"language-code\">127.0.0.1  www.domain1.com www.domain2.com www.domainN.com\n</code></pre>\n<p>和系统hosts一样，如果一个pattern要对应多个操作，whistle 也支持组合方式的配置。使用组合方式时，whistle会按照从左到右的顺序执行operatorURI。</p>\n<pre><code class=\"language-code\">pattern operatorURI1 operatorURI2 operatorURIn\n</code></pre>\n<p>在简单了解了配置方式之后，我们就可以按照pattern operatorURI的模式为 whistle 添加规则了。\n还是再回到 whistle 控制台的界面，选中Rules。我们可以像使用SwitchHosts软件管理hosts一样对规则进行分组管理。默认情况下，whistle只有一个Default的分组，如下：</p>\n<p><img src=\"/assets/whistle/example-8.png\" alt=\"alt\"></p>\n<p>我们可以点击Create按钮添加一个单品页的分组，在这个分组里可以加上所有与单品页相关的配置（如果要禁用某个配置，可以使用Ctrl + /的快捷键，或者直接在前面加#）如果要配置的分组生效，需要双击左侧单品页的tab，出现对号就表示生效了，没有在使用的分组是没有对号的，也可以同时使用多个分组。如下图:</p>\n<p><img src=\"/assets/whistle/example-9.png\" alt=\"alt\"></p>\n<h3 id=\"匹配方式\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#匹配方式\"><span class=\"icon icon-link\"></span></a>匹配方式</h3>\n<p>whistle的匹配模式分为以下几种：</p>\n<ol>\n<li>\n<p>域名匹配：域名匹配不仅支持匹配某个域名，也可以限定端口号、协议</p>\n<pre><code class=\"language-code\">// 匹配www.domain.com域名下的所有请求，包括http、https、ws、wss，tunnel\nwww.domain.com operatorURI\n\n// 匹配www.domain.com域名下的http请求\n\nhttp://www.domain.com operatorURI\n\n// 匹配www.domain.com域名下81端口的请求(http请求默认为80端口，https请求默认为443端口)\nwww.domain.com:81 operatorURI\n</code></pre>\n</li>\n<li>\n<p>路径匹配：指定匹配某个路径，也可以限定端口号、协议</p>\n<pre><code class=\"language-code\">// 匹配www.domain.com:81/path路径及其子路径（如www.domain.com:81/path/child）的请求\n\nwww.domain.com:81/path operatorURI\n</code></pre>\n</li>\n<li>\n<p>精确匹配：与上面的路径匹配不同，路径匹配不仅匹配对应的路径，而且还会匹配该路径下面的子路径，而精确匹配只能指定的路径，只要在路径前面加$即可变成精确匹配</p>\n<pre><code class=\"language-code\"> // 匹配www.domain.com:81/path的路径，不包含子路径\n $www.domain.com:81/path operatorURI\n</code></pre>\n</li>\n<li>\n<p>正则匹配：正则的语法及写法跟js的正则表达式一致，支持两种模式：/reg/、/reg/i 忽略大小写，支持子匹配，但不支持/reg/g，且可以通过正则的子匹配把请求url里面的部分字符串传给operatorURI</p>\n<pre><code class=\"language-code\">// 匹配所有请求\n* operatorURI\n\n// 匹配url中包含keyword的请求，且忽略大小写\n/keyword/i operatorURI\n\n// 利用子匹配把url里面的参数带到匹配的操作uri\n// 下面正则将把请求里面的文件名称，带到匹配的操作uri\n// 最多支持10个子匹配 $0...9，其中$0表示整个请求url，其它跟正则的子匹配一样\n/[^?#]\\/([^\\/]+)\\.html/ protocol://...$1...\n</code></pre>\n</li>\n<li>\n<p>通配符匹配：通常，域名匹配和路径匹配可以满足我们大部分的需要，不满足的部分也可以用正则匹配来补充，但正则对大部分人来说还是有门槛的，whistle\n很贴心的为我们提供了更简单的通配符匹配方式。目前我还没用过通配符匹配，这里依然简单介绍下，完整通配符匹配: <a href=\"http://wproxy.org/whistle/pattern.html\">http://wproxy.org/whistle/pattern.html</a></p>\n<ul>\n<li>\n<p>通配符匹配</p>\n<pre><code class=\"language-code\"> // 以 ^ 开头\n ^www.example.com/test/*** protocol://...$1...\n\n // 限定结束位置\n ^www.example.com/test/***test$ protocol://...$1...\n</code></pre>\n</li>\n<li>\n<p>通配域名匹配</p>\n<pre><code class=\"language-code\">  // 匹配以 .com 结尾的所有url，如: test.com, abc.com，但不包含 *.xxx.com\n  *.com protocol://...$1...\n  // 匹配 test.com 的子域名，不包括 test.com\n  // 也不包括诸如 *.xxx.test.com 的四级域名，只能包含: a.test.com，www.test.com 等test.com的三级域名\n  *.test.com protocol://...$1...\n  \n  // 如果要配置所有子域名生效，可以使用 **\n  **.com protocol://...$1...\n</code></pre>\n</li>\n<li>\n<p>通配路径匹配</p>\n<pre><code class=\"language-code\">  // 对所有域名对应的路径 protocol://a.b.c/xxx[/yyy]都生效\n  */ 127.0.0.1\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"操作值operatoruri\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#操作值operatoruri\"><span class=\"icon icon-link\"></span></a>操作值operatorURI</h3>\n<p>whistle官网将 whistle 的操作值分为字符串和JSON对象两种。本文按照配置方式的不同，将 whistle 的操作值分为两种：带空格的和不带空格的。</p>\n<ol>\n<li>带空格：带空格的字符串和保留缩进格式的JSON对象</li>\n<li>不带空格：不带空格的字符串和序列化了的不带空格的JSON对象</li>\n</ol>\n<p>不带空格的操作值可以直接在operatorURI中写入，模式为pattern opProtocol://(strValue)，注意字符串必须要用括号包裹：</p>\n<pre><code class=\"language-code\">// 将符合pattern的url的返回内容用helloWorld代替\npattern resBody://(helloWorld)\n</code></pre>\n<ol>\n<li>\n<p>带空格的操作值需要将操作值保存在Values</p>\n<p>在 whistle 控制台中打开Values标签，点击Create，增加名称为test.json的操作值，并在右侧编辑test.json的内容，可按照pattern opProtocol://{valueName}来使用，注意value名称是用打括号包裹的，如下：</p>\n<p><img src=\"/assets/whistle/example-10.png\" alt=\"alt\"></p>\n<pre><code class=\"language-code\"> // 将符合pattern的url的返回内容用test.json文件中的内容代替\n pattern resBody://{test.json}\n</code></pre>\n</li>\n</ol>","theme":"fancy","tag":[null]}},"__N_SSG":true}