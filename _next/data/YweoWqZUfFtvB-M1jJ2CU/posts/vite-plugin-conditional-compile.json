{"pageProps":{"post":{"title":"vite-plugin-conditional-compile","date":"2022-12-01","slug":"vite-plugin-conditional-compile","author":"Ai.Haibara","content":"<blockquote>\n<p>项目地址: <a href=\"https://www.npmjs.com/package/vite-plugin-conditional-compile\">https://www.npmjs.com/package/vite-plugin-conditional-compile</a></p>\n</blockquote>\n<h2 id=\"功能特性\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#功能特性\"><span class=\"icon icon-link\"></span></a>功能特性</h2>\n<ul>\n<li>支持根据自定义的条件配置选择性地包含或排除代码块</li>\n<li>可以在开发环境和生产环境中使用不同的代码逻辑</li>\n<li>灵活的条件表达式，支持逻辑运算和环境变量</li>\n<li>可以在 Vite 构建过程中动态生成不同的输出文件</li>\n</ul>\n<h2 id=\"安装\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#安装\"><span class=\"icon icon-link\"></span></a>安装</h2>\n<pre><code class=\"hljs language-ssh\">yarn add vite-plugin-conditional-compile -D\n</code></pre>\n<h2 id=\"使用\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#使用\"><span class=\"icon icon-link\"></span></a>使用</h2>\n<blockquote>\n<p>务必将该插件的加载顺序放在最前位，防止 jsx 之类的代码被其他插件编译，导致本插件无法解析</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// vite.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vite\"</span>;\n<span class=\"hljs-keyword\">import</span> vitePluginConditionalCompile <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vite-plugin-conditional-compile\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n    <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">vitePluginConditionalCompile</span>({\n      <span class=\"hljs-comment\">// 插件配置项...</span>\n    }),\n    <span class=\"hljs-comment\">// 其他插件...</span>\n  ],\n});\n</code></pre>\n<h2 id=\"配置项\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#配置项\"><span class=\"icon icon-link\"></span></a>配置项</h2>\n<p>该插件支持以下配置项：</p>\n<ol>\n<li>\n<p><code>include: string | RegExp | readonly (string | RegExp)[] | null</code>\n需要进行条件编译的文件路径或文件匹配模式。</p>\n<p>默认值: <code>['**/*']</code></p>\n<p>示例：</p>\n<pre><code class=\"hljs language-js\">   {\n     <span class=\"hljs-attr\">include</span>: [<span class=\"hljs-regexp\">/^.+\\/packages\\/.+\\/.+.(ts|tsx)$/</span>],\n   }\n</code></pre>\n</li>\n<li>\n<p><code>exclude: string | RegExp | readonly (string | RegExp)[] | null</code>\n需要排除条件编译的文件路径或文件匹配模式。</p>\n<p>默认值: <code>[/[\\\\/]node_modules[\\\\/]/, /[\\\\/]\\.git[\\\\/]/]</code></p>\n<p>示例：</p>\n<pre><code class=\"hljs language-js\">   {\n      <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-string\">'/\\.eslintrc.js/'</span>]\n   }\n</code></pre>\n</li>\n<li>\n<p><code>env: Record&#x3C;string, any></code>\n自定义环境变量选项，用于在条件编译语句中使用自定义的环境变量。示例：</p>\n<pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">'MY_VARIABLE'</span>: <span class=\"hljs-string\">'my value'</span>,\n  <span class=\"hljs-comment\">// 更多自定义环境变量...</span>\n}\n</code></pre>\n<p>同时，本插件会调用 vite 提供的 <a href=\"https://vitejs.dev/guide/api-javascript.html#loadenv\">loadEnv</a> 来获取项目的环境变量。</p>\n</li>\n</ol>\n<h2 id=\"示例\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#示例\"><span class=\"icon icon-link\"></span></a>示例</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// vite.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vite\"</span>;\n<span class=\"hljs-keyword\">import</span> vitePluginConditionalCompile <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vite-plugin-conditional-compile\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n    <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">vitePluginConditionalCompile</span>({\n      <span class=\"hljs-attr\">env</span>:{\n        <span class=\"hljs-comment\">//自定义环境变量, 提供给条件语句使用</span>\n        <span class=\"hljs-attr\">feature</span>: <span class=\"hljs-string\">'code'</span>,\n        <span class=\"hljs-attr\">prod_version</span>: <span class=\"hljs-string\">'vite'</span>\n      }\n    }),\n  ],\n});\n\n\n<span class=\"hljs-comment\">// main.jsx</span>\n<span class=\"hljs-comment\">// #if [DEV]</span>\n<span class=\"hljs-keyword\">import</span> { featureA } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./featureA.js'</span>;\n\n<span class=\"hljs-comment\">// 这里的 PROD 取至 项目的环境变量, 若当前为生产环境时将加载此条 import 语句</span>\n<span class=\"hljs-comment\">// #elif [PROD]</span>\n<span class=\"hljs-keyword\">import</span> { featureB } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./featureB.js'</span>;\n\n<span class=\"hljs-comment\">//这里的 feature 和 prod_version 取至用户的 env 配置项, 判断 feature 的值是否与 ”code“ 相同、prod_version的值是否不等于 ”vite“. 当满足其中之一时, 该条件成立</span>\n<span class=\"hljs-comment\">// #elif [feature=code || !(prod_version=vite)]</span>\n<span class=\"hljs-keyword\">import</span> { featureC } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./featureC.js'</span>;\n\n<span class=\"hljs-comment\">// #else</span>\n<span class=\"hljs-keyword\">import</span> { featureD } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./featureD.js'</span>;\n\n<span class=\"hljs-comment\">// #endif</span>\n\n<span class=\"hljs-comment\">// #if [DEV]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Development environment'</span>);\n<span class=\"hljs-comment\">// #endif</span>\n\n<span class=\"hljs-comment\">// #if [PROD]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Production environment'</span>);\n<span class=\"hljs-comment\">// #endif</span>\n\n<span class=\"hljs-comment\">// #if [!!API_URL]</span>\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">API_URL</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =></span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data));\n<span class=\"hljs-comment\">// #endif</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Com</span> = (<span class=\"hljs-params\"></span>) => {\n<span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      {/* #if [PROD] */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>prod mode<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n      {/* #elif [DEV] */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>dev mode<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n      {/*#else */}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>unknown mode<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n      {/* #endif */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<pre><code class=\"hljs language-vue\">&#x3C;script setup lang=\"ts\">\n// #if [DEV]\nimport { featureA } from './featureA.js';\n// #endif\n\n&#x3C;/script>\n\n&#x3C;template>\n\n  &#x3C;!-- #if [DEV] -->\n  &#x3C;router-link to=\"/debug\">\n    &#x3C;span class=\"m-2 text-green-500\">demo&#x3C;/span>\n  &#x3C;/router-link>\n\n  &#x3C;!-- #elif [PROD] -->\n &#x3C;router-link to=\"/prod\">\n    &#x3C;span class=\"m-2 text-green-500\">demo&#x3C;/span>\n  &#x3C;/router-link>\n\n  &#x3C;!-- #else -->\n  &#x3C;router-link to=\"/helloWorld\">\n    &#x3C;span class=\"text-green-500\">helloWorld&#x3C;/span>\n  &#x3C;/router-link>\n  &#x3C;!-- #endif -->\n\n  &#x3C;router-view />\n&#x3C;/template>\n</code></pre>\n<h2 id=\"支持的条件语句\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#支持的条件语句\"><span class=\"icon icon-link\"></span></a>支持的条件语句</h2>\n<blockquote>\n<p>注: 条件需要使用 [] 进行包裹</p>\n</blockquote>\n<ol>\n<li>等式: <code>feature=code</code>、<code>prod_version=4.5.0</code> 等式右侧支持字符以及数字类型。</li>\n<li>不等式: <code>prod_version != vite</code>。</li>\n<li>逻辑语句: <code>feature=code || !(prod_version=vite)</code> 支持嵌套逻辑语句。</li>\n<li>变量: <code>DEV</code> 判断 env['DEV'] 的值是否为 true。</li>\n<li>取反符号: <code>!PROD</code> 判断 env['PROD'] 的值是否为 false，可以使用双重取反来模拟 #ifdef。</li>\n</ol>\n<h2 id=\"vs-code-插件\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vs-code-插件\"><span class=\"icon icon-link\"></span></a>VS Code 插件</h2>\n<p>后续将会支持 VS Code插件来高亮条件以及语法校验等功能。</p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","tag":[null]}},"__N_SSG":true}