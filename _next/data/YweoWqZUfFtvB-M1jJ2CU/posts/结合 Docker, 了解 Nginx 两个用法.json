{"pageProps":{"post":{"title":"结合 Docker, 了解 Nginx 的两个用法","date":"2023-08-20","slug":"结合 Docker, 了解 Nginx 两个用法","author":"Ai.Haibara","content":"<h2 id=\"前置准备\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#前置准备\"><span class=\"icon icon-link\"></span></a>前置准备</h2>\n<p>首先需要安装  <a href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a></p>\n<p>它是一个可以在桌面端管理docker镜像和容器的应用程序</p>\n<p><img src=\"/assets/docker_nginx/example-1.png\" alt=\"alt\"></p>\n<p>同时, 也可以在终端里面执行 docker 相关的命令了</p>\n<p><img src=\"/assets/docker_nginx/example-2.png\" alt=\"alt\"></p>\n<p>接下来, 我们来跑一个 nginx 的镜像</p>\n<p><img src=\"/assets/docker_nginx/example-3.png\" alt=\"alt\"></p>\n<p>输入容器名以及映射的端口号</p>\n<p><img src=\"/assets/docker_nginx/example-4.png\" alt=\"alt\"></p>\n<p>这里我们将宿主的 8001 端口映射到容器的 80 端口, 点击 Run 后, 就可以看到 docker 容器成功的运行起来了, 并且可以看到日志信息:</p>\n<p><img src=\"/assets/docker_nginx/example-5.png\" alt=\"alt\"></p>\n<p>浏览器访问下 <a href=\"http://localhost:8001\">http://localhost:8001</a> 可以看到 nginx 欢迎页面：</p>\n<p><img src=\"/assets/docker_nginx/example-6.png\" alt=\"alt\"></p>\n<p>但是现在的页面是默认的，我想用 nginx 来托管我的一些静态 html 页面怎么做呢？</p>\n<p>首先我们要知道现在的配置文件和页面都存在哪里.</p>\n<p>在 files 面板可以看到容器内的文件, 里面的 /usr/share/nginx/html/ 目录下面就是所有的静态文件.</p>\n<p>双击点开 index.html 后可以看到：</p>\n<p><img src=\"/assets/docker_nginx/example-7.png\" alt=\"alt\"></p>\n<p>这个 html 内容和默认内容完全一致</p>\n<p>也就是说，这个目录就是保存静态文件的目录, 所以我们只需要将自己的 html 文件存放在这里就行了.</p>\n<p>我们先将这个文件从容器中复制出来:</p>\n<p><code>docker cp nginx1:/usr/share/nginx/html ~/code/nginx/nginx-html</code></p>\n<p>同样的, 我们在 files 中找到 /etc/nginx 目录, 这里面存放着关于 nginx 的主配置文件以及一些其他配置信息, 我们同样的将其从容器中复制出来</p>\n<p><code>docker cp nginx1:/etc/nginx ~/code/nginx</code></p>\n<p>现在我们删除容器, 并重新 Run nginx 镜像, 这次我们添加上 volumes, 也就是添加了宿主目录与容器目录的映射.</p>\n<p><img src=\"/assets/docker_nginx/example-8.png\" alt=\"alt\"></p>\n<p>此时, 我们在 <a href=\"http://localhost:8001\">http://localhost:8001</a> 上仍然能看到 nginx 默认页.\n当我们修改本地 nginx-html/html/index.html 的内容后, 刷新浏览器, 能看到默认页发生对应的改变, 这就是我们添加的目录映射的功劳.</p>\n<p><img src=\"/assets/docker_nginx/example-9.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/docker_nginx/example-10.png\" alt=\"alt\"></p>\n<p>同样, 我们在本地的 nginx-html/html/ 下新增 test.html, 然后访问 localhost:8081/test.html, 同样也能访问到 test.html 的内容.</p>\n<p>到目前为止, 我们正常的配置了一个使用 docker 的 nginx 容器, 接下来我们看下 nginx 的两个核心用法.</p>\n<h2 id=\"nginx-配置文件\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#nginx-配置文件\"><span class=\"icon icon-link\"></span></a>nginx 配置文件</h2>\n<p>首先, 我们先找到从容器中复制出来的 nginx 目录, 打开 nginx.conf 文件, 这是 nginx 的主配置文件:</p>\n<pre><code class=\"hljs language-conf\">\nuser  nginx; #指定Nginx worker进程的运行用户为nginx\nworker_processes  auto; #设置worker进程的数量，使用auto表示根据系统的CPU核心数自动设置\n\nerror_log  /var/log/nginx/error.log notice; # 指定错误日志文件的路径和级别，此处为/var/log/nginx/error.log，并设置级别为notice.\npid        /var/run/nginx.pid; #指定Nginx主进程的PID文件路径.\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp # 定义Nginx的HTTP模块，包括HTTP服务器的全局配置和默认行为. {\n    include       /etc/nginx/mime.types; #引入MIME类型配置文件，该文件定义了文件扩展名与MIME类型的映射关系.\n    default_type  application/octet-stream; #设置默认的Content-Type，即当无法从文件扩展名中确定MIME类型时使用的默认类型.\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #配置日志格式，定义了日志中的字段和格式化方式.\n\n    access_log  /var/log/nginx/access.log  main; #指定访问日志文件的路径和使用的日志格式.\n\n    sendfile        on; #开启sendfile机制，用于优化发送静态文件的性能.\n    #tcp_nopush     on;\n\n    keepalive_timeout  65; #设置长连接的超时时间，即空闲连接保持的时间.\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf; #引入/conf.d/目录下的所有.conf文件，用于包含额外的配置文件.\n}\n</code></pre>\n<p>这里面一般做一些全局的配置，比如错误日志的目录等等.</p>\n<p>可以看到 http 下面有个 include 引入了 /etc/nginx/conf.d/*.conf 的配置.</p>\n<p>一般具体的路由配置都是在这些子配置文件里.</p>\n<p>接下来我们看下 conf.d 下的 default.conf 文件:</p>\n<p><img src=\"/assets/docker_nginx/example-11.png\" alt=\"alt\"></p>\n<p>这里面就配置了 localhost:80 的虚拟主机下的所有路由, 也就是宿主主机下的 localhost:8081</p>\n<p>虚拟主机是什么呢？</p>\n<p>就是可以用一台 nginx 服务器来为多个域名和端口的提供服务.</p>\n<p>只要多加几个 server 配置就可以.</p>\n<p>这里我们就配置 localhost:80 这一个虚拟主机.</p>\n<p>下面的 location 就是路由配置.</p>\n<p>比如这个配置：</p>\n<p><img src=\"/assets/docker_nginx/example-12.png\" alt=\"alt\"></p>\n<p>它就配置了 / 下的所有路由，都是在 root 指定的目录查找.</p>\n<p>所以 <a href=\"http://localhost/aaa.html\">http://localhost/aaa.html</a> 就是从 /usr/share/nginx/html/aaa.html 找的.</p>\n<p>location 支持的语法有好几个，我们分别试一下：</p>\n<p><img src=\"/assets/docker_nginx/example-13.png\" alt=\"alt\"></p>\n<p>把之前的 location / 注释掉，添加这样几个路由配置, 然后在容器内的 terminal 执行以下命令:</p>\n<p><code>nginx -s reload</code></p>\n<p>重新加载配置文件(⚠️: 每次修改配置文件后都需要重新加载下配置文件)</p>\n<p>然后来看第一条路由</p>\n<pre><code class=\"hljs language-code\">  location = /111/ {\n    default_type text/plain;\n    return 200 \"111 success\";\n    }\n</code></pre>\n<p>location 和路径之间加了个 =，代表精准匹配，也就是只有完全相同的 url 才会匹配这个路由.</p>\n<p><img src=\"/assets/docker_nginx/example-14.png\" alt=\"alt\"></p>\n<p>不带 = 代表根据前缀匹配，后面可以是任意路径, 这里的 $uri 是取当前路径.</p>\n<pre><code class=\"hljs language-code\">    location /222 {\n        default_type text/plain;\n        return 200 $uri;\n    }\n\n</code></pre>\n<p><img src=\"/assets/docker_nginx/example-15.png\" alt=\"alt\"></p>\n<p>如果想支持正则，就可以加个 ~</p>\n<pre><code class=\"hljs language-conf\">    location ~ ^/333/bbb.*\\.html$ {\n        default_type text/plain;\n        return 200 $uri;\n    }\n</code></pre>\n<p><img src=\"/assets/docker_nginx/example-16.png\" alt=\"alt\"></p>\n<p>这里的正则语法不难看懂，就是 /333/bbb 开头，然后中间是任意字符，最后 .html 结尾的 url.</p>\n<p>当然, 这样是会区分大小写的, 例如这样的路径就不支持了</p>\n<p><img src=\"/assets/docker_nginx/example-17.png\" alt=\"alt\"></p>\n<p>如果想让正则不区分大小写，可以再加个 *</p>\n<pre><code class=\"hljs language-conf\">    \n    location ~* ^/444/AAA.*\\.html$ {\n        default_type text/plain;\n        return 200 $uri;\n    }\n</code></pre>\n<p><img src=\"/assets/docker_nginx/example-18.png\" alt=\"alt\"></p>\n<p>此外，还有一种语法：</p>\n<p>在配置文件加上这个配置：</p>\n<pre><code class=\"hljs language-conf\">location /444 {\n    default_type text/plain;\n    return 200 'xxxx';\n}\n</code></pre>\n<p>这时候就有两个 /444 的路由了, 这时候浏览器访问，还是匹配上面的那个路由：</p>\n<p><img src=\"/assets/docker_nginx/example-19.png\" alt=\"alt\"></p>\n<p>如果想提高优先级，可以使用 ^~</p>\n<p>改成这样：</p>\n<pre><code class=\"hljs language-conf\">location ^~ /444 {\n    default_type text/plain;\n    return 200 'xxxx';\n}\n</code></pre>\n<p>这时候同一个 url，匹配的就是下面的路由了：</p>\n<p><img src=\"/assets/docker_nginx/example-20.png\" alt=\"alt\"></p>\n<p>也就是说 ^~ 能够提高前缀匹配的优先级.</p>\n<p>总结一下，一共 4 个 location 语法：</p>\n<p>location = /aaa 是精确匹配 /aaa 的路由.</p>\n<p>location /bbb 是前缀匹配 /bbb 的路由.</p>\n<p>location ~ /ccc.<em>.html 是正则匹配.可以再加个</em> 表示不区分大小写 location ~<em>/ccc.</em>.html</p>\n<p>location ^~ /ddd 是前缀匹配，但是优先级更高.</p>\n<p>这 4 种语法的优先级是这样的：</p>\n<p><strong>精确匹配（=） > 高优先级前缀匹配（^~） > 正则匹配（～ ~*） > 普通前缀匹配</strong></p>\n<p>我们现在是直接用 return 返回的内容，其实应该返回 html 文件.</p>\n<p>可以这样改：</p>\n<pre><code class=\"hljs language-conf\">location /222 {\n    alias /usr/share/nginx/html;\n}\n\nlocation ~ ^/333/bbb.*\\.html$ {\n    alias /usr/share/nginx/html/test.html;\n}\n</code></pre>\n<p><img src=\"/assets/docker_nginx/example-21.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/docker_nginx/example-22.png\" alt=\"alt\"></p>\n<p>前面用过 root：</p>\n<pre><code class=\"hljs language-conf\"> location / {\n      root   /usr/share/nginx/html;\n      index  index.html index.htm;\n  }\n</code></pre>\n<p>root 和 alias 有什么区别呢？</p>\n<p>比如这样的两个配置：</p>\n<pre><code class=\"hljs language-conf\">location /222 {\n    alias /dddd;\n}\n\nlocation /222 {\n    root /dddd;\n}\n</code></pre>\n<p>同样是 /222/xxx/yyy.html，如果是用 root 的配置，会把整个 uri 作为路径拼接在后面.</p>\n<p>也就是会查找 /dddd/222/xxx/yyy.html 文件.</p>\n<p>如果是 alias 配置，它会把去掉 /222 之后的部分路径拼接在后面.</p>\n<p>也就是会查找 /dddd/xxx/yyy.html 文件.</p>\n<p>也就是 我们 <strong>root 和 alias 的区别就是拼接路径时是否包含匹配条件的路径</strong></p>\n<p>这就是 nginx 的第一个功能：静态文件托管.</p>\n<p>主配置文件在 /etc/nginx/nginx.conf，而子配置文件在 /etc/nginx/conf.d 目录下.</p>\n<p>默认的 html 路径是 /usr/share/nginx/html.</p>\n<p>然后来看下 nginx 的第二大功能：动态资源的反向代理.</p>\n<p>关于 <a href=\"https://cloud.tencent.com/developer/article/1418457\">正向代理以及反向代理</a></p>\n<p>测试 nginx 做反向代理服务器之前，我们先创建个 nest 服务.</p>\n<p><code>npx nest new nest-app -p npm</code></p>\n<p>浏览器就访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 看到 hello world 就代表 nest 服务跑成功了：</p>\n<p><img src=\"/assets/docker_nginx/example-23.png\" alt=\"alt\"></p>\n<p>添加一个全局的前缀 /v1</p>\n<p><img src=\"/assets/docker_nginx/example-24.png\" alt=\"alt\"></p>\n<p>改下 nginx 配置，添加个路由：</p>\n<pre><code class=\"hljs language-code\">    location ^~ /v1 {\n        proxy_pass http://192.168.21.242:3000;\n    }    \n</code></pre>\n<p>这个路由是根据前缀匹配 /v1 开头的 url， ^~ 是提高优先级用的.</p>\n<p>然后你访问 <a href=\"http://localhost:8001/v1\">http://localhost:8001/v1</a> 就可以看到 nest 服务返回的响应了：</p>\n<p><img src=\"/assets/docker_nginx/example-25.png\" alt=\"alt\"></p>\n<p>为什么要多 nginx 这一层代理呢？</p>\n<p>自然是可以在这一层做很多事情的.</p>\n<p>比如修改 header：</p>\n<pre><code class=\"hljs language-code\">    location ^~ /v1 {\n        proxy_set_header name liyu; #新增\n        proxy_pass http://192.168.21.242:3000;\n    }    \n\n</code></pre>\n<p>在 nest 服务的 handler 里注入 headers，打印一下：</p>\n<p><img src=\"/assets/docker_nginx/example-26.png\" alt=\"alt\"></p>\n<p>然后浏览器访问下.</p>\n<p>直接访问 nest 服务的话，是没有这个 header 的：</p>\n<p><img src=\"/assets/docker_nginx/example-27.png\" alt=\"alt\"></p>\n<p>访问 nginx 的反向代理服务器，做一次中转：</p>\n<p><img src=\"/assets/docker_nginx/example-28.png\" alt=\"alt\"></p>\n<p>这就是反向代理服务器的作用，可以透明的修改请求、响应.</p>\n<p>而且，还可以用它实现负载均衡.</p>\n<p>在 controlller 里打印下访问日志, 并修改端口 3001, 新开端口重新使用 <code>yarn start</code> 启动服务</p>\n<p><img src=\"/assets/docker_nginx/example-29.png\" alt=\"alt\"></p>\n<p>这个时候, 我们就有 3000 和 3001 两个服务了, 浏览器访问下, 都是正常的\n<img src=\"/assets/docker_nginx/example-30.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/docker_nginx/example-31.png\" alt=\"alt\"></p>\n<p>问题来了，现在有一个 nginx 服务器，两个 nest 服务器了，nginx 该如何应对呢？</p>\n<p>nginx 的解决方式就是负载均衡，把请求按照一定的规则分到不同的服务器.</p>\n<p>改下 nginx 配置文件：</p>\n<p><img src=\"/assets/docker_nginx/example-32.png\" alt=\"alt\"></p>\n<p>在 upstream 里配置它代理的目标服务器的所有实例.</p>\n<p>下面 proxy_pass 通过 upstream 的名字来指定.</p>\n<p>这时候我访问 <a href=\"http://localhost:8001/v1\">http://localhost:8001/v1</a> 刷新 5 次页面：</p>\n<p><img src=\"/assets/docker_nginx/example-33.png\" alt=\"alt\"></p>\n<p>可以看到两个 nest 服务，一个 3 次，一个 2 次.</p>\n<p>因为默认是轮询的方式.</p>\n<p>一共有 4 种负载均衡策略：</p>\n<p>轮询：默认方式.\nweight：在轮询基础上增加权重，也就是轮询到的几率不同.\nip_hash：按照 ip 的 hash 分配，保证每个访客的请求固定访问一个服务器，解决 session 问题.\nfair：按照响应时间来分配，这个需要安装 nginx-upstream-fair 插件.\n我们测试下 weight 和 ip_hash 的方式.</p>\n<p>添加一个 weight=2，默认是 1，这样两个服务器轮询到的几率是 2 比 1.</p>\n<p><img src=\"/assets/docker_nginx/example-34.png\" alt=\"alt\"></p>\n<p>然后我访问了 8 次 <a href=\"http://localhost:8001/v1\">http://localhost:8001/v1</a></p>\n<p>看打印的日志来看，差不多就是 2:1 的轮询几率.</p>\n<p><img src=\"/assets/docker_nginx/example-35.png\" alt=\"alt\"></p>\n<p>这就是带权重的轮询.</p>\n<p>我们再试下 ip_hash 的方式；</p>\n<p><img src=\"/assets/docker_nginx/example-36.png\" alt=\"alt\"></p>\n<p>再次访问了 <a href=\"http://localhost:8001/v1\">http://localhost:8001/v1</a>\n可以看到一直请求到了一台服务器：\n<img src=\"/assets/docker_nginx/example-37.png\" alt=\"alt\"></p>\n<p>这就是 Nginx 的负载均衡的策略.</p>\n<p>这就是 Nginx 的负载均衡的策略.</p>\n<h2 id=\"总结\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#总结\"><span class=\"icon icon-link\"></span></a>总结</h2>\n<p>我们通过 docker 跑了 nginx 服务器，并使用了它的静态资源托管功能，还有动态资源的反向代理功能.</p>\n<p>nginx 的配置文件在 /etc/nginx/nginx.conf 里，它默认还引入了 /etc/nginx/conf.d 下的子配置文件.</p>\n<p>默认 html 都放在 /usr/share/nginx/html 下.</p>\n<p>我们可以通过 docker cp 来把容器内文件复制到宿主机, 然后进行文件映射, 最后通过修改宿主上的配置文件来修改容器中的配置文件.</p>\n<p>修改 nginx 配置，在 server 里配置路由，根据不同的 url 返回不同的静态文件.</p>\n<p>有 4 种 location 语法：</p>\n<ol>\n<li>location /aaa 根据前缀匹配</li>\n<li>location ^~ /aaa 根据前缀匹配，优先级更高</li>\n<li>location = /aaa 精准匹配</li>\n<li>location ~ /aaa/.*html 正则匹配\n<code>location ~* /aaa/.*html</code>正则匹配，而且不区分大小写</li>\n</ol>\n<p>优先级是 精确匹配（=） > 高优先级前缀匹配（^~） > 正则匹配（～ ~*） > 普通前缀匹配</p>\n<p>除了静态资源托管外，nginx 还可以对动态资源做反向代理.</p>\n<p>也就是请求发给 nginx，由它转发给应用服务器，这一层也可以叫做网关.</p>\n<p>nginx 反向代理可以修改请求、响应信息，比如设置 header.</p>\n<p>当有多台应用服务器的时候，可以通过 upstream 配置负载均衡，有 4 种策略：轮询、带权重的轮询、ip_hash、fair.</p>\n<p>掌握了静态资源托管、动态资源的反向代理+负载均衡.</p>","theme":"fancy","tag":[null]}},"__N_SSG":true}