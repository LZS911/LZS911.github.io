{"pageProps":{"post":{"title":"swc-vs-babel","date":"2023-03-18","slug":"swc-vs-babel","author":"Ai.Haibara","content":"<h2 id=\"babel\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#babel\"><span class=\"icon icon-link\"></span></a>babel</h2>\n<p>关于 babel 的介绍: &#x3C;<a href=\"https://lzs911.github.io/posts/babe\">https://lzs911.github.io/posts/babe</a></p>\n<h2 id=\"swc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#swc\"><span class=\"icon icon-link\"></span></a>swc</h2>\n<p><a href=\"https://swc.rs/\">swc</a> 是通过 <a href=\"https://www.rust-lang.org/\">rust</a> 实现的一个类 babel 工具, 而且在 swc 的官网，很直白说自己和 babel 对标，swc 和 babel 命令可以相互替换，并且大部分的 babel 插件也已经实现。</p>\n<p>对比 babel, swc 的最大优势就是快, 这是底层语言所造成的原因. 所以现在很多能用rust重写的工具都开始进行重写.</p>\n<p>光说可能并不能具体的体会 swc 到底有多快, 所以准备同时使用 babel 以及 swc 实现一个简易版本的 <code>babel-import-plugin</code>, 也就是将 <code>import { A, B } from 'lib'</code> 转化成 <code>import A from lib/A; import B from lib/B;</code>.</p>\n<h2 id=\"对比\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#对比\"><span class=\"icon icon-link\"></span></a>对比</h2>\n<p>先来看下 babel 的实现</p>\n<pre><code class=\"language-javascript\">const { traverse, parseSync, types: t } = require(\"@babel/core\");\nconst generator = require(\"@babel/generator\").default;\n\nconst transform = (content) => {\n  const ast = parseSync(content);\n  traverse(ast, {\n    ImportDeclaration(_path) {\n      const { node } = _path;\n\n      const libraryName = node.source.value;\n\n      const _program = _path.findParent((p) => p.isProgram());\n\n      if (\n        node.specifiers.filter((v) => v.type === \"ImportDefaultSpecifier\")\n          .length > 0\n      ) {\n        return;\n      }\n\n      node.specifiers.forEach((v) => {\n        const name = v.imported?.name ?? \"\";\n\n        _program.pushContainer(\n          \"body\",\n          t.importDeclaration(\n            [t.importDefaultSpecifier(t.identifier(name))],\n            t.stringLiteral(`${libraryName}/lib/${name}`)\n          )\n        );\n      });\n\n      _path.remove();\n      _path.skip();\n    },\n  });\n\n  const out = generator(ast)?.code;\n};\n</code></pre>\n<p>主要流程还是老三步:</p>\n<ol>\n<li>将原代码转化成 ast 树</li>\n<li>遍历 ast, 处理符合条件的 import 语句, 将其转化成需要的格式, 同时使用 <code>program.pushContainer</code> 添加到原树中, 并且移除掉旧的节点.</li>\n<li>将 ast 转化回字符串格式的代码.</li>\n</ol>\n<p>接下来看下 swc 的实现</p>\n<pre><code class=\"language-javascript\">const Visitor = require(\"@swc/core/Visitor\").default;\nconst { transformSync } = require(\"@swc/core\");\n\nclass PluginTransformImport extends Visitor {\n  visitModuleItems(nodes) {\n    const transformedNodes = [];\n\n    for (const node of nodes) {\n      const { type, source, specifiers } = node;\n\n      if (type === \"ImportDefaultSpecifier\") {\n        transformedNodes.push(node);\n        continue;\n      }\n\n      specifiers.forEach((v) => {\n        const name = v.local.value;\n        const type = v.type;\n\n        if (type === \"ImportSpecifier\") {\n          const newSpecifier = {\n            ...v,\n            imported: null,\n            type: \"ImportDefaultSpecifier\",\n          };\n          const value = `${source.value}/lib/${name}`;\n\n          const copyNode = {\n            ...node,\n            source: {\n              ...source,\n              value,\n            },\n            specifiers: [newSpecifier],\n            type: \"ImportDeclaration\",\n          };\n\n          transformedNodes.push(copyNode);\n        }\n      });\n    }\n    return transformedNodes;\n  }\n}\n\nconst transform = (content) => {\n  const code =\n    transformSync(content, {\n      plugin: (v) => new PluginTransformImport().visitProgram(v),\n    })?.code ?? \"\";\n};\n\n</code></pre>\n<p>具体流程:</p>\n<ol>\n<li>新建一个类, 并且继承 <code>@swc/core</code> 提供的 <code>Visitor</code> 类.</li>\n<li>实现对应节点类型的处理函数, 这里是 <code>visitModuleItems</code>, 这里与 babel 不同的是这里是通过函数的返回值来 replace 掉旧的节点</li>\n<li>调用 transformSync, 将实现的类作为插件的形式传入</li>\n</ol>\n<p>下面是两者在对 10000 条 import 语句下的表现:</p>\n<p><img src=\"/assate/swc_vs_babel/example-1.png\" alt=\"alt\">\n<img src=\"/assate/swc_vs_babel/example-2.png\" alt=\"alt\"></p>","theme":"fancy","tag":[null]}},"__N_SSG":true}