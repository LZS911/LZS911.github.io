{"pageProps":{"post":{"title":"码农翻身阅读记录","date":"2024-05-01","slug":"《码农翻身》读书笔记","author":"Ai.Haibara","content":"<h2 id=\"计算机的世界你不懂\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#计算机的世界你不懂\"><span class=\"icon icon-link\"></span></a>计算机的世界你不懂</h2>\n<h3 id=\"我是一个线程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#我是一个线程\"><span class=\"icon icon-link\"></span></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=416915373&#x26;idx=1&#x26;sn=f80a13b099237534a3ef777d511d831a&#x26;scene=21#wechat_redirect\">我是一个线程</a></h3>\n<ol>\n<li>不知道什么时候会被挑中执行</li>\n<li>在执行的过程中随时会被打断</li>\n<li>一旦出现硬盘、数据库这样耗时的操作，也得让出CPU去等待</li>\n<li>数据来了，也不一定马上执行，得等着CPU挑选</li>\n</ol>\n<h3 id=\"tcpip\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tcpip\"><span class=\"icon icon-link\"></span></a>TCP/IP</h3>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=2665513375&#x26;idx=1&#x26;sn=e11745d5cb28fa1f89465f8d0e5fae1a&#x26;chksm=80d679dcb7a1f0CAdec0a1db45b3fa3f6eabde4a9e56a77acf551fbc1511e6b8f055ee2c97e3&#x26;scene=27#wechat_redirect\">TCP/IP之大明内阁</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=2665513384&#x26;idx=1&#x26;sn=82c45e4430618270a744e212d2f57990&#x26;chksm=80d679ebb7a1f0fd27fe1814765a0e60b1c293CA4e09403271b4bb3f38f317439956fdCA1bc1&#x26;scene=27#wechat_redirect\">TCP/IP之蓟辽督师</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=2665513094&#x26;idx=1&#x26;sn=a2accfc41107ac08d74ec3317995955e&#x26;scene=27#wechat_redirect\">TCP/IP 之 大明王朝邮差</a></p>\n<p><img src=\"https://github.com/LZS911/LZS911.github.io/assets/42765421/1308d4ae-c17d-478d-aab8-12ea19ad538b\" alt=\"image\">\n发送的信息被拆分成小包裹，编上序号，打乱顺序后发送，由服务端发送，客户端接收，接收后返回确认接收信息。\n如果一定时间内没有收到确认信息，则代表信息丢失（可能是发出的包裹丢失，也可能是返回的确认信息丢失），重新发送该包裹。全部接收完成后按照序号重新组装成完整信息。</p>\n<h3 id=\"我是一个进程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#我是一个进程\"><span class=\"icon icon-link\"></span></a>我是一个进程</h3>\n<ol>\n<li>一个正在运行的程序叫做进程</li>\n<li>多个程序操作了同一段地址，内存中的数据就会被覆盖。解决办法：CPU添加一个寄存器，专门用来保存起始地址，只要遇到地址有关的指令，就需要把地址加上寄存器的值，这样才能得到真正的地址</li>\n<li>局部性原理\n（1）时间局部性：如果程序中的某条指令一旦执行，则不久之后该条指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。\n（2）空间局部性：是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。</li>\n</ol>\n<h3 id=\"编程世界的那把锁\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#编程世界的那把锁\"><span class=\"icon icon-link\"></span></a>编程世界的那把锁</h3>\n<p>自旋锁：任何线程，只要你想操作一个共享变量，就得先去申请一把锁，拿到这个锁才能读取变量的值，修改值、将值写回内存，最后释放锁。并且检查是否锁定的操作是一个不可分割的原子操作。\n信号量：所谓信号量，其实就是一个整数，基于这个整数有两个操作：wait 和 signal。利用它们做互斥</p>\n<pre><code class=\"language-c++\">int lock = 1;\n\nwati(lock); //相当于获得一个互斥锁\n\n//在这里安全的做事情\n\nsingal(lock) //相当于释放锁\n</code></pre>\n<h2 id=\"java-帝国\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#java-帝国\"><span class=\"icon icon-link\"></span></a>Java 帝国</h2>\n<blockquote>\n<p>由于本人并没怎么接触过 Java 语言，所以只记录了几个感兴趣的章节</p>\n</blockquote>\n<h3 id=\"一个著名的日志系统是怎样设计出来的\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#一个著名的日志系统是怎样设计出来的\"><span class=\"icon icon-link\"></span></a>一个著名的日志系统是怎样设计出来的</h3>\n<p>系统的正交性：Logger、Appender、Formatter，看成坐标系中的 X 轴、Y轴、Z轴，这三者可以独立变化而不受影响。</p>\n<h3 id=\"加锁还是不加锁这是一个问题\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#加锁还是不加锁这是一个问题\"><span class=\"icon icon-link\"></span></a><a href=\"https://mp.weixin.qq.com/s/qJNQeuDWjRCxkSG2nSK5Uw\">加锁还是不加锁，这是一个问题</a></h3>\n<h2 id=\"浪潮之巅的web\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#浪潮之巅的web\"><span class=\"icon icon-link\"></span></a>浪潮之巅的Web</h2>\n<h3 id=\"web-的起源\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#web-的起源\"><span class=\"icon icon-link\"></span></a>Web 的起源</h3>\n<h3 id=\"一个故事讲完https\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#一个故事讲完https\"><span class=\"icon icon-link\"></span></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=2665513779&#x26;idx=1&#x26;sn=a1de58690ad4f95111e013254a026CA2&#x26;chksm=80d67b70b7a1f26697fa1626b3e9830dbdf4857d7a9528d22662f2e43af149265c4fd1b60024&#x26;scene=27#wechat_redirect\">一个故事讲完HTTPS</a></h3>\n<p><img src=\"https://github.com/LZS911/LZS911.github.io/assets/42765421/cdbfc101-7b51-4311-a934-f657c34b9078\" alt=\"image\"></p>\n<p>bill的公钥及身份信息通过HTTPS传输给CA服务器，并生成数字证书。</p>\n<p><img src=\"https://github.com/LZS911/LZS911.github.io/assets/42765421/013fa26c-f94b-4bda-9cb1-fd10709f4e28\" alt=\"image\"></p>\n<p>验证完证书后，除了对称秘钥是用非对称加密传输，其他请求都使用对称加密通信。</p>\n<p>如何确保CA公钥的安全\nCA本身也有证书来证明自己的身份，并且CA的信用是像树一样分级的，高层的CA给底层的CA做信用背书，而操作系统／浏览器中会内置一些顶层的CA的证书，相当于你自动信任了他们。　这些顶层的CA证书一定得安全地放入操作系统／浏览器当中，否则世界大乱。</p>\n<h3 id=\"从密码到token一个有关授权的故事\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#从密码到token一个有关授权的故事\"><span class=\"icon icon-link\"></span></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&#x26;mid=2665513744&#x26;idx=1&#x26;sn=93d0db97cfd67422bcd21c8afd00f495&#x26;chksm=80d67b53b7a1f24537fdc7c10eb2783357c1f8c65ad55601a722216d2293ae3fb7b1c16e5449&#x26;scene=27#wechat_redirect\">从密码到token，一个有关授权的故事</a></h3>\n<h3 id=\"后端风云\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#后端风云\"><span class=\"icon icon-link\"></span></a>后端风云</h3>\n<ol>\n<li>故障转移</li>\n<li>高可用的 Nginx</li>\n<li>高可用的 Tomcat</li>\n<li>数据库的读写分离</li>\n</ol>\n<h3 id=\"nodejs-我只需要一个店小二\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#nodejs-我只需要一个店小二\"><span class=\"icon icon-link\"></span></a><a href=\"https://blog.csdn.net/coderising/article/details/100021138\">Node.js 我只需要一个店小二</a></h3>\n<h3 id=\"命令式编程-vs-声明式编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#命令式编程-vs-声明式编程\"><span class=\"icon icon-link\"></span></a>命令式编程 VS 声明式编程</h3>\n<ol>\n<li>\n<p>命令式编程</p>\n<pre><code class=\"language-java\">  int count = 0;\n  Iterator&#x3C;Student> iter = students.iterator();\n  while(iter.hasNext()){\n    Student s = iter.next();\n    if(s.getAge() &#x3C; 18){\n       count++;\n    }\n  }\n</code></pre>\n</li>\n<li>\n<p>声明式编程</p>\n<pre><code class=\"language-java\">  int count = students.stream().filter(s -> s.getAge() &#x3C; 18).count();\n</code></pre>\n</li>\n</ol>\n<h2 id=\"老司机的精进\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#老司机的精进\"><span class=\"icon icon-link\"></span></a>老司机的精进</h2>\n<ol>\n<li>凡事必先骑虎上背</li>\n<li>好奇心以及养成计算机的思维方式</li>\n<li>抽象是计算机科学中极为重要的武器之一</li>\n<li>要透彻地理解一门技术的本质</li>\n<li>技术的领导力</li>\n<li>写漂亮的代码</li>\n<li>书籍里的知识，体系更加完整，有深度——看书好过碎片阅读</li>\n<li>不要游走在各大语言的边缘</li>\n<li>坚持写作（输出）</li>\n</ol>","theme":"fancy","tag":[null]}},"__N_SSG":true}