{"pageProps":{"post":{"title":"JavaScript 中的抽象类","date":"2025-03-05","slug":"JavaScript 中的抽象类","author":"LZS_911","content":"<p>在 JavaScript 中，抽象类的概念并不像 Java、TypeScript 和 Python 等其他语言那样得到原生支持。然而，我们可以通过编写自定义代码来模拟 JavaScript 中抽象类的行为。</p>\n<p>本文将解释什么是抽象类、抽象类与函数式编程的对比，以及如何在 JavaScript 中实现抽象类。鉴于 TypeScript 是一种基于 JavaScript 的编程语言，这里将用它来解释抽象类的概念，以便于理解。</p>\n<h2 id=\"什么是抽象类\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#什么是抽象类\"><span class=\"icon icon-link\"></span></a>什么是抽象类？</h2>\n<p>在面向对象编程（OOP）中，所有的对象都是通过类来描述的。然而，并不是所有的类都用于描述具体的对象。如果一个类中没有包含足够的信息来描述一个具体的对象，这样的类就是<strong>抽象类</strong>。</p>\n<p>抽象类除了不能实例化对象之外，类的其他功能依然存在。成员变量、成员方法和构造方法的访问方式与普通类一样。</p>\n<p>由于抽象类不能实例化对象，因此抽象类必须被继承才能使用。这也是为什么通常在设计阶段就要决定是否要设计抽象类。</p>\n<p>父类包含了子类集合的常见方法，但由于父类本身是抽象的，因此不能直接使用这些方法。</p>\n<h3 id=\"示例typescript中的抽象类\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#示例typescript中的抽象类\"><span class=\"icon icon-link\"></span></a>示例：TypeScript中的抽象类</h3>\n<blockquote>\n<p>TypeScript 中的类、方法和字段可能是抽象的。\n抽象方法或抽象字段是尚未提供实现的方法或字段。这些成员必须存在于抽象类中，而抽象类不能直接实例化。\n抽象类的作用是作为子类的基类，子类会实现所有抽象成员。如果一个类没有任何抽象成员，则称其为具体类。</p>\n</blockquote>\n<h3 id=\"示例typescript-中的抽象类\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#示例typescript-中的抽象类\"><span class=\"icon icon-link\"></span></a>示例：TypeScript 中的抽象类</h3>\n<p>在 TypeScript 中，类、方法和字段可以是抽象的。抽象方法或抽象字段是尚未提供实现的方法或字段。这些成员必须存在于抽象类中，而抽象类不能直接实例化。</p>\n<p>抽象类的作用是作为子类的基类，子类会实现所有抽象成员。如果一个类没有任何抽象成员，则称其为<strong>具体类</strong>。</p>\n<p>以下是一个抽象类 <code>BaseConfigUtils</code> 的示例：</p>\n<pre><code class=\"language-typescript\">export abstract class BaseConfigUtils&#x3C;\n  T extends BaseConfig,\n  InitOptions extends BaseOptions,\n  ResolvedOptions extends InitOptions\n> {\n  // ...existing code...\n\n  constructor(options: ConfigOptions&#x3C;T, InitOptions, ResolvedOptions>) {\n    // ...existing code...\n  }\n\n  async resolveConfig(opts: unknown): Promise&#x3C;T> {\n    // ...existing code...\n  }\n\n  protected async handleNonInteractiveMode(\n    opts: InitOptions,\n    existingConfig: T | null\n  ): Promise&#x3C;T> {\n    // ...existing code...\n  }\n\n  protected abstract handleInteractiveMode(\n    opts: InitOptions,\n    existingConfig: T | null\n  ): Promise&#x3C;T>;\n\n  protected abstract mergeConfig(\n    opts: InitOptions,\n    existingConfig: T\n  ): Promise&#x3C;T>;\n\n  protected abstract transformToConfig(opts: ResolvedOptions): T;\n\n  protected abstract getConfigIdentifier(opts: InitOptions): string;\n\n  // ...existing code...\n}\n</code></pre>\n<p>在这个示例中，<code>BaseConfigUtils</code> 定义了处理配置文件的结构。子类必须实现 <code>handleInteractiveMode</code>、<code>mergeConfig</code>、<code>transformToConfig</code> 和 <code>getConfigIdentifier</code> 等方法。</p>\n<h2 id=\"函数式编程方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#函数式编程方法\"><span class=\"icon icon-link\"></span></a>函数式编程方法</h2>\n<p>函数式编程（FP）是一种将计算视为数学函数求值的范式，它避免改变状态和可变数据。FP 不使用类和继承，而是依赖纯函数和高阶函数。</p>\n<h3 id=\"示例typescript中的函数式编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#示例typescript中的函数式编程\"><span class=\"icon icon-link\"></span></a>示例：TypeScript中的函数式编程</h3>\n<p>以下是使用函数式编程实现类似功能的示例：</p>\n<pre><code class=\"language-typescript\">type ConfigKey = 'client' | 'mocks';\n\ninterface BaseConfig {\n  [key: string]: string;\n}\n\ninterface BaseOptions {\n  yes: boolean;\n  cwd: string;\n  [key: string]: unknown;\n}\n\ninterface ConfigOptions&#x3C;T extends BaseConfig, InitOptions extends BaseOptions, ResolvedOptions extends InitOptions> {\n  configKey: ConfigKey;\n  initOptionsSchema: z.ZodSchema&#x3C;InitOptions>;\n  resolvedOptionsSchema: z.ZodSchema&#x3C;ResolvedOptions>;\n  defaultConfig: T;\n  command: Command;\n  cwd: string;\n}\n\nconst resolveConfig = async &#x3C;T extends BaseConfig, InitOptions extends BaseOptions, ResolvedOptions extends InitOptions>(\n  options: ConfigOptions&#x3C;T, InitOptions, ResolvedOptions>,\n  opts: unknown\n): Promise&#x3C;T> => {\n  const validatedOpts = await options.initOptionsSchema.parseAsync(opts).catch((error) => {\n    handleSchemaError(error, options.command);\n  });\n\n  const existingConfig = await getRawConfigs(options.cwd, options.configKey, getConfigIdentifier(validatedOpts));\n\n  if (validatedOpts.yes) {\n    return handleNonInteractiveMode(options, validatedOpts, existingConfig);\n  }\n\n  return handleInteractiveMode(options, validatedOpts, existingConfig);\n};\n\nconst handleNonInteractiveMode = async &#x3C;T extends BaseConfig, InitOptions extends BaseOptions, ResolvedOptions extends InitOptions>(\n  options: ConfigOptions&#x3C;T, InitOptions, ResolvedOptions>,\n  opts: InitOptions,\n  existingConfig: T | null\n): Promise&#x3C;T> => {\n  if (existingConfig) {\n    return mergeConfig(opts, existingConfig);\n  }\n\n  try {\n    const validatedOpts = await options.resolvedOptionsSchema.parseAsync(opts);\n    return transformToConfig(validatedOpts);\n  } catch (error) {\n    handleSchemaError(error, options.command);\n  }\n};\n\n// 定义其他函数，如 handleInteractiveMode、mergeConfig、transformToConfig、getConfigIdentifier 和 getRawConfigs\n</code></pre>\n<h2 id=\"抽象类与函数式编程的比较\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#抽象类与函数式编程的比较\"><span class=\"icon icon-link\"></span></a>抽象类与函数式编程的比较</h2>\n<h3 id=\"抽象类\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#抽象类\"><span class=\"icon icon-link\"></span></a>抽象类</h3>\n<ul>\n<li><strong>优点</strong>：\n<ul>\n<li>结构清晰，组织有序。</li>\n<li>强制一致的接口。</li>\n<li>对于熟悉面向对象编程（OOP）的开发人员来说更容易理解。</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：\n<ul>\n<li>可能导致复杂的继承层次结构。</li>\n<li>在组合方面灵活性较差。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数式编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#函数式编程\"><span class=\"icon icon-link\"></span></a>函数式编程</h3>\n<ul>\n<li><strong>优点</strong>：\n<ul>\n<li>提倡不变性和纯函数。</li>\n<li>更容易组合和重用函数。</li>\n<li>避免了继承的陷阱。</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：\n<ul>\n<li>对于习惯于 OOP 的开发人员来说可能更难理解。</li>\n<li>在管理状态和依赖项时可能会导致更多的样板代码。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"javascript-中的抽象类\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#javascript-中的抽象类\"><span class=\"icon icon-link\"></span></a>JavaScript 中的抽象类</h2>\n<pre><code>class Base {\n  constructor(name) {\n    if (this.constructor == Base) {\n      throw new Error(\"Class is of abstract type and can't be instantiated\");\n    }\n\n    if (this.getName == undefined) {\n      throw new Error('getName method must be implemented');\n    }\n    this.name = name;\n  }\n\n  printName() {\n    console.log('Hello, ' + this.getName());\n  }\n}\n\nclass Derived extends Base {\n  getName() {\n     return 'world';\n  }\n}\n\n// const b = new Base();\nconst d = new Derived();\n\nd.printName();\n</code></pre>\n<h2 id=\"结论\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#结论\"><span class=\"icon icon-link\"></span></a>结论</h2>\n<p>抽象类和函数式编程各有优缺点。抽象类提供了一种清晰且结构化的方法来强制接口和共享行为，而函数式编程则提供了灵活性并提倡不变性。选择哪种方法取决于项目的具体需求和团队对每种范式的熟悉程度。</p>\n<p>如果想要在 JavaScript 中创建抽象类，建议使用 TypeScript，因为它不仅提供了类型安全性，还原生支持抽象类的概念。</p>","theme":"condensed-night-purple","tag":["next.js","react"]}},"__N_SSG":true}