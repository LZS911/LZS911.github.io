{"pageProps":{"post":{"title":"《架构整洁之道》读书笔记 - 编程范式篇","date":"2024-11-11","slug":"《架构整洁之道》读书笔记 - 编程范式篇","author":"Ai.Haibara","content":"<h2 id=\"概述\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概述\"><span class=\"icon icon-link\"></span></a>概述</h2>\n<p>最近阅读了 Robert C. Martin 的《架构整洁之道》中关于编程范式的章节。这部分主要介绍了三种主要的编程范式：结构化编程、面向对象编程和函数式编程。每种范式都通过某种方式对程序控制权或数据进行了限制。</p>\n<h3 id=\"结构化编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#结构化编程\"><span class=\"icon icon-link\"></span></a>结构化编程</h3>\n<p>由 Dijkstra 在 1968 年提出\n核心思想：限制直接转移控制权\n引入了模块化和测试的概念\n去除了无限制的 GOTO 语句，引入了 if/then/else 和 do/while/until 等结构\n主要贡献：让程序可以被分解为可证明的单元</p>\n<h3 id=\"面向对象编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#面向对象编程\"><span class=\"icon icon-link\"></span></a>面向对象编程</h3>\n<p>核心特性：封装、继承和多态\n最重要的是多态，它为插件架构提供了基础\n通过多态实现了依赖反转\n允许控制源代码依赖关系的方向\n帮助解决跨模块和跨架构的依赖管理问题</p>\n<h3 id=\"函数式编程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#函数式编程\"><span class=\"icon icon-link\"></span></a>函数式编程</h3>\n<p>基于 λ 演算\n核心思想：不可变性\n所有变量都是不可变的\n没有赋值语句\n通过管理状态的可变性来控制程序的复杂度</p>\n<h3 id=\"个人思考\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#个人思考\"><span class=\"icon icon-link\"></span></a>个人思考</h3>\n<p>这三种范式各自解决了不同的问题：</p>\n<ul>\n<li>结构化编程解决了直接转移控制权的问题</li>\n<li>面向对象编程解决了间接转移控制权的问题</li>\n<li>函数式编程解决了变量赋值的问题</li>\n</ul>\n<p>在实际开发中，这些范式常常是混合使用的。理解它们的本质和限制，有助于我们在架构设计时做出更好的决策。</p>\n<h3 id=\"实践启示\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#实践启示\"><span class=\"icon icon-link\"></span></a>实践启示</h3>\n<p>在设计架构时，要充分利用多态来管理依赖关系\n尽可能使用不可变数据，减少状态管理的复杂度\n合理划分模块，保证每个组件都是可测试的\n在适当的场景选择合适的范式</p>","theme":"fancy","tag":[null]}},"__N_SSG":true}