{"pageProps":{"post":{"title":"如何正确的使用useEffect?","date":"2022-02-20","slug":"如何正确的使用useEffect","author":"LZS_911","content":"<p>最近浏览知乎时看到一篇关于 <code>React Hooks</code> 的文章. 题目标题为 <a href=\"https://zhuanlan.zhihu.com/p/450513902\">React Hooks 使用误区，驳官方文档</a>. 文章作者是社区知名 <code>aHooks</code> 库的作者, 初读文章时并没有感觉到什么奇怪, 平时开发过程中对于官方 <code>hooks</code> 的使用也大致与它描述的相同, 可能是原文标题攻击性过强, 当翻到评论区时, 对于 <code>useEffect</code> 的使用却是大片的反对声音, 甚至有人专门<a href=\"https://www.zhihu.com/question/508780830\">另开一篇文章</a>来讨论该篇文章. 最主要的原因来自 <code>useEffect</code> 的依赖项问题, 具体观点可以阅读原文了解, 本篇文章仅表述下自己的看法以及开发习惯.</p>\n<p>前面有说道在初读原文时并没有感觉到什么异样, 因为下意识的将 <code>useEffect</code> 等同于了 <code>componentDidMount / componentDidUpdate</code>, 或者说是 <code>vue</code> 中的 <code>mounted\\destroyed\\watch</code>. 开发过程中确实会遇到不需要某个依赖改变时去执行某个副作用, 便不添加到依赖项中, <code>eslint</code> 的 <code>友情提示</code> 也会直接被我强硬的注释掉.</p>\n<p>当然会有这篇文章也就是说明我现在的思路有了一定的转变, 具体转变原因来自与原文的一条指路<a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/#tldr\">博客</a>评论. 该博客大致讲述了以下几点:</p>\n<ol>\n<li>如何用 <code>useEffect</code> 模拟 <code>componentDidMount</code> 生命周期？</li>\n<li>如何正确地在 <code>useEffect</code> 里请求数据？[]又是什么？</li>\n<li>我应该把函数当做 <code>effect</code> 的依赖吗？</li>\n<li>为什么有时候会出现无限重复请求的问题？</li>\n<li>为什么有时候在 effect 里拿到的是旧的 state 或 prop？</li>\n</ol>\n<p>最后结论: 我认为正常情况下, <code>useEffect</code> 的依赖项就是应该 <code>诚实以待</code>, 这样会极大程度的减少 <code>bug</code> 以及 <code>善待后人</code>, 但是在某些特殊情况下, 禁用 <code>eslint</code> 也是可以的, 只要你自己清楚的知道这里要干什么.</p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"vuepress","tag":["react","hooks","useEffect"]}},"__N_SSG":true}