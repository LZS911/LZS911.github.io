{"pageProps":{"post":{"title":"work review","date":"2022-06-16","slug":"work-review","author":"LZS_911","content":"<h2 id=\"前端代码覆盖率\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#前端代码覆盖率\"><span class=\"icon icon-link\"></span></a><a href=\"https://juejin.cn/post/7022928631756226591\">前端代码覆盖率</a></h2>\n<p>实现代码插桩插件: <code>babel-plugin-istanbul</code></p>\n<h3 id=\"具体方案\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#具体方案\"><span class=\"icon icon-link\"></span></a>具体方案</h3>\n<ol>\n<li>\n<p>确定当前环境是否需要收集代码覆盖率</p>\n</li>\n<li>\n<p>加载 <code>babel-plugin-istanbul</code> 插件, 获得覆盖率(一般保存在 <code>window.__coverage__</code> 中)</p>\n</li>\n<li>\n<p>上传覆盖率到服务端</p>\n</li>\n<li>\n<p>服务端展示</p>\n</li>\n</ol>\n<p>这里重点主要放在前三步, 实现方案</p>\n<h3 id=\"webpack-项目方案\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#webpack-项目方案\"><span class=\"icon icon-link\"></span></a><code>webpack</code> 项目方案</h3>\n<ol>\n<li>\n<p>在启动服务或者打包时(<code>start、build</code>)时添加自定义 <code>options</code>, 然后再通过 <code>process.argv</code> 判断是否存在该 <code>options</code></p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">\"coverage-build\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"node scripts/build.js --coverageReport=true\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n</li>\n<li>\n<p>正常的加载 <code>babel</code> 插件模式, 需要判断当前环境是否为收集覆盖率环境</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (isCoverageReport) {\n  babelPlugins.<span class=\"hljs-title function_\">push</span>([\n    <span class=\"hljs-string\">'istanbul'</span>,\n    {\n      <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-string\">'./node_modules/*'</span>],\n    },\n  ]);\n}\n</code></pre>\n</li>\n<li>\n<p>轮询调用接口上传 <code>window.__coverage__</code> 中的内容, 同样需要注意的是只有在收集覆盖率环境中才会执行这段代码</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">entry</span>: [\n    isCoverageReport &#x26;&#x26; <span class=\"hljs-built_in\">require</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'../coverageScript'</span>), <span class=\"hljs-comment\">//上传覆盖率代码</span>\n    appIndexJs, <span class=\"hljs-comment\">//项目入口文件</span>\n  ],\n};\n</code></pre>\n</li>\n</ol>\n<h3 id=\"vite-项目方案\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vite-项目方案\"><span class=\"icon icon-link\"></span></a><code>vite</code> 项目方案</h3>\n<ol>\n<li>\n<p>利用 <code>vite</code> 的 <a href=\"https://cn.vitejs.dev/guide/env-and-mode.html\">mode options</a>, 指定当前环境的 <code>mode</code>, 在 <code>vite.config.js</code> 中判断当前 <code>mode</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">config</span>) =></span> {\n  <span class=\"hljs-keyword\">var</span> isCoverage = config.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">'coverage'</span>;\n  <span class=\"hljs-keyword\">var</span> isDebug = config.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">'development'</span>;\n  <span class=\"hljs-keyword\">var</span> isProduction = config.<span class=\"hljs-property\">mode</span> === <span class=\"hljs-string\">'production'</span>;\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">//....</span>\n  }\n}\n</code></pre>\n</li>\n<li>\n<p>同样是正常的加载 <code>babel</code> 插件</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">//....</span>\n<span class=\"hljs-keyword\">return</span> {\n  <span class=\"hljs-comment\">//...</span>\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-title function_\">react</span>({\n      <span class=\"hljs-attr\">babel</span>: {\n        <span class=\"hljs-attr\">plugins</span>: isCoverage ? [<span class=\"hljs-string\">'istanbul'</span>] : [],\n      },\n    }),\n  ],\n};\n</code></pre>\n</li>\n<li>\n<p>虽然 <code>vite.config</code> 中也提供了 <code>rollupOptions</code> , 能够类似 <code>webpack</code> 中自定义指定入口文件, 但是 <code>vite</code> 的开发服务器使用的 <code>esBuild</code>, 这样便没法使用开发环境测试在不同的环境中是否有加载上传覆盖率的代码. 所以, 这里可以换个思路使用条件编译来实现该需求.</p>\n<p>一个简单的 <code>vite</code> 实现条件编译的插件 <a href=\"https://www.npmjs.com/package/vite-plugin-conditional-compile\">https://www.npmjs.com/package/vite-plugin-conditional-compile</a></p>\n<p>最后只需要在项目入口文件中添加该段代码即可</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">/* IFTRUE_isCoverage */</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../scripts/coverageScript'</span>;\n<span class=\"hljs-comment\">/*FITRUE_isCoverage*/</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"鼠标移到表格的操作列的更多按钮的下拉时依然保持-hover-效果\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#鼠标移到表格的操作列的更多按钮的下拉时依然保持-hover-效果\"><span class=\"icon icon-link\"></span></a>鼠标移到表格的操作列的更多按钮的下拉时依然保持 hover 效果</h2>\n<p>主要思路: 将下拉菜单与表格当前行绑定, 下拉菜单打开时给当前行设置 class, 让其具有 hover 效果.</p>\n<p>第一个思路:</p>\n<p>设置一个 <code>currentHoverData</code> 的状态, 当 <code>dropdown</code> 打开时设置成当前行数据, 关闭时置成 <code>null</code>, 再通过表格的 <code>rowClassName</code> 来给每一行数据设置一个 <code>class</code>, 若当前行数据与 <code>currentHoverData</code> 能匹配上则给其具有 <code>hover</code> 效果的 <code>class</code>, 来实现鼠标移走后也能有 <code>hover</code> 效果.</p>\n<p>弊端:</p>\n<ol>\n<li>显而易见的缺陷是当表格数据量过大时, 每一行数据都要去进行计算, 造成性能问题.</li>\n<li>因为下拉菜单的组件中并没有办法获取当前行数据, 只能去修改所有页面的 <code>tableHeader.tsx</code>文件, 这也太蠢了...</li>\n</ol>\n<p>第二个思路:</p>\n<p>主题思路没有发生变化, 主要的变化是怎样将当前打开的这个下拉菜单与当前行绑定. 这里使用的是通过 <code>element</code> 之间的联系来进行绑定.</p>\n<p>找到下拉菜单与表格行的公共元素, 即触发下拉菜单显示的按钮, 它是存在于表格行中的. 通过找该元素的第一个节点类型是 <code>TR</code> 的父节点, 该元素即为需要显示 <code>hover</code> 效果的当前列, 后续给其添加 <code>class</code> 即可.</p>\n<p>在处理这个需求一直想的是怎样通过 <strong>数据</strong> 来将下拉菜单与表格行数据进行绑定, 并没有去考虑使用 <code>javascript</code> 的一些操作元素的原生方法来进行处理, 于是陷入了一个死胡同...</p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"qklhk-chocolate","tag":["istanbul","babel","javascript"]}},"__N_SSG":true}