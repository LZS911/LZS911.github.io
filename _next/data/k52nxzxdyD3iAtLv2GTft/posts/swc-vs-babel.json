{"pageProps":{"post":{"title":"swc-vs-babel","date":"2023-03-18","slug":"swc-vs-babel","author":"Ai.Haibara","content":"<h2 id=\"babel\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#babel\"><span class=\"icon icon-link\"></span></a>babel</h2>\n<p>关于 babel 的介绍: &#x3C;<a href=\"https://lzs911.github.io/posts/babe\">https://lzs911.github.io/posts/babe</a></p>\n<h2 id=\"swc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#swc\"><span class=\"icon icon-link\"></span></a>swc</h2>\n<p><a href=\"https://swc.rs/\">swc</a> 是通过 <a href=\"https://www.rust-lang.org/\">rust</a> 实现的一个类 babel 工具, 而且在 swc 的官网，很直白说自己和 babel 对标，swc 和 babel 命令可以相互替换，并且大部分的 babel 插件也已经实现。</p>\n<p>对比 babel, swc 的最大优势就是快, 这是底层语言所造成的原因. 所以现在很多能用rust重写的工具都开始进行重写.</p>\n<p>光说可能并不能具体的体会 swc 到底有多快, 所以准备同时使用 babel 以及 swc 实现一个简易版本的 <code>babel-import-plugin</code>, 也就是将 <code>import { A, B } from 'lib'</code> 转化成 <code>import A from lib/A; import B from lib/B;</code>.</p>\n<h2 id=\"对比\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#对比\"><span class=\"icon icon-link\"></span></a>对比</h2>\n<p>先来看下 babel 的实现</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> { traverse, parseSync, <span class=\"hljs-attr\">types</span>: t } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@babel/core\"</span>);\n<span class=\"hljs-keyword\">const</span> generator = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@babel/generator\"</span>).<span class=\"hljs-property\">default</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">transform</span> = (<span class=\"hljs-params\">content</span>) => {\n  <span class=\"hljs-keyword\">const</span> ast = <span class=\"hljs-title function_\">parseSync</span>(content);\n  <span class=\"hljs-title function_\">traverse</span>(ast, {\n    <span class=\"hljs-title class_\">ImportDeclaration</span>(_path) {\n      <span class=\"hljs-keyword\">const</span> { node } = _path;\n\n      <span class=\"hljs-keyword\">const</span> libraryName = node.<span class=\"hljs-property\">source</span>.<span class=\"hljs-property\">value</span>;\n\n      <span class=\"hljs-keyword\">const</span> _program = _path.<span class=\"hljs-title function_\">findParent</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =></span> p.<span class=\"hljs-title function_\">isProgram</span>());\n\n      <span class=\"hljs-keyword\">if</span> (\n        node.<span class=\"hljs-property\">specifiers</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">\"ImportDefaultSpecifier\"</span>)\n          .<span class=\"hljs-property\">length</span> > <span class=\"hljs-number\">0</span>\n      ) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n\n      node.<span class=\"hljs-property\">specifiers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n        <span class=\"hljs-keyword\">const</span> name = v.<span class=\"hljs-property\">imported</span>?.<span class=\"hljs-property\">name</span> ?? <span class=\"hljs-string\">\"\"</span>;\n\n        _program.<span class=\"hljs-title function_\">pushContainer</span>(\n          <span class=\"hljs-string\">\"body\"</span>,\n          t.<span class=\"hljs-title function_\">importDeclaration</span>(\n            [t.<span class=\"hljs-title function_\">importDefaultSpecifier</span>(t.<span class=\"hljs-title function_\">identifier</span>(name))],\n            t.<span class=\"hljs-title function_\">stringLiteral</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${libraryName}</span>/lib/<span class=\"hljs-subst\">${name}</span>`</span>)\n          )\n        );\n      });\n\n      _path.<span class=\"hljs-title function_\">remove</span>();\n      _path.<span class=\"hljs-title function_\">skip</span>();\n    },\n  });\n\n  <span class=\"hljs-keyword\">const</span> out = <span class=\"hljs-title function_\">generator</span>(ast)?.<span class=\"hljs-property\">code</span>;\n};\n</code></pre>\n<p>主要流程还是老三步:</p>\n<ol>\n<li>将原代码转化成 ast 树</li>\n<li>遍历 ast, 处理符合条件的 import 语句, 将其转化成需要的格式, 同时使用 <code>program.pushContainer</code> 添加到原树中, 并且移除掉旧的节点.</li>\n<li>将 ast 转化回字符串格式的代码.</li>\n</ol>\n<p>接下来看下 swc 的实现</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Visitor</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@swc/core/Visitor\"</span>).<span class=\"hljs-property\">default</span>;\n<span class=\"hljs-keyword\">const</span> { transformSync } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@swc/core\"</span>);\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PluginTransformImport</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Visitor</span> {\n  <span class=\"hljs-title function_\">visitModuleItems</span>(<span class=\"hljs-params\">nodes</span>) {\n    <span class=\"hljs-keyword\">const</span> transformedNodes = [];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">of</span> nodes) {\n      <span class=\"hljs-keyword\">const</span> { type, source, specifiers } = node;\n\n      <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"ImportDefaultSpecifier\"</span>) {\n        transformedNodes.<span class=\"hljs-title function_\">push</span>(node);\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n\n      specifiers.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n        <span class=\"hljs-keyword\">const</span> name = v.<span class=\"hljs-property\">local</span>.<span class=\"hljs-property\">value</span>;\n        <span class=\"hljs-keyword\">const</span> type = v.<span class=\"hljs-property\">type</span>;\n\n        <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"ImportSpecifier\"</span>) {\n          <span class=\"hljs-keyword\">const</span> newSpecifier = {\n            ...v,\n            <span class=\"hljs-attr\">imported</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"ImportDefaultSpecifier\"</span>,\n          };\n          <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${source.value}</span>/lib/<span class=\"hljs-subst\">${name}</span>`</span>;\n\n          <span class=\"hljs-keyword\">const</span> copyNode = {\n            ...node,\n            <span class=\"hljs-attr\">source</span>: {\n              ...source,\n              value,\n            },\n            <span class=\"hljs-attr\">specifiers</span>: [newSpecifier],\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"ImportDeclaration\"</span>,\n          };\n\n          transformedNodes.<span class=\"hljs-title function_\">push</span>(copyNode);\n        }\n      });\n    }\n    <span class=\"hljs-keyword\">return</span> transformedNodes;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">transform</span> = (<span class=\"hljs-params\">content</span>) => {\n  <span class=\"hljs-keyword\">const</span> code =\n    <span class=\"hljs-title function_\">transformSync</span>(content, {\n      <span class=\"hljs-attr\">plugin</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PluginTransformImport</span>().<span class=\"hljs-title function_\">visitProgram</span>(v),\n    })?.<span class=\"hljs-property\">code</span> ?? <span class=\"hljs-string\">\"\"</span>;\n};\n\n</code></pre>\n<p>具体流程:</p>\n<ol>\n<li>新建一个类, 并且继承 <code>@swc/core</code> 提供的 <code>Visitor</code> 类.</li>\n<li>实现对应节点类型的处理函数, 这里是 <code>visitModuleItems</code>, 这里与 babel 不同的是这里是通过函数的返回值来 replace 掉旧的节点</li>\n<li>调用 transformSync, 将实现的类作为插件的形式传入</li>\n</ol>\n<p>下面是两者在对 10000 条 import 语句下的表现:</p>\n<p><img src=\"/assets/swc_vs_babel/example-1.png\" alt=\"alt\">\n<img src=\"/assets/swc_vs_babel/example-1.png\" alt=\"alt\"></p>","theme":"fancy","tag":[null]}},"__N_SSG":true}