{"pageProps":{"post":{"title":"rust学习记录","date":"2022-12-30","slug":"rust学习记录","author":"Ai.Haibara","content":"<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">apples</span> = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">//不可变</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">bananas</span> = <span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">// 可变</span>\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">guess</span> = <span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">new</span>(); <span class=\"hljs-comment\">//声明一个 String 的新实例, String::new 表示 new 为 String 类型的一个关联函数(静态方法)</span>\n</code></pre>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-title function_ invoke__\">stdin</span>().<span class=\"hljs-title function_ invoke__\">read_line</span>(&#x26;<span class=\"hljs-keyword\">mut</span> guess).<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</code></pre>\n<p><code>read_line</code> 返回一个 <code>Result</code> 类型的值, 需要使用 <code>expect</code> 方法来对返回值进行处理.</p>\n<p>使用 crate 来增加更多功能. crate 类似 node.js 中的 npm, 可以应用第三方发布的包, 同时, 也存在一个类似 package.json 的文件: Cargo.toml, 可以配置项目的一些信息以及添加第三方依赖.</p>\n<pre><code class=\"hljs language-toml\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n</code></pre>\n<p>当执行 cargo run 出现 Blocking waiting for file lock on the registry index 的解决方案:</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">rm</span> -rf ~/.cargo/.package-cache \n\n//或\n<span class=\"hljs-built_in\">rm</span> -rf ~/.cargo/registry/index/*\n</code></pre>\n<p>运行 cargo doc --open 命令来构建所有本地依赖提供的文档，并在浏览器中打开.</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">match</span> guess.<span class=\"hljs-title function_ invoke__\">cmp</span>(&#x26;secret_number) {\n        Ordering::Less => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n        Ordering::Greater => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n        Ordering::Equal => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n    }\n</code></pre>\n<p>一个 match 表达式由 分支（arms） 构成. 一个分支包含一个 模式（pattern）和表达式开头的值与分支模式相匹配时应该执行的代码. Rust 获取提供给 match 的值并挨个检查每个分支的模式</p>\n<pre><code class=\"hljs language-rust\"> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">guess</span> = <span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">new</span>();\n\n  io::<span class=\"hljs-title function_ invoke__\">stdin</span>()\n        .<span class=\"hljs-title function_ invoke__\">read_line</span>(&#x26;<span class=\"hljs-keyword\">mut</span> guess)\n        .<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">guess</span>: <span class=\"hljs-type\">u32</span> = guess.<span class=\"hljs-title function_ invoke__\">trim</span>().<span class=\"hljs-title function_ invoke__\">parse</span>().<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</code></pre>\n<p>在 rust 中可以复用同一个变量名(如上述代码). 这个功能常用在需要转换值类型之类的场景, 它允许我们复用 guess 变量的名字, 而不是被迫创建两个不同变量.</p>\n<p><code>loop</code> 关键字会创建一个无限循环. 当执行到 <code>break</code> 时退出循环.</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">end_flag</span> = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">flag</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"start loop\"</span>);\n    <span class=\"hljs-keyword\">loop</span> {\n        flag = flag + <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">if</span> flag == end_flag {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"end loop\"</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n</code></pre>\n<p>rust 中的类型</p>\n<ol>\n<li>\n<p>标量类型: 整型、浮点型、布尔类型和字符类型.</p>\n</li>\n<li>\n<p>复合类型: 元组、数组.</p>\n</li>\n</ol>\n<p>元组是一个将多个其他类型的值组合进一个复合类型的主要方式, 组长度固定：一旦声明，其长度不会增大或缩小.</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tup</span>: (<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">char</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'r'</span>);\n</code></pre>\n<p>元组解构</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tup</span>: (<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">char</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'r'</span>);\n    <span class=\"hljs-keyword\">let</span> (a, b, c, d) = tup;\n</code></pre>\n<p>rust 中的数组长度是固定的. 若需要长度可变的集合时, 可以使用 vector.</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v1</span>: <span class=\"hljs-type\">Vec</span>&#x3C;<span class=\"hljs-type\">i32</span>> = <span class=\"hljs-type\">Vec</span>::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">v2</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</code></pre>\n<p>rust 中的函数</p>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_value</span>(arg: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">String</span> {\n    arg.<span class=\"hljs-title function_ invoke__\">to_string</span>()\n}\n\n</code></pre>\n<p>定义函数使用关键字 fn, 函数的返回值可以省略 return 关键字, 注意此时同时需要省略语句结尾的分号.</p>\n<p><strong>rust 中的所有权</strong></p>\n<blockquote>\n<p>所有程序都必须管理其运行时使用计算机内存的方式。一些语言中具有垃圾回收机制，在程序运行时有规律地寻找不再使用的内存；在另一些语言中，程序员必须亲自分配和释放内存。Rust 则选择了第三种方式：通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。在运行时，所有权系统的任何功能都不会减慢程序。</p>\n</blockquote>\n<p><a href=\"https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html\">https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html</a></p>\n<p>枚举的定义</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">IpAddrKind</span>{\n  V4,\n  V6,\n}\n</code></pre>\n<p>在枚举值表示类型的同时并且赋予其值</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">IpAdd</span>{\n  <span class=\"hljs-title function_ invoke__\">V4</span>(<span class=\"hljs-type\">String</span>),\n  <span class=\"hljs-title function_ invoke__\">V6</span>(<span class=\"hljs-type\">String</span>),\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">home</span> = IpAddr::<span class=\"hljs-title function_ invoke__\">V4</span>(<span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">\"127.0.0.1\"</span>));\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">loopback</span> = IpAddr::<span class=\"hljs-title function_ invoke__\">V6</span>(<span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">\"::1\"</span>));\n</code></pre>\n<p>Options 枚举</p>\n<p>Option 是标准库定义的另一个枚举. Option 类型应用广泛因为它编码了一个非常普遍的场景, 即一个值要么有值要么没值.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Option</span>&#x3C;T> {\n    <span class=\"hljs-literal\">None</span>,\n    <span class=\"hljs-title function_ invoke__\">Some</span>(T),\n}\n</code></pre>\n<p><code>Option&#x3C;T></code> 枚举是如此有用以至于它甚至被包含在了 prelude 之中, 你不需要将其显式引入作用域. 另外, 它的成员也是如此, 可以不需要 <code>Option::</code> 前缀来直接使用 <code>Some</code> 和 <code>None</code>. 即便如此 <code>Option&#x3C;T></code> 也仍是常规的枚举, <code>Some(T)</code> 和 <code>None</code> 仍是 <code>Option&#x3C;T></code> 的成员.</p>\n<p>当一个变量为 <code>Option&#x3C;T></code>  时, 如果为 <code>Some</code>, 则必须在使用它之前处理了为空的情况. 且在使用它时需要将其由 <code>Option&#x3C;T></code> 转化为 <code>T</code> 类型才可以使用.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">some</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">b</span> = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">assert_eq!</span>(a.<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">\"Option\"</span>) + b, <span class=\"hljs-number\">8</span>);\n}\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">none</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span>: <span class=\"hljs-type\">Option</span>&#x3C;<span class=\"hljs-type\">u32</span>> = <span class=\"hljs-literal\">None</span>;\n    <span class=\"hljs-built_in\">assert_eq!</span>(a.<span class=\"hljs-title function_ invoke__\">is_none</span>(), <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<p>其中 <code>assert_eq!</code> 类似 jest 中的 <code>expect</code></p>\n<p>使用 <code>match</code> 匹配 <code>Option&#x3C;T></code></p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">match_option</span>(x: <span class=\"hljs-type\">Option</span>&#x3C;<span class=\"hljs-type\">i32</span>>) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">Option</span>&#x3C;<span class=\"hljs-type\">i32</span>> {\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-literal\">None</span> => <span class=\"hljs-literal\">None</span>,\n        <span class=\"hljs-title function_ invoke__\">Some</span>(i) => <span class=\"hljs-title function_ invoke__\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n    }\n}\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">five</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">six</span> = <span class=\"hljs-title function_ invoke__\">match_option</span>(five);\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">none</span> = <span class=\"hljs-title function_ invoke__\">match_option</span>(<span class=\"hljs-literal\">None</span>);\n</code></pre>\n<p><code>match</code> 的分支必须覆盖了所有的可能性, 也有时说 rust 中的匹配是 穷尽的（exhaustive: 必须穷举到最后的可能性来使代码有效</p>\n<p>拓展: 如何使用 javascript 实现类似 <code>match</code> 的功能.</p>\n<p>通配模式</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val</span> = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add</span>() {}\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>() {}\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">skip</span>() {}\n    <span class=\"hljs-keyword\">match</span> val {\n        <span class=\"hljs-number\">1</span> => <span class=\"hljs-title function_ invoke__\">add</span>(),\n        <span class=\"hljs-number\">2</span> => <span class=\"hljs-title function_ invoke__\">remove</span>(),\n        other => <span class=\"hljs-title function_ invoke__\">skip</span>(),\n    }\n</code></pre>\n<p>这里的 other 代表了 val 的值 除了 1、2 之外的所有情况</p>\n<p>占位模式</p>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val</span> = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add</span>() {}\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>() {}\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">skip</span>() {}\n    <span class=\"hljs-keyword\">match</span> val {\n        <span class=\"hljs-number\">1</span> => <span class=\"hljs-title function_ invoke__\">add</span>(),\n        <span class=\"hljs-number\">2</span> => <span class=\"hljs-title function_ invoke__\">remove</span>(),\n        _ => ()\n    }\n</code></pre>\n<p><code>if let</code> 简洁控制流</p>\n<p><code>if let</code> 是 <code>match</code> 的一个语法糖, 它当值匹配某一模式时执行代码而忽略所有其他值.</p>\n<pre><code class=\"hljs language-rust\">   <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">config_max</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">32</span>);\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(max) = config_max {\n        <span class=\"hljs-built_in\">assert_eq!</span>(max, <span class=\"hljs-number\">32</span>)\n    }\n</code></pre>\n<p><code>if let</code> 语法获取通过等号分隔的一个模式和一个表达式. 它的工作方式与 <code>match</code> 相同, 这里的表达式对应 <code>match</code> 而模式则对应第一个分支.</p>\n<p><strong>使用包、Create和模块管理不断增长的项目</strong></p>","theme":"fancy","tag":["rust"]}},"__N_SSG":true}