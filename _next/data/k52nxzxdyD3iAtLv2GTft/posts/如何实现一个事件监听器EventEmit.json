{"pageProps":{"post":{"title":"如何实现一个EventEmit?","date":"2022-09-07","slug":"如何实现一个事件监听器EventEmit","author":"LZS_911","content":"<h2 id=\"eventemit-简介\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#eventemit-简介\"><span class=\"icon icon-link\"></span></a>EventEmit 简介</h2>\n<p><code>node.js</code> 所有的异步 <code>I/O</code> 操作在完成时都会发送一个事件到事件队列. 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件. 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例.</p>\n<p><code>EventEmit</code> 是 <code>node.js</code> 内置模块 <code>events</code> 提供的一个 <code>class</code>, 在 <code>node.js</code> 环境中可以直接 <code>require</code> 后使用. 在 <code>web</code> 环境中我们可以使用第三方 <code>npm</code> 包或者原生的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget\">EventTarget</a>. 当然, 也可以自己实现一个类似 <code>node.js</code> 的简易版本.</p>\n<p>我们先来看下 <code>EventEmit</code> 的基本使用方法:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">EventEmitter</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node:events'</span>);\n\n<span class=\"hljs-keyword\">const</span> event = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>();\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fn</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'event 事件触发!'</span>);\n};\n\n<span class=\"hljs-comment\">//为指定事件注册一个监听器</span>\nevent.<span class=\"hljs-title function_\">addListener</span>(<span class=\"hljs-string\">'event'</span>, fn);\n\n<span class=\"hljs-comment\">//触发监听器</span>\nevent.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'event'</span>);\n\n<span class=\"hljs-comment\">//移除监听器</span>\nevent.<span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-string\">'event'</span>, fn);\n</code></pre>\n<p>其中, 当我们添加新的监听器时, <code>newListener</code> 事件会触发, <code>当监听器被移除时，removeListener</code> 事件被触发.</p>\n<h3 id=\"实现的-api-介绍\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#实现的-api-介绍\"><span class=\"icon icon-link\"></span></a>实现的 Api 介绍</h3>\n<ol>\n<li>\n<p><code>emitter.addListener(eventName, listener)</code> 为指定事件注册一个监听器，接受一个 <code>string</code> (或 <code>symbol</code>) 类型的 <code>eventName</code> 和一个回调函数. 返回值为 <code>EventEmit</code> 的实例, 以便链式调用.</p>\n<ul>\n<li><code>eventName</code> <code>&#x3C;string></code> | <code>&#x3C;symbol></code></li>\n<li><code>listener</code> <code>&#x3C;Function></code></li>\n<li><code>Returns</code> <code>&#x3C;EventEmit></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.emit(eventName, [...args])</code> 同步调用为名为 <code>eventName</code> 的事件注册的每个监听器, 按照它们注册的顺序, 将提供的参数传递给每个侦听器, 如果存在该监听器, 则返回 <code>True</code>, 否则返回 <code>False</code></p>\n<ul>\n<li><code>eventName</code> <code>&#x3C;string></code> | <code>&#x3C;symbol></code></li>\n<li><code>...args</code> <code>&#x3C;any></code></li>\n<li><code>Returns</code> <code>&#x3C;boolean></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.once(eventName, listener)</code> 和 <code>addListener</code> 类似, 但只触发一次, 随后便解除事件监听.</p>\n</li>\n<li>\n<p><code>emitter.removeListener(eventName, listener)</code> 移除指定事件的某个监听回调.</p>\n<ul>\n<li><code>eventName</code> <code>&#x3C;string></code> | <code>&#x3C;symbol></code></li>\n<li><code>listener</code> <code>&#x3C;Function></code></li>\n<li><code>Returns</code> <code>&#x3C;EventEmit></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.removeAllListeners([eventName])</code> 删除所有监听器, 或删除指定 <code>eventName</code> 的监听器.</p>\n<ul>\n<li><code>eventName</code> <code>&#x3C;string></code> | <code>&#x3C;symbol></code></li>\n<li><code>Returns</code> <code>&#x3C;EventEmitter></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.setMaxListeners(n)</code> 用于修改监听器的默认限制的数量. (默认大于 10 个监听回调时会产生警告)</p>\n<ul>\n<li><code>n</code> <code>&#x3C;integer></code></li>\n<li><code>Returns</code> <code>&#x3C;EventEmitter></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.getMaxListeners()</code> 获取限制监听器的数量</p>\n</li>\n<li>\n<p><code>emitter.listeners(eventName)</code> 返回名为 <code>eventName</code> 的事件的监听器数组的副本.</p>\n<ul>\n<li><code>eventName</code> <code>&#x3C;string></code> | <code>&#x3C;symbol></code></li>\n<li><code>Returns</code> <code>&#x3C;Function></code></li>\n</ul>\n</li>\n<li>\n<p><code>emitter.listenerCount(eventName)</code> 返回监听名为 <code>eventName</code> 的事件的监听器数量</p>\n</li>\n<li>\n<p><code>emitter.on</code> <code>emitter.addListener</code>的别名函数</p>\n</li>\n<li>\n<p><code>emitter.off</code> <code>emitter.removeListener</code>的别名函数</p>\n</li>\n</ol>\n<h3 id=\"构造函数\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#构造函数\"><span class=\"icon icon-link\"></span></a>构造函数</h3>\n<pre><code class=\"hljs language-javascript\">  #maxListeners = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-variable language_\">this</span>.#maxListeners = <span class=\"hljs-number\">10</span>;\n  }\n</code></pre>\n<p>其中 <code>listeners</code> 的结构如下:</p>\n<pre><code class=\"hljs language-JSON\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"event1\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>f1<span class=\"hljs-punctuation\">,</span>f2<span class=\"hljs-punctuation\">,</span>f3<span class=\"hljs-punctuation\">]</span>，\n  <span class=\"hljs-attr\">\"event2\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>f4<span class=\"hljs-punctuation\">,</span>f5<span class=\"hljs-punctuation\">]</span>，\n  ...\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"addlistener-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#addlistener-方法\"><span class=\"icon icon-link\"></span></a>addListener 方法</h3>\n<ol>\n<li>\n<p>判断该事件监听器数组是否初始化，若未初始化，则将 <code>listeners[event]</code> 初始化为数组，并加入监听器 <code>cb</code>, 并触发 <code>newListener</code> 事件.</p>\n</li>\n<li>\n<p>判断该事件的监听器数量是否已超限，超限则报警告.</p>\n</li>\n<li>\n<p>判断数组中是否已存在 <code>cb</code>, 不存在则添加，已存在则不做操作.</p>\n</li>\n<li>\n<p>指定 <code>on</code> 等于 <code>addListener</code> 方法</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">addListener</span>(<span class=\"hljs-params\">eventName, cb</span>) {\n    <span class=\"hljs-keyword\">if</span> (\n      !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName || !<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName])]\n    ) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName] = [cb];\n      <span class=\"hljs-keyword\">if</span> (eventName !== <span class=\"hljs-string\">\"newListener\"</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"newListener\"</span>);\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName].<span class=\"hljs-property\">length</span> >= <span class=\"hljs-variable language_\">this</span>.#maxListeners) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(\n        <span class=\"hljs-string\">\"MaxListenersExceededWarning: Possible EventEmitter memory leak detected. %d event6 listeners added to [EventEmitter]. Use emitter.setMaxListeners() to increase limit\"</span>,\n        <span class=\"hljs-variable language_\">this</span>.#maxListeners\n      );\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName].<span class=\"hljs-title function_\">push</span>(cb);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n</code></pre>\n<h3 id=\"emit-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#emit-方法\"><span class=\"icon icon-link\"></span></a>emit 方法</h3>\n<p>遍历监听器,通过 <code>apply</code> 方法把上面得到的 <code>args</code> 参数传进去, 需要注意的是不要漏了返回值.</p>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-params\">eventName, ...args</span>) {\n    <span class=\"hljs-keyword\">const</span> isExistEvent =\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName] &#x26;&#x26; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName].<span class=\"hljs-property\">length</span> > <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">if</span> (isExistEvent) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">cb</span>) =></span> {\n        cb.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, args);\n      });\n    }\n    <span class=\"hljs-keyword\">return</span> isExistEvent;\n  }\n</code></pre>\n<h3 id=\"removelistener-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#removelistener-方法\"><span class=\"icon icon-link\"></span></a>removeListener 方法</h3>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-params\">eventName, listener</span>) {\n    <span class=\"hljs-keyword\">const</span> index = (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName] || []).<span class=\"hljs-title function_\">indexOf</span>(listener);\n    <span class=\"hljs-keyword\">if</span> (index !== -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName].<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">if</span> (eventName !== <span class=\"hljs-string\">\"removeListener\"</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">\"removeListener\"</span>);\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n</code></pre>\n<h3 id=\"once-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#once-方法\"><span class=\"icon icon-link\"></span></a>once 方法</h3>\n<p><code>once</code> 方法是 <code>on</code> 方法和 <code>removeListener</code> 方法的结合：用 <code>on</code> 方法监听，在回调结束的最后位置，通过<code>removeListener</code> 删掉监听函数自身</p>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">once</span>(<span class=\"hljs-params\">eventName, listener</span>) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fn</span> = (<span class=\"hljs-params\">...args</span>) => {\n      listener.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, args);\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">removeListener</span>(eventName, fn);\n    };\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">on</span>(eventName, fn);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n</code></pre>\n<h3 id=\"removealllisteners-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#removealllisteners-方法\"><span class=\"icon icon-link\"></span></a>removeAllListeners 方法</h3>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-params\">eventNames = []</span>) {\n    <span class=\"hljs-keyword\">if</span> (eventNames.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      eventNames.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[v] = <span class=\"hljs-literal\">null</span>;\n      });\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n</code></pre>\n<h3 id=\"setmaxlistenersgetmaxlistenerslistenercountonoff-方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#setmaxlistenersgetmaxlistenerslistenercountonoff-方法\"><span class=\"icon icon-link\"></span></a>setMaxListeners、getMaxListeners、listenerCount、on、off 方法</h3>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-title function_\">setMaxListeners</span>(<span class=\"hljs-params\">maxListeners</span>) {\n    <span class=\"hljs-variable language_\">this</span>.#maxListeners = maxListeners;\n  }\n  <span class=\"hljs-title function_\">getMaxListeners</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#maxListeners;\n  }\n  <span class=\"hljs-title function_\">listenerCount</span>(<span class=\"hljs-params\">eventName</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">listeners</span>[eventName]?.<span class=\"hljs-property\">length</span> ?? <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-title class_\">EventEmitter</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">on</span> = <span class=\"hljs-title class_\">EventEmitter</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">addListener</span>;\n  <span class=\"hljs-title class_\">EventEmitter</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">off</span> = <span class=\"hljs-title class_\">EventEmitter</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">removeListener</span>;\n</code></pre>\n<h4 id=\"完整代码地址-httpsgithubcomlzs911eventemit\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#完整代码地址-httpsgithubcomlzs911eventemit\"><span class=\"icon icon-link\"></span></a>完整代码地址: <a href=\"https://github.com/LZS911/EventEmit\">https://github.com/LZS911/EventEmit</a></h4>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"orange","tag":["node","javascript","EventEmit"]}},"__N_SSG":true}