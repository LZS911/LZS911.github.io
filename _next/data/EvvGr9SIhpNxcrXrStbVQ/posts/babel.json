{"pageProps":{"post":{"title":"babel","date":"2021-11-30","slug":"babel","author":"LZS_911","content":"<h2><code>babel</code> 介绍</h2>\n<hr>\n<h3>1. <code>babel</code> 的诞生</h3>\n<p>在学习一个框架/库之前, 我们可以先去追根溯源了解它诞生的原因以及在开发上具体解决了什么问题, 这样可以更容易理解以及学习它.</p>\n<p><code>babel</code> 的前身是一个名叫 <code>6to5</code> 的库, <code>6to5</code> 的作者 是 <code>Facebook</code> 的澳大利亚的工程师 <a href=\"https://github.com/sebmck\">Sebastian McKenzie</a>, 主要功能就是 <code>ES6</code> 转成 <code>ES5</code>, 它使用转换 <code>AST</code> 的引擎是 <code>fork</code> 了一个更古老的库 <a href=\"https://github.com/acornjs/acorn\">acorn</a>, 在后来 <code>6to5</code> 和 <code>Esnext</code> 库的团队决定一起开发 <code>6to5</code>, 并改名为 <code>Babel</code>, 解析引擎改名为 <code>Babylon</code>, 再后来 <code>Babylon</code> 移入到 <code>@babel/parser</code>.</p>\n<h3>2. <code>babel</code> 含义</h3>\n<p><code>babel</code> 指的是 通天塔, 是巴比伦文明里面的 通天塔</p>\n<blockquote>\n<p>当时地上的人们都说同一种语言, 当人们离开东方之后, 他们来到了示拿之地。在那里, 人们想方设法烧砖好让他们能够造出一座城和一座高耸入云的塔来传播自己的名声, 以免他们分散到世界各地。上帝来到人间后看到了这座城和这座塔, 说一群只说一种语言的人以后便没有他们做不成的事了；于是上帝将他们的语言打乱, 这样他们就不能听懂对方说什么了, 还把他们分散到了世界各地, 这座城市也停止了修建。这座城市就被称为“巴别城”。\n-- 《创世记》</p>\n<p>来自: <a href=\"https://en.wikipedia.org/wiki/Tower_of_Babel\">https://en.wikipedia.org/wiki/Tower_of_Babel</a></p>\n</blockquote>\n<p>果然, 大佬就是大佬, 起名都很艺术.</p>\n<h3>3. <code>babel</code> 的意义</h3>\n<p>为什么需要用到 <code>babel</code> 来对转换代码?</p>\n<p>在 2015 年 <code>ES6</code> 发布后, 为了兼容某些低版本浏览器, 于是需要将代码进行转换, 当然还有一些其他的兼容方式, 例如添加 <code>Polyfill</code>, 比如如果某个版本的浏览器不支持 <code>Array.prototype.find</code> 方法, 但是我们的代码中有用到 <code>Array</code> 的 <code>find</code> 函数, 为了支持这些代码, 我们会人为的加一些兼容代码.</p>\n<pre><code class=\"language-javascript\">if (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype,  'find',  {\n      // 实现代码\n      ...\n  });\n}\n</code></pre>\n<p>但是有一些情况我们使用到了一些新语法, 或者一些其他写法, 例如</p>\n<pre><code class=\"language-javascript\">//箭头函数\nconst fn = () => 'hello javascript!';\n// jsx\nconst Component = () => &#x3C;div />;\n</code></pre>\n<p>因为一些浏览器根本就不识别这些代码, 这时候就需要把这些代码转换成浏览器识别的代码。<code>babel</code> 就是做这个事情的。</p>\n<h2><code>babel</code> 具体做了些什么</h2>\n<hr>\n<p><code>babel</code> 在转换代码这块主要做了三件事:</p>\n<ul>\n<li><code>parser</code> 解析我们的代码转换为 <code>AST</code>.</li>\n<li><code>transform</code> 利用我们配置好的 <code>plugins/presets</code> 把 <code>parser</code> 生成的 <code>AST</code> 转变为新的 <code>AST</code>.</li>\n<li><code>generator</code> 把转换后的 <code>AST</code> 生成新的代码.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/LZS911/LZS911.github.io/backend-main/assets/images/study/babel/mind.jpg\" alt=\"alt\"></p>\n<p>其中 <code>transform</code> 占了很大一块比重, 这个转换过程是 <code>babel</code> 中最为复杂的一部分, 平时所添加的 <code>plugins/presets</code> 便是在这个过程中起的作用.</p>\n<p>先来看下 <code>parser</code> 与 <code>generator</code> 部分</p>\n<ol>\n<li>\n<p><a href=\"(https://babeljs.io/docs/en/babel-parser#docsNav)\">@babel/parser</a>: <code>parser</code> 主要的作用是将字符串代码转换为 <code>AST</code>, 具体过程参考: <a href=\"https://mp.weixin.qq.com/s/fH2xYo_Bad0mgvo0OdYRZQ\">https://mp.weixin.qq.com/s/fH2xYo_Bad0mgvo0OdYRZQ</a></p>\n</li>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-generator\">@babel/generator</a>: 代码生成步骤把最终（经过一系列转换之后）的 <code>AST</code> 转换成字符串形式的代码, 同时还会创建源码映射（<code>source maps</code>）。代码生成过程采用<a href=\"https://segmentfault.com/a/1190000018706578\">深度优先遍历</a>整个 <code>AST</code>, 然后构建可以表示转换后代码的字符串。</p>\n</li>\n</ol>\n<h2><code>transform</code></h2>\n<hr>\n<p>在拿到 <code>parser</code> 生成的 <code>AST</code> 结构后, 经过一系列的操作对 <code>AST</code> 节点进行变更, 然后转换成字符串代码. 那么如何去修改 <code>AST</code> 节点呢?</p>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin\">babel 插件形式</a></p>\n<p>依葫芦画瓢来一个简单的栗子:</p>\n<p>代码地址: <a href=\"https://codesandbox.io/s/node-js-forked-ub0e6?file=/remove-clg/example/index.js\">https://codesandbox.io/s/node-js-forked-ub0e6?file=/remove-clg/example/index.js</a></p>\n<pre><code class=\"language-javascript\">// example/index.js\nconst babel = require('@babel/core');\nconst removeClg = require('../index');\n\nconst code = `\nconst num = 123;\nconsole.log(num);\nconsole.info(num);\nconst fn = () => 123\nfn();\n`;\nconst result = babel.transform(code, {\n  plugins: [removeClg],\n});\n\nconsole.log(result); // code : const num = 123;\\n\\nconst fn = () => 123;\\n\\nfn();\n</code></pre>\n<pre><code class=\"language-javascript\">//index.js\nconst visitor = {\n  CallExpression(_path) {\n    const isClg =\n      _path.node?.callee?.type === 'MemberExpression' &#x26;&#x26;\n      _path.node?.callee?.object?.name === 'console';\n\n    if (isClg) {\n      _path.remove();\n    }\n  },\n};\n//如果 plugins 是个函数则返回的对象要有 visitor 属性, 如果是个对象则直接定义 visitor 属性\nmodule.exports = { visitor };\n</code></pre>\n<p>这样便简单实现了一个移除代码中的 <code>console.xxx</code> 的 <code>babel</code> 插件.</p>\n<p>那么当遍历到对应类型节点时这个 <code>_path</code> 是什么呢?</p>\n<p><code>visitor</code> 在遍历到对应节点执行对应函数时候会给我们传入 <code>_path</code> 参数, 辅助我们完成替换节点等操作。注意 <code>_path</code> 是表示两个节点之间连接的对象, 而不是当前节点. 大致结构如下:</p>\n<pre><code class=\"language-javascript\">{\n  parent: {\n    type: \"ExpressionStatement\"\n    // ...\n  },\n  node: {\n    type: \"CallExpression\"\n    // ...\n  }\n}\n</code></pre>\n<p>我们可以通过 <code>_path</code> 访问到当前节点、父节点以及一系列跟节点操作相关的方法(例如: <code>remove</code>, <code>replaceWith</code>)</p>\n<p><a href=\"https://babeljs.io/docs/en/babel-traverse#docsNav\">@babel/traverse</a>: 该工具提供遍历 <code>AST</code> 节点功能, 使用该工具时, 我们可以不使用插件形式来操作 <code>AST</code> 节点.</p>\n<p>举个栗子: <a href=\"https://lzs911.github.io/posts/%E5%9B%BD%E9%99%85%E5%8C%96%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%AD%E8%A8%80%E5%8C%85%E7%9A%84vite%E6%8F%92%E4%BB%B6\">一个并没啥用的 <code>vite</code> 插件</a></p>\n<h2><code>plugin</code>、<code>preset</code></h2>\n<hr>\n<p><code>plugin</code> 应该不用再过多的介绍了, 它是对 <code>AST</code> 节点进行操作的关键工具, 那么 <code>preset</code> 又起到什么作用呢?</p>\n<p><code>babel</code> 插件在设计时一般拆成了最小粒度, 开发者可按需引用. 比如 <code>ES6</code> 转 <code>ES5</code> 的功能, <code>babel</code> 官方拆成了很多个独立的插件.\n这样的好处显而易见, 既提高了性能, 也提高了扩展性.</p>\n<p>比如开发者想要体验 <code>ES6</code> 的箭头函数特性, 那他只需要引入 <code>transform-es2015-arrow-functions</code> 插件就可以, 而不是加载 <code>ES6</code> 全家桶.</p>\n<p>但很多时候, 逐个插件引入的效率比较低下. 比如在项目开发中, 开发者想要将所有 <code>ES6</code> 的代码转成 <code>ES5</code>, 插件逐个引入的方式令人抓狂.</p>\n<p>这个时候, 可以采用 <code>preset</code>, 可以简单的把 <code>preset</code> 视为 <code>plugin</code> 的集合。比如 <code>babel-preset-es2015</code> 就包含了所有跟 <code>ES6</code> 转换有关的插件. 换个角度可以理解成脚手架中的预设模版.</p>\n<h3><code>plugin</code> 与 <code>preset</code> 的执行顺序</h3>\n<p>如果 <code>babel</code> 中配置的多个插件都将对节点进行操作时, 那么这个时候插件的执行顺序便很重要, 那么它们的执行顺序是什么样的呢?</p>\n<p>这里直接从 <code>babel</code> 官网中拿到结果:</p>\n<ul>\n<li>插件在预设之前运行.</li>\n<li>插件排序从头到尾.</li>\n<li>预设顺序颠倒（从后到前).</li>\n</ul>\n<h3>一些常用的 <code>plugin</code> 与 <code>preset</code></h3>\n<ol>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env\">@babel/preset-env</a>:</p>\n<p>首先, 介绍下历史背景. 最初, 为了让开发者能够尽早用上新的 <code>JS</code> <code>特性, babel</code> 团队开发了 <code>babel-preset-latest</code>。这个 <code>preset</code> 比较特殊, 它是多个 <code>preset</code> 的集合(<code>es2015+</code>), 并且随着 <code>ECMA</code> 规范的更新更增加它的内容.</p>\n<p>比如, 在 2018 年时, 它包含的 <code>preset</code> 包括：<code>es2017、es2016、es2015</code>.</p>\n<p>到了 2019, 可能它包含的 <code>preset</code> 就包括：<code>es2018、es2017、es2016、es2015</code>.</p>\n<p>随着时间的推移, <code>babel-preset-latest</code> 包含的插件越来越多, 这带来了如下问题：</p>\n<p>加载的插件越来越多, 编译速度会越来越慢. 随着用户浏览器的升级, <code>ECMA</code> 规范的支持逐步完善, 编译至低版本规范的必要性在减少. 因此, <code>babel</code> 官方推出了 <code>babel-preset-env</code> 插件.</p>\n<p>它可以根据开发者的配置, 按需加载插件, 主要配置项:</p>\n<ul>\n<li>\n<p><code>targets</code>: 可以利用 <a href=\"https://github.com/browserslist/browserslist\">browserslist</a> 来指定来兼容哪些浏览器.</p>\n<p>配置方式:</p>\n<pre><code class=\"language-javascript\">//在配置文件中\nplugins: [\n  [\n    '@babel/preset-env',\n    {\n      targets: '> 0.25%, not dead',\n    },\n  ],\n];\n</code></pre>\n<p>在 package.json 中</p>\n<pre><code class=\"language-json\">{\n  \"browserslist\": {\n    \"production\": [\">0.2%\", \"not dead\", \"not ie &#x3C;= 11\", \"not op_mini all\"],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n</code></pre>\n<ul>\n<li>0.2%：所有浏览器至少占全球市场份额的 0.2%</li>\n<li>not dead: 24 个月内没有官方支持的浏览器</li>\n<li>not ie &#x3C;= 11：排除 IE 11 和旧版本</li>\n<li>not op_mini all：排除 Opera Mini</li>\n</ul>\n<p>当然也可以直接指定浏览器以及版本:</p>\n<pre><code class=\"language-javascript\">//在配置文件中\nplugins: [\n  [\n    '@babel/preset-env',\n    {\n      targets: {\n        chrome: '58',\n        ie: '11',\n      },\n    },\n  ],\n];\n</code></pre>\n</li>\n<li>\n<p><code>useBuiltIns</code>: 该配置指定 <code>@babel/preset-env</code> 如何处理 <code>polyfill</code>, 主要用来配合 <code>@babel/polyfill</code> .</p>\n<ol>\n<li><code>false</code>: 不做任何处理.</li>\n<li><code>entry</code>: 主动引入 <code>@babel/polyfill</code>, 会进行全量引入.</li>\n<li><code>usage</code>: 只会引入使用到的 <code>polyfill</code>.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-react\">@babel/preset-react</a>: 看名字应该就可以猜出该预设主要是为了处理 <code>react</code> 项目中的文件转换. 该预设始终包含一下三个插件</p>\n<ul>\n<li><a href=\"https://www.babeljs.cn/docs/babel-plugin-syntax-jsx\">@babel/plugin-syntax-jsx</a>: 解析 <code>JSX</code> 语法.</li>\n<li><a href=\"https://www.babeljs.cn/docs/babel-plugin-transform-react-jsx\">@babel/plugin-transform-react-jsx</a>: 转换 <code>JSX</code> 语法, 在 <code>babel v7.9.0</code> 中添加自动运行时功能, 将自动导入 JSX 编译成的函数. 也就是 <code>React 17.0</code> 中提供的全新的 <code>JSX</code> 转换, 在文件中不导入 <code>react</code> 包的情况下直接使用 <code>JSX</code> 语法.</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-display-name\">@babel/plugin-transform-react-display-name</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/361874935\">@babel/polyfill、@babel/plugin-transform-runtime、core-js3</a></p>\n</li>\n</ol>\n<h2><code>babel</code> 与 <code>webpack</code></h2>\n<hr>\n<p>在 <code>webpack</code> 中提供了 <code>babel-loader</code> 来配置 <code>babel</code></p>\n<pre><code class=\"language-javascript\">module: {\n  rules: [\n    {\n      test: /\\.(js|jsx|ts|tsx)$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [\n            '@babel/preset-env',\n            '@babel/preset-react',\n            '@babel/preset-typescript',\n          ],\n          plugins: [\n            [\n              '@babel/plugin-transform-runtime',\n              {\n                corejs: 3,\n              },\n            ],\n          ],\n        },\n      },\n    },\n  ];\n}\n</code></pre>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"Chinese-red","tag":["babel"]}},"__N_SSG":true}