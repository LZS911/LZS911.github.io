{"pageProps":{"post":{"title":"国际化项目中自动化语言包的vite插件","date":"2021-11-23","slug":"国际化项目中自动化语言包的vite插件","author":"LZS_911","content":"<h2>前言</h2>\n<hr>\n<p>在包含国际化的前端项目中, 需要提取出对应语言的文本数据, 在代码中使用函数调用的方式来添加文本<a href=\"https://react.i18next.com/\">(react 国际化插件</a>). 这样在开发过程中每添加一行文本信息就得去对应的语言包文件中添加对应的数据, 若只有中文和英语还好, 只需要添加两种语言数据, 可当对应的语言包很多时, 有没有一种简单的方式来自动添加呢?</p>\n<h2><code>vite</code> 插件介绍</h2>\n<hr>\n<p>官方文档链接: <a href=\"https://cn.vitejs.dev/guide/api-plugin.html\">https://cn.vitejs.dev/guide/api-plugin.html</a></p>\n<p><code>vite</code> 插件通常的惯例为返回一个实际插件对象的工厂函数, 该函数可以接受允许用户自定义插件行为的选项.</p>\n<p>在这里只需要用到 <code>vite</code> 的独有钩子函数 <a href=\"https://cn.vitejs.dev/guide/api-plugin.html#handlehotupdate\">handleHotUpdate</a>. 它可以执行自定义 <code>HMR</code> 更新处理, 在代码文件更新时去添加或者修改语言包文件.</p>\n<h2>准备</h2>\n<hr>\n<ol>\n<li>\n<p>定义用户自定义插件的选项</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th align=\"center\">defaultValue</th>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">funName</td>\n<td align=\"center\">t</td>\n<td align=\"center\">string</td>\n<td align=\"center\">function call name</td>\n</tr>\n<tr>\n<td align=\"center\">splitCode</td>\n<td align=\"center\">#</td>\n<td align=\"center\">string</td>\n<td align=\"center\">split code</td>\n</tr>\n<tr>\n<td align=\"center\">languageDir</td>\n<td align=\"center\">['locale/zh-CN', 'locale/en-US']</td>\n<td align=\"center\">string[]</td>\n<td align=\"center\">localeage path</td>\n</tr>\n<tr>\n<td align=\"center\">include</td>\n<td align=\"center\">['src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts']</td>\n<td align=\"center\">string[]</td>\n<td align=\"center\">include directory</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码解析工具 —— <code>babel</code></p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/en/babel-parser#docsNav\">babel-parse(parseSync)</a>: 将字符串格式的 <code>javascript</code> 源码解析为 <code>AST</code> , 同时也支持 <code>JSX、 Flow、 Typescript</code> (使用各种插件).</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-typescript#docsNav\">babel-preset-typescript</a>: 支持 <code>parse</code> 来解析 <code>typescript</code> 类型文件的插件.</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-traverse#docsNav\">babel-traverse</a>: 遍历所有 <code>AST</code> 节点和更新节点.</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-generator#docsNav\">babel-generator</a>: 将 <code>AST</code> 转换为代码, <code>parse</code> 的逆向操作.</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-types#docsNav\">babel-types</a>: 手动构建 <code>AST</code> 和检查 <code>AST</code> 节点类型.</li>\n</ul>\n</li>\n<li>\n<p>其他工具</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/fast-glob\">fast-glob</a>: 根据指定的参数获取符合规则的所有文件名称, 用来排除无需执行自定义更新处理的文件(例如 <code>index.d.ts</code> 类型文件).</li>\n<li><a href=\"https://www.npmjs.com/package/prettier\">prettier</a>: 在写入文件前对字符串格式的代码进行格式化.</li>\n<li><a href=\"https://www.npmjs.com/package/chalk\">chalk</a>: 控制台输出文本高亮显示, 用来显示错误信息.</li>\n<li><a href=\"http://nodejs.cn/api/fs.html\">fs</a>: <code>node</code> 中操作文件的 <code>API</code>.</li>\n</ul>\n</li>\n</ol>\n<h2>实现</h2>\n<hr>\n<h3>1. 构建工厂函数</h3>\n<pre><code class=\"language-typescript\">export default function (userOptions: Options = {}): Plugin {\n  return {\n    name: 'vite-plugin-watch-i18',\n    async handleHotUpdate(ctx) {\n      //get options default value\n      const {\n        funName = 't',\n        splitCode = '#',\n        languageDir = ['locale/zh-CN', 'locale/en-US'],\n        include = ['src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts'],\n      } = userOptions;\n      //...\n    },\n  };\n}\n</code></pre>\n<h3>2. 排除无需处理文件</h3>\n<pre><code class=\"language-typescript\">import fg from 'fast-glob';\nconst filePath = ctx.file;\nconst allFile = await fg(include);\nif (!allFile.some((i) => path.resolve(i) === filePath)) {\n  return;\n}\n</code></pre>\n<h3>3. 处理源代码文件</h3>\n<ul>\n<li>\n<p>将代码解析为 <code>AST</code></p>\n<pre><code class=\"language-typescript\">const isTs = /^.+\\.(ts|tsx)$/.test(filePath);\nconst ast = isTs\n  ? parseSync(fileCode, {\n      presets: [require('@babel/preset-typescript').default],\n      filename: filePath,\n    })\n  : parseSync(fileCode, {});\n</code></pre>\n<p>通过文件后缀名判断是否为 <code>typescript</code> 类型文件, 然后使用 <code>babel-parse</code> 中的同步方法将其解析为 <code>AST</code>,</p>\n</li>\n<li>\n<p>遍历 <code>AST</code> 中的 <a href=\"https://babeljs.io/docs/en/babel-types#callexpression\">CallExpression</a> 类型节点, 找到所有函数名为 <code>funName</code>的节点, 拿到参数信息. 这里需要注意的是一般会有两种调用方式( <code>t('') || i18n.t('')</code> )</p>\n<pre><code class=\"language-typescript\">const localeInfo: string[] = [];\nconst localeFileNameArr: string[] = [];\nlet index = 0;\ntraverse(ast, {\n  CallExpression(_path) {\n    let isFun = false;\n    const { node } = _path;\n    if (node.callee.type === 'Identifier') {\n      isFun = node.callee.name === funName;\n    } else if (node.callee.type === 'MemberExpression') {\n      isFun = (node.callee.property as any).name === funName;\n    }\n    if (isFun) {\n      const arg = (node.arguments[0] as any).value;\n      if (\n        !arg.includes(splitCode) ||\n        arg.split(splitCode).length !== langLength + 1\n      ) {\n        return;\n      }\n      localeInfo.push(arg.split(splitCode));\n      localeFileNameArr.push(arg.split('.')[0]);\n      const replaceArgs = node.arguments.slice() as any;\n      replaceArgs[0].value = localeInfo[index][0];\n      _path.replaceWith(t.callExpression(node.callee, replaceArgs));\n      _path.skip();\n      index++;\n    }\n  },\n});\nconst code = !!ast\n  ? generator(ast, { jsescOption: { minimal: true } })?.code ?? ''\n  : '';\nconst formatCode = prettier.format(code, { parser: 'typescript' });\nconst formatOriginCode = prettier.format(fileCode, { parser: 'typescript' });\nformatCode !== formatOriginCode &#x26;&#x26; writeFile(filePath, code);\n</code></pre>\n<p>因为 <code>AST</code> 节点往往会是一个很复杂的对象, 所以在判断节点时一般是先拿到所有的节点信息, 然后反过来和代码进行比较, 以此来作为判断条件. 最后获取到参数信息, 收集参数信息, 并将参数中多余的部分移除, 最后将 <code>AST</code> 还原为字符串格式, 并写入文件.</p>\n<p>注意点:</p>\n<ol>\n<li>在写入源文件时需在写入语言包文件后, 不然会造成源文件修改而语言包未添加等异常.</li>\n<li>需要进行额外的校验, 只有当源文件发生改变后才重新写入, 因为 <code>vite HMR</code> 是在保存文件后立刻执行, 不会判断文件是否改变, 若直接重新写入会造成无限循环.</li>\n<li>需要判断通过 <code>splitCode</code> 分割后的数组长度是否与 <code>languageDir.length + 1</code> 相等.</li>\n</ol>\n<p>最后, 这一段代码拿到的信息为两个数组, 分别是 <code>funName</code> 函数中参数的第一段, 也就是要写入的文件名, 以及一个二维数组, 其中每项为 <code>funName</code> 函数参数通过 <code>splitCode</code> 分割后的数组.</p>\n<p>举个栗子:</p>\n<pre><code class=\"language-typescript\">t(\"Common.index.confirm#确认#confirm\");\nt(\"Common.index.cancel#取消#cancel\");\n\n/**\n * 获取到的信息:\n * localeInfo: [['Common.index.confirm', '确认', 'confirm'], ['Common.index.cancel', '取消', 'cancel']]\n * localeFileNameArr: ['Common', 'Common']\n * /\n</code></pre>\n</li>\n</ul>\n<h3>4 处理语言包文件</h3>\n<p>遍历参数 <code>languageDir</code>, 找到需要添加语言包的目录, 同时将源文件中获取的信息与对应的语言包路径传入处理函数中.(源文件中语言包数据顺序需与语言包路径顺序对应)</p>\n<pre><code class=\"language-typescript\">languageDir.forEach((v, index) => {\n  writeLocale({\n    localeDir: normalizePath(v),\n    localeFileNameArr,\n    isTs,\n    localeInfo: localeInfo.map((info) => ({\n      path: info[0].split('.'),\n      value: info[index + 1],\n    })),\n  });\n});\n</code></pre>\n<p><code>writeLocale</code> 函数作用为修改语言包文件, 在这步中对上步过程中获取的信息进行二次处理, 分别处理对应的语言包文件.</p>\n<p>先抛开 <code>AST</code> 部分将这其转换为算法:</p>\n<p><code>给定一个对象 obj、数组 path, 字符串 value, 其中数组类型为字符串数组, 按数组顺序将键值写入 obj, 值为 value. 例: obj: { a:1, b:{ c:2 } }, path: ['a', 'b', 'd'], value: 'add', 最后需要得到 obj: {a: 1, b: { c: 2, d: 'add' } }</code></p>\n<p>其中需要注意在 <code>path</code> 与 <code>obj</code> 同层有重复键值情况下:</p>\n<ul>\n<li>当重复键为 <code>path</code> 中最后一项时, 若 <code>obj</code> 中重复键值类型为基础类型时, 进行替换操作</li>\n<li>当重复键为 <code>path</code> 中最后一项时, 若 <code>obj</code> 中重复键值类型为对象时, 不进行替换操作</li>\n<li>当重复键值为 <code>path</code> 中不为最后一项时, 若 <code>obj</code> 中重复键值类型为对象时, 继续执行</li>\n<li>当重复键值为 <code>path</code> 中不为最后一项时, 若 <code>obj</code> 中重复键值类型为基础类型时时, 停止执行</li>\n</ul>\n<p>具体实现方式应该有多种, 这里放上递归版本(包含 <code>AST</code> 节点操作)</p>\n<pre><code class=\"language-typescript\">/**\n * origin: 原始 ast 节点\n * localeInfo: 数组结构, 插入多项数据\n **/\nconst assemblyLocaleObj = (\n  origin: any,\n  localeInfo: Array&#x3C;{ path: string[]; value: string }>\n) => {\n  const addProp = (objPath: string[], value: string, originAst = []) => {\n    // 当 path 最后一层时\n    if (objPath.length === 1) {\n      const existProp: any = originAst.find(\n        (o: any) => o.key.name === objPath[0]\n      );\n      //存在相同键, 且值类型为 string, 进行值的替换\n      if (existProp?.value?.type === 'StringLiteral') {\n        originAst.forEach((o: any) => {\n          if (o.key.name === objPath[0]) {\n            o.value.value = value;\n          }\n        });\n        return originAst;\n      }\n\n      //值不为 string, 抛出异常, 在外层函数中进行捕获\n      if (existProp?.value?.type === 'ObjectExpression') {\n        throw new Error(\n          'ERROR: There are duplicates in the locale, please check the data!'\n        );\n      }\n\n      //不存在相同键, 进行正常添加\n      const item = t.objectProperty(\n        t.identifier(objPath[0]),\n        t.stringLiteral(value)\n      );\n      return [...originAst, item];\n    }\n    // 存在相同键, 但不为 path 最后一层时\n    if (originAst.some((o: any) => o.key.name === objPath[0])) {\n      const existProp: any = originAst.find(\n        (o: any) => o.key.name === objPath[0]\n      );\n      //判断存在键的值的类型是否为object\n      if (existProp?.value?.type !== 'ObjectExpression') {\n        throw new Error(\n          'ERROR: There are duplicates in the locale, please check the data!'\n        );\n      }\n      //继续往下层查找, 拿到 path 最后一层时的返回值\n      const item = addProp(objPath.slice(1), value, existProp.value.properties);\n      const tmp = originAst.slice();\n      //进行替换操作\n      tmp.forEach((o: any) => {\n        if (o.key.name === objPath[0]) {\n          o.value.properties = item;\n        }\n      });\n      return tmp;\n    }\n    //不存在相同键时\n    const ast = t.objectProperty(\n      t.identifier(objPath[0]),\n      t.objectExpression(addProp(objPath.slice(1), value))\n    );\n    return [...originAst, ast];\n  };\n  let properties = Array.isArray(origin) ? origin.slice() : origin;\n  localeInfo.forEach((info: any) => {\n    //递归入口\n    properties = addProp(info.path, info.value, properties);\n  });\n  return properties;\n};\n</code></pre>\n<p>最后拿到新的 <code>AST</code> 后进行替换然后转换为字符串格式并写入文件即可.</p>\n<h3>5. 新增语言包</h3>\n<p>对要写入的语言包文件进行是否存在判断, 若不存在, 则创建新文件, 并将其导入添加至当前目录下的 <code>index.ts 或 index.js</code> 文件中.</p>\n<p>举个栗子:</p>\n<p><img src=\"https://raw.githubusercontent.com/LZS911/LZS911.github.io/backend-main/assets/images/vite-plugin/watch-i18/example/new.gif\" alt=\"example\"></p>\n<p>具体实现也是通过对 <code>AST</code> 节点的操作, 直接放代码.</p>\n<pre><code class=\"language-typescript\">const addLocaleImport = ({ localeDir, fileName, isTs }: any) => {\n  try {\n    const root = isTs\n      ? path.resolve(path.join('src', localeDir), 'index.ts')\n      : path.resolve(path.join('src', localeDir), 'index.js');\n\n    if (!existsSync(root)) {\n      throw new Error('The default export language pack file was not found!');\n    }\n\n    const code =\n      readFileSync(root, 'utf-8') || `export default {translation:{}}`;\n    const ast = isTs\n      ? parseSync(code, {\n          presets: [require('@babel/preset-typescript').default],\n          filename: root,\n        })\n      : parseSync(code, {});\n    traverse(ast, {\n      //添加import语句\n      Program(_path) {\n        _path.unshiftContainer(\n          'body',\n          t.importDeclaration(\n            [t.importDefaultSpecifier(t.identifier(fileName))],\n            t.stringLiteral(`./${fileName}`)\n          )\n        );\n      },\n      //添加导出对象\n      ExportDefaultDeclaration(_path) {\n        const properties = (_path.node.declaration as any).properties.slice();\n        properties[0].value.properties.push(\n          t.objectProperty(t.identifier(fileName), t.identifier(fileName))\n        );\n        _path.replaceWith(\n          t.exportDefaultDeclaration(t.objectExpression(properties))\n        );\n        _path.skip();\n      },\n    });\n    //写入文件\n    writeFile(\n      root,\n      !!ast\n        ? generator(ast, { jsescOption: { minimal: true } })?.code ?? ''\n        : ''\n    );\n  } catch (error) {\n    console.trace(red(error));\n  }\n};\n</code></pre>\n<h2>总结</h2>\n<hr>\n<p>以上代码便使用 <code>babel</code> 实现了一个简单的 <code>vite</code> 插件, 它可以在工作中或者在平时编码中自动添加语言包, 提高编码效率.</p>\n<p>之前有看到尤雨溪的一篇<a href=\"https://mp.weixin.qq.com/s?src=11&#x26;timestamp=1637831843&#x26;ver=3458&#x26;signature=0YFjtA3N5CYF9IPtO30ywCaa4ti5J*zPSuiUyckkYr9gEFbFgEmqFrYZpAm*FgxTlIqPoUWTLxzGd6xikJ0JHjNtaA0511q5C7k3S7NXC*vpMvVIW2QeKbK-p2gCGBmr&#x26;new=1\">采访</a>, 里面一段内容使我感触很深, 也是这个插件诞生的初衷. 希望以后能以此为初心, 一直坚持下去 ✊.</p>\n<blockquote>\n<p>如果想要跳出这种单纯做业务的状态，就得去寻找在当前的业务场景下，是否有更有意义、更有价值的这些问题去解决，或者说有没有什么机会可以让团队的效率更高，或者说业务上有什么痛点可以用我的技术去解决。前端在整个产品里面扮演着一个怎样的角色，有没有什么机会在前端这个环节给整个链路去创造一些价值。</p>\n<p>如果能找到这样的东西，如何跟我擅长的技术去结合起来，或者说我觉得这个东西很值得解决，我通过怎样的学习可以让自己能够去解决这个问题。找到更高、更明确的目标，这样在学习的时候会更有指向性。还有另一种选择，如果你发现你所在的岗位完全没有任何可以用前端去创造改变的可能性，那么可以跳个槽，提升一下技术能力，进大厂找找机会。</p>\n</blockquote>\n<p>最后附上项目地址: <a href=\"https://github.com/LZS911/vite-plugin-watch-i18\">https://github.com/LZS911/vite-plugin-watch-i18</a></p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"nico","tag":["vite plugin","react","i18n"]}},"__N_SSG":true}