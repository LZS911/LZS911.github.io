{"pageProps":{"post":{"title":"TypeScript中的 infer 与 TemplateLiteral","date":"2022-11-21","slug":"TypeScript中的Infer与TemplateLiteral","author":"LZS_911","content":"<h2 id=\"infer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#infer\"><span class=\"icon icon-link\"></span></a>infer</h2>\n<p>在介绍 infer 之前, 我们需要先了解一个前置知识点: extends, 也就是条件类型.</p>\n<p>来自 Typescript 官网的介绍:</p>\n<blockquote>\n<p>大多数有效程序的核心是，我们必须依据输入做出一些决定。 JavaScript 程序也是如此，但是由于值可以很容易地被内省，这些决定也是基于输入的类型。 条件类型 有助于描述输入和输出类型之间的关系。</p>\n</blockquote>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Animal</span> {\n  <span class=\"hljs-title function_\">live</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span> {\n  <span class=\"hljs-title function_\">woof</span>(): <span class=\"hljs-built_in\">void</span>;\n}\n \n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Example1</span> = <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span> ? <span class=\"hljs-built_in\">number</span> : <span class=\"hljs-built_in\">string</span>;\n        \n<span class=\"hljs-comment\">// type Example1 = number</span>\n \n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Example2</span> = <span class=\"hljs-title class_\">RegExp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span> ? <span class=\"hljs-built_in\">number</span> : <span class=\"hljs-built_in\">string</span>;\n        \n<span class=\"hljs-comment\">// type Example2 = string</span>\n</code></pre>\n<p>可以看到 extends 的用法与 javascript 中的三元表达式没有太多的区别. 接下来, 回到文章的主题 --- infer 关键字.</p>\n<p>首先, 我们先来实现一个工具类型: <em>判断接受的泛型是否为一个函数, 如果是, 则返回函数的返回值类型, 否则返回它自己</em></p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> f1 = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">void</span>;\n<span class=\"hljs-keyword\">type</span> f2 = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">arg</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">arg2</span>: <span class=\"hljs-built_in\">number</span></span>) =></span> <span class=\"hljs-built_in\">number</span>;\n<span class=\"hljs-keyword\">type</span> f3 = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">arg</span>: <span class=\"hljs-built_in\">number</span></span>) =></span> <span class=\"hljs-built_in\">string</span>;\n<span class=\"hljs-keyword\">type</span> t4 = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span> };\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Example1</span>&#x3C;T> = T <span class=\"hljs-title function_\">extends</span> (<span class=\"hljs-function\">(<span class=\"hljs-params\">...<span class=\"hljs-attr\">arg</span>: infer params</span>) =></span> infer <span class=\"hljs-title class_\">ResultType</span>) ? <span class=\"hljs-title class_\">ResultType</span> : T;\n</code></pre>\n<p><img src=\"/assets/infer_templateLiteral/example-1.png\" alt=\"alt\">\n<img src=\"/assets/infer_templateLiteral/example-2.png\" alt=\"alt\">\n<img src=\"/assets/infer_templateLiteral/example-3.png\" alt=\"alt\">\n<img src=\"/assets/infer_templateLiteral/example-4.png\" alt=\"alt\"></p>\n<p>在这里, 我们通过 infer 关键字引入了类型一个名为 ResultType 的新泛型类型变量, 或者可以理解为一个占位符, 当条件类型成立时, ResultType 会替换为满足条件类型时所需的类型, 在这个栗子中 ResultType 代表的是函数的返回类型, 也就完成了我们需要的工具类型.</p>\n<p>同样, 我们也可以实现一个 <em>提取元组类型中最后一个元素的类型</em></p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> lastArrType&#x3C;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">unknown</span>[]> = T <span class=\"hljs-keyword\">extends</span> [\n  ...infer rest,\n  infer <span class=\"hljs-title class_\">ResultType</span>\n]\n  ? <span class=\"hljs-title class_\">ResultType</span>\n  : <span class=\"hljs-built_in\">never</span>;\n</code></pre>\n<p><img src=\"/assets/infer_templateLiteral/example-5.png\" alt=\"alt\"></p>\n<h2 id=\"template-literal\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#template-literal\"><span class=\"icon icon-link\"></span></a>Template Literal</h2>\n<p>我们先看下基础的字符串文字类型:</p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Demo</span> = <span class=\"hljs-string\">'demo'</span>;\n</code></pre>\n<p>模版文字类型是建立在字符串文字类型上的, 举个栗子</p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Hello</span> = <span class=\"hljs-string\">'hello'</span>;\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">HelloWorld</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${Hello}</span> world`</span>; <span class=\"hljs-comment\">//type HelloWorld = \"hello world\"</span>\n</code></pre>\n<p>单从语法上来说, 也是和 javascript 中的模版字符串大同小异.</p>\n<p>配合联合类型时, 会生成出每个联合成员可以表示的每个可能的字符串文字的集合.</p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">EmailLocaleIDs</span> = <span class=\"hljs-string\">\"welcome_email\"</span> | <span class=\"hljs-string\">\"email_heading\"</span>;\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">FooterLocaleIDs</span> = <span class=\"hljs-string\">\"footer_title\"</span> | <span class=\"hljs-string\">\"footer_sendoff\"</span>;\n</code></pre>\n<p><img src=\"/assets/infer_templateLiteral/example-6.png\" alt=\"alt\"></p>\n<h2 id=\"实践\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#实践\"><span class=\"icon icon-link\"></span></a>实践</h2>\n<p>结合 infer 以及 Template Literal 实现一个类似 <code>String.replace</code> 的工具类型</p>\n<pre><code class=\"hljs language-Typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ReplaceStr</span>&#x3C;\n  <span class=\"hljs-title class_\">Str</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-title class_\">From</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-title class_\">To</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span>\n> = <span class=\"hljs-title class_\">Str</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${infer Prefix}</span><span class=\"hljs-subst\">${From}</span><span class=\"hljs-subst\">${infer Suffix}</span>`</span>\n  ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${Prefix}</span><span class=\"hljs-subst\">${To}</span><span class=\"hljs-subst\">${Suffix}</span>`</span>\n  : <span class=\"hljs-title class_\">Str</span>;\n</code></pre>\n<p><img src=\"/assets/infer_templateLiteral/example-7.png\" alt=\"alt\"></p>\n<p>对更多实践感兴趣的可以转到: <a href=\"https://lzs911.github.io/posts/Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0\">https://lzs911.github.io/posts/Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0</a></p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"fancy","tag":[null]}},"__N_SSG":true}