{"pageProps":{"post":{"title":"vite-plugin-conditional-compile","date":"2022-12-01","slug":"vite-plugin-conditional-compile","author":"Ai.Haibara","content":"<p>参考至:  <a href=\"https://github.com/hzsrc/js-conditional-compile-loader\">https://github.com/hzsrc/js-conditional-compile-loader</a></p>\n<p><strong>该插件加载顺序应在最前位, 防止 jsx 之类的代码被其他插件编译, 导致本插件无法解析</strong></p>\n<p>一个条件编译的 <code>vite</code> 插件, 根据不同的项目环境定制不同版本的代码</p>\n<p>使用方式: 通过一段注释包裹代码, 通过配置来控制是否编译该段代码, 详细见下面示例.</p>\n<h2 id=\"options\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#options\"><span class=\"icon icon-link\"></span></a>Options</h2>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>default</th>\n<th>type</th>\n<th>require</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>isDebug</td>\n<td>config.command === 'server'</td>\n<td>boolean</td>\n<td>否</td>\n<td>是否为开发环境</td>\n</tr>\n<tr>\n<td>changeSource</td>\n<td>-</td>\n<td>(str:string) => string</td>\n<td>否</td>\n<td>对原代码进行处理的函数</td>\n</tr>\n<tr>\n<td>expand</td>\n<td>-</td>\n<td>{[key:string]:boolean}</td>\n<td>否</td>\n<td>键为自定义字符, 用来确定包裹代码的注释(确定方式见示例), 值为bool类型, 当为true时才会编译注释包裹的源代码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"example\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example\"><span class=\"icon icon-link\"></span></a>example</h2>\n<p><code>vite.config</code></p>\n<pre><code class=\"language-typescript\">import vitePluginConditionalCompile from 'vite-plugin-conditional-compile';\n\nexport default defineConfig((config) => {\n  //...\n plugins: [vitePluginConditionalCompile({})]\n  //...\n}\n\n</code></pre>\n<p><code>package.json</code></p>\n<pre><code class=\"language-json\">  {\n    \"scripts\":{\n      \"start\": \"vite\",\n      \"build\": \"vite build\"\n    }\n  }\n</code></pre>\n<p><code>index.tsx</code></p>\n<pre><code class=\"language-typescript\">\n/* IFTRUE_isDebug */\nimport from 'doSomething.js'\n/* FITRUE_isDebug */\n\n</code></pre>\n<p><code>index.tsx</code> 中的这段 <code>import</code> 语句只会在开发环境中存在, 不会被打包进生产环境中.</p>\n<h2 id=\"拓展项\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#拓展项\"><span class=\"icon icon-link\"></span></a>拓展项</h2>\n<p><code>vite.config</code></p>\n<pre><code class=\"language-typescript\">import vitePluginConditionalCompile from 'vite-plugin-conditional-compile';\n\nexport default defineConfig((config) => {\n  //...\nconst isCoverage = config.mode === 'coverage';\n plugins: [vitePluginConditionalCompile({\n   expand:{\n     isCoverage\n   }\n })]\n  //...\n}\n\n</code></pre>\n<p><code>package.json</code></p>\n<pre><code class=\"language-json\">  {\n    \"scripts\":{\n      \"start\": \"vite\",\n      \"build\": \"vite build\",\n      \"coverage-build\": \"npm run build --mode coverage\",\n    }\n  }\n</code></pre>\n<p><code>index.tsx</code></p>\n<pre><code class=\"language-typescript\">\n/* IFTRUE_isCoverage */\nimport from 'doSomething.js'\n/* FITRUE_isCoverage */\n\n</code></pre>\n<p><code>index.tsx</code> 中的这段 <code>import</code> 语句将只会在 <code>mode</code> 为 <code>coverage</code> 的时候存在环境中, 也就是执行 <code>npm run coverage-build</code>, 需要保证的是注释中的后半部分内容与 <code>expand</code> 中的 <code>key</code> 值相对应.</p>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","tag":[null]}},"__N_SSG":true}