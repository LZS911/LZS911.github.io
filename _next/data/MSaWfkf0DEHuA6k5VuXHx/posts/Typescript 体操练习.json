{"pageProps":{"post":{"title":"Typescript 体操练习","date":"2022-09-26","slug":"Typescript 体操练习","author":"LZS_911","content":"<h2 id=\"1-将下划线模式的-string-类型转化成驼峰类型\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-将下划线模式的-string-类型转化成驼峰类型\"><span class=\"icon icon-link\"></span></a>1. 将下划线模式的 string 类型转化成驼峰类型</h2>\n<pre><code class=\"language-Typescript\">type TransformToCamelCase&#x3C;T extends string> =\n  T extends `${infer Left}_${infer Rest}`\n    ? `${Left}${TransformToCamelCase&#x3C;Capitalize&#x3C;Rest>>}`\n    : T;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-1.png\" alt=\"alt\"></p>\n<p>注意点:</p>\n<p>需要递归继续处理剩余的部分.</p>\n<h3 id=\"应用-当服务端定义的实体中的-key-的模式为下环线-但前端代码中需要使用驼峰模式时\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#应用-当服务端定义的实体中的-key-的模式为下环线-但前端代码中需要使用驼峰模式时\"><span class=\"icon icon-link\"></span></a>应用: 当服务端定义的实体中的 <code>key</code> 的模式为下环线, 但前端代码中需要使用驼峰模式时</h3>\n<p>实现:</p>\n<pre><code class=\"language-Typescript\">type CamelCase&#x3C;T extends Record&#x3C;string, any>> = T extends any\n  ? {\n      [key in keyof T as TransformToCamelCase&#x3C;\n        key &#x26; string\n      >]: T[key] extends Array&#x3C;infer Element>\n        ? Array&#x3C;\n            Element extends string\n              ? TransformToCamelCase&#x3C;Element>\n              : CamelCase&#x3C;Element>\n          >\n        : T[key] extends Record&#x3C;string, any>\n        ? CamelCase&#x3C;T[key]>\n        : T[key];\n    }\n  : never;\n</code></pre>\n<p><img src=\"/assets/typescript/example-2.png\" alt=\"alt\"></p>\n<p>注意点:</p>\n<ol>\n<li>当某项 <code>key</code> 的类型仍然满足 <code>Record&#x3C;string, any></code> 时, 需要递归继续.</li>\n<li>因为 <code>Typescript</code> 不会去计算递归中的表达式, 所以需要加上一个一定为 <code>true</code> 的判断, 让他去执行, 也就是 <code>T extends any</code>.</li>\n<li>需要注意 <code>Array</code> 的情况.</li>\n</ol>\n<h2 id=\"2-将索引类型转化为联合类型\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-将索引类型转化为联合类型\"><span class=\"icon icon-link\"></span></a>2. 将索引类型转化为联合类型</h2>\n<ul>\n<li>索引类型是一个聚合了多个元素的类型，对象、类、元组等都是索引类型, 举个栗子:</li>\n</ul>\n<pre><code class=\"language-Typescript\">type ExampleType = {\n  name: string;\n  sex: boolean;\n  age: number;\n  hobbies: string[];\n}\n</code></pre>\n<ul>\n<li>联合类型. 顾名思义, 它是一个联合了多种类型的集合, 取值可以取其中任意一种类型.</li>\n</ul>\n<pre><code class=\"language-Typescript\">type UnionTypes = { name: string } | { sex: boolean } | { age: number} | { hobbies: string[] };\n</code></pre>\n<ul>\n<li>\n<p>需求: 实现一个工具类, 将 <code>ExampleType</code> 转化为 <code>UnionTypes</code></p>\n</li>\n<li>\n<p>实现:</p>\n<pre><code class=\"language-Typescript\">type SpiltObj&#x3C;T> = {\n  [key in keyof T]: {\n    [key2 in key]:T[key2]\n  }\n}[keyof T]\n</code></pre>\n</li>\n<li>\n<p>拆分, 先看第一部分</p>\n<pre><code class=\"language-Typescript\">type SpiltObj&#x3C;T> = {\n  [key in keyof T]: {\n    [key2 in key]:T[key2]\n  }\n}\n</code></pre>\n<pre><code class=\"language-Typescript\">  type Res1 = SpiltObj&#x3C;ExampleType>\n</code></pre>\n<p><img src=\"/assets/typescript/example-3.png\" alt=\"alt\"></p>\n<p>第二部分</p>\n<pre><code class=\"language-Typescript\">  type ExampleType = {\n    name: string;\n    sex: boolean;\n    age: number;\n    hobbies: string[];\n  }\n\n  type Res2 = ExampleType[keyof ExampleType]\n</code></pre>\n<p><img src=\"/assets/typescript/example-4.png\" alt=\"alt\"></p>\n</li>\n<li>\n<p>拓展, 实现一个工具类, 拿到索性类型键值路径的联合类型</p>\n<pre><code class=\"language-Typescript\">type Template = {\n  aa: {\n    bb: string;\n  };\n  cc: number;\n  dd: {\n    ee: {\n      ff: string;\n    }\n  };\n  gg: {\n    hh: number\n  };\n}\n\ntype TemplateKeyPath&#x3C;T> ={\n   [key in keyof T]: key extends string ? T[key] extends Record&#x3C;string, any> ? key | `${key}.${TemplateKeyPath&#x3C;T[key]>}` : key : never;\n}[keyof T]\n\ntype Res3 = TemplateKeyPath&#x3C;Template>\n</code></pre>\n<p><img src=\"/assets/typescript/example-5.png\" alt=\"alt\"></p>\n</li>\n</ul>\n<h2 id=\"3-使用数组长度进行数值计算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-使用数组长度进行数值计算\"><span class=\"icon icon-link\"></span></a>3. 使用数组长度进行数值计算</h2>\n<p>Typescript 本身是没有加减乘除运算符的, 所以需要取巧来处理数值的计算.</p>\n<p>利用构造数组, 然后获取它的 <code>length</code>.</p>\n<p><strong>注: 因为数组长度不会为负数, 所以这里做的数值计算只包含正整数</strong></p>\n<p><img src=\"/assets/typescript/example-6.png\" alt=\"alt\"></p>\n<p>实现运算方法之前, 先实现一个构造数组的工具类</p>\n<pre><code class=\"language-Typescript\">type BuildArray&#x3C;\n  Length extends number,\n  Element = unknown,\n  Array extends unknown[] = []\n> = Array['length'] extends Length\n  ? Array\n  : BuildArray&#x3C;Length, Element, [Element, ...Array]>;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-7.png\" alt=\"alt\"></p>\n<p><code>BuildArray</code> 接收三个泛形, 其中第一个参数 <code>Length</code> 为需要构造出来的数组长度, <code>Element</code> 为数组类的元素类型, 默认值为 <code>unknown</code>, <code>Array</code> 为返回结果, 用来递归处理. 如果将其转化为 <code>javascript</code> 代码, 大致如下:</p>\n<pre><code class=\"language-javascript\">const buildArray = (length, element, arr = []) => {\n  if (length === arr.length) {\n    return arr;\n  }\n\n  return buildArray(length, element, [element, ...arr]);\n};\n</code></pre>\n<h3 id=\"加法运算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#加法运算\"><span class=\"icon icon-link\"></span></a>加法运算</h3>\n<pre><code class=\"language-typescript\">type Add&#x3C;Num1 extends number, Num2 extends number> = [...BuildArray&#x3C;Num1>, ...BuildArray&#x3C;Num2>]['length']\n</code></pre>\n<p><img src=\"/assets/typescript/example-8.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-9.png\" alt=\"alt\"></p>\n<h3 id=\"减法运算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#减法运算\"><span class=\"icon icon-link\"></span></a>减法运算</h3>\n<pre><code class=\"language-typescript\">type Subtract&#x3C;\n  Num1 extends number,\n  Num2 extends number\n> = BuildArray&#x3C;Num1> extends [...arr1: BuildArray&#x3C;Num2>, ...arr2: infer Rest]\n  ? Rest['length']\n  : never;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-10.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-11.png\" alt=\"alt\"></p>\n<h3 id=\"乘法运算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#乘法运算\"><span class=\"icon icon-link\"></span></a>乘法运算</h3>\n<pre><code class=\"language-typescript\">type Multiply&#x3C;\n  Num1 extends number,\n  Num2 extends number,\n  ResultArray extends unknown[] = []\n> = Num2 extends 0\n  ? ResultArray['length']\n  : Multiply&#x3C;Num1, Subtract&#x3C;Num2, 1>, [...BuildArray&#x3C;Num1>, ...ResultArray]>;\n</code></pre>\n<p><img src=\"/assets/typescript/example-12.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-13.png\" alt=\"alt\"></p>\n<h3 id=\"除法运算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#除法运算\"><span class=\"icon icon-link\"></span></a>除法运算</h3>\n<pre><code class=\"language-typescript\">type Divide&#x3C;\n  Num1 extends number,\n  Num2 extends number,\n  ResultArray extends unknown[] = []\n> = Num1 extends 0\n  ? ResultArray['length']\n  : Divide&#x3C;Subtract&#x3C;Num1, Num2>, Num2, [unknown, ...ResultArray]>; \n  // [unknown, ...ResultArray] => [...BuildArray&#x3C;Add&#x3C;ResultArray['length'], 1> &#x26; number>]\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-14.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-15.png\" alt=\"alt\"></p>\n<h2 id=\"4-判断两个正整数的大小\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-判断两个正整数的大小\"><span class=\"icon icon-link\"></span></a>4. 判断两个正整数的大小</h2>\n<h3 id=\"比较是否相等\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#比较是否相等\"><span class=\"icon icon-link\"></span></a>比较是否相等</h3>\n<pre><code class=\"language-typescript\">type NumberIsEqual&#x3C;Num1 extends number, Num2 extends number> = Num1 extends Num2 ? true : false;\n</code></pre>\n<p><img src=\"/assets/typescript/example-16.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-17.png\" alt=\"alt\"></p>\n<h3 id=\"判断是否大于\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#判断是否大于\"><span class=\"icon icon-link\"></span></a>判断是否大于</h3>\n<p>大致思路: 利用构造数组, 递归对构造出来的数组进行 Pop 操作, 通过判断数组的长度是否为 0 来确定大小.</p>\n<p>在开始实现钱先实现几个工具类, 减少重复代码和提高可读性.</p>\n<p><strong>注: 后续使用到同名工具类时默认为这几个类型</strong></p>\n<pre><code class=\"language-typescript\">type Or&#x3C;Case1 extends boolean, Case2 extends boolean> = Case1 extends true\n  ? true\n  : Case2 extends true\n  ? true\n  : false;\n\ntype ArrayPop&#x3C;Arr extends unknown[]> = Arr extends [...infer Left, infer Last]\n  ? Left\n  : never;\n\ntype NumberIsZero&#x3C;Num extends number> = Num extends 0 ? true : false;\n</code></pre>\n<p>最终代码</p>\n<pre><code class=\"language-typescript\">type NumberIsCompare&#x3C;\n  Num1 extends number,\n  Num2 extends number,\n  Arr1 extends unknown[] = BuildArray&#x3C;Num1>,\n  Arr2 extends unknown[] = BuildArray&#x3C;Num2>\n> = NumberIsEqual&#x3C;Num1, Num2> extends false\n  ? Or&#x3C;NumberIsZero&#x3C;Arr1['length']>, NumberIsZero&#x3C;Arr2['length']>> extends true\n    ? NumberIsZero&#x3C;Arr1['length']> extends true\n      ? false\n      : true\n    : NumberIsCompare&#x3C;ArrayPop&#x3C;Arr1>['length'], ArrayPop&#x3C;Arr2>['length']>\n  : false;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-18.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-19.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-20.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-21.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-22.png\" alt=\"alt\"></p>\n<h3 id=\"判断是否小与\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#判断是否小与\"><span class=\"icon icon-link\"></span></a>判断是否小与</h3>\n<p>过滤掉相等情况后对大于取反就好了.</p>\n<pre><code class=\"language-typescript\">type NumberIsLess&#x3C;Num1 extends number, Num2 extends number> = NumberIsEqual&#x3C;\n  Num1,\n  Num2\n> extends false\n  ? NumberIsCompare&#x3C;Num1, Num2> extends true\n    ? false\n    : true\n  : false;\n</code></pre>\n<h2 id=\"5-实现-indexof---从左往右查找子串的位置\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#5-实现-indexof---从左往右查找子串的位置\"><span class=\"icon icon-link\"></span></a>5. 实现 IndexOf - 从左往右查找子串的位置</h2>\n<p>核心原理</p>\n<p><img src=\"/assets/typescript/example-23.png\" alt=\"alt\"></p>\n<p>最后实现一个获取字符串长度的工具类型即可获得最终结果</p>\n<p><strong>注意: <code>['a']['length']的值为数组长度, 而 'aa'['length']</code> 的值为 number</strong></p>\n<p>所以我们可以将字符串切割为数组, 然后来获取长度.</p>\n<pre><code class=\"language-typescript\">type Split&#x3C;\n  S extends string,\n  Element extends string = '',\n  ResultArray extends string[] = []\n> = S extends ''\n  ? [...ResultArray, S]\n  : S extends `${infer Left}${Element}${infer Rest}`\n    ? Split&#x3C;Rest, Element, [...ResultArray, Left]>\n    : [...ResultArray, S];\n</code></pre>\n<p><img src=\"/assets/typescript/example-24.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-25.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-26.png\" alt=\"alt\"></p>\n<pre><code class=\"language-typescript\">type GetStringLength&#x3C;S extends string> =  Split&#x3C;S> extends never ? never : Split&#x3C;S>['length']\n</code></pre>\n<p>最后结果</p>\n<pre><code class=\"language-typescript\">type IndexOf&#x3C;\n  S1 extends string,\n  S2 extends string,\n  Len1 extends number = GetStringLength&#x3C;S1>,\n  Len2 extends number = GetStringLength&#x3C;S2>\n> = Or&#x3C;NumberIsCompare&#x3C;Len1, Len2>, NumberIsEqual&#x3C;Len1, Len2>> extends false\n  ? -1\n  : S1 extends `${infer Left}${S2}${infer Rest}`\n  ? GetStringLength&#x3C;Left>\n  : -1;\n</code></pre>\n<p><img src=\"/assets/typescript/example-27.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-28.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-29.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-30.png\" alt=\"alt\"></p>\n<h2 id=\"6-实现字符串的-replace-与-replaceall\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#6-实现字符串的-replace-与-replaceall\"><span class=\"icon icon-link\"></span></a>6. 实现字符串的 Replace 与 ReplaceAll</h2>\n<ol>\n<li>\n<p><code>Replace</code></p>\n<pre><code class=\"language-typescript\">type Replace&#x3C;\n  Str extends string,\n  MatchStr extends string,\n  ReplaceStr extends string\n> = Str extends `${infer Left}${MatchStr}${infer Rest}`\n  ? `${Left}${ReplaceStr}${Rest}`\n  : Str;\n</code></pre>\n<p><img src=\"/assets/typescript/example-31.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-32.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-33.png\" alt=\"alt\"></p>\n</li>\n<li>\n<p><code>ReplaceAll</code></p>\n<pre><code class=\"language-typescript\">type ReplaceAll&#x3C;\n  Str extends string,\n  MatchStr extends string,\n  ReplaceStr extends string\n> = Str extends `${infer Left}${MatchStr}${infer Rest}`\n  ? Rest extends `${infer Left2}${MatchStr}${infer Rest2}`\n    ? ReplaceAll&#x3C;`${Left}${ReplaceStr}${Rest}`, MatchStr, ReplaceStr>\n    : `${Left}${ReplaceStr}${Rest}`\n  : Str;\n</code></pre>\n<p><img src=\"/assets/typescript/example-34.png\" alt=\"alt\">\n<img src=\"/assets/typescript/example-35.png\" alt=\"alt\"></p>\n</li>\n</ol>\n<h2 id=\"7-实现类似-vue-的类型支持的简化版本\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#7-实现类似-vue-的类型支持的简化版本\"><span class=\"icon icon-link\"></span></a>7. 实现类似 Vue 的类型支持的简化版本</h2>\n<p>通过提供一个函数SimpleVue（类似于Vue.extend或defineComponent），它应该正确地推断出 computed 和 methods 内部的this类型。</p>\n<p>在此挑战中，我们假设SimpleVue接受只带有data，computed和methods字段的Object作为其唯一的参数，</p>\n<p>data是一个简单的函数，它返回一个提供上下文this的对象，但是你无法在data中获取其他的计算属性或方法。</p>\n<p>computed是将this作为上下文的函数的对象，进行一些计算并返回结果。在上下文中应暴露计算出的值而不是函数。</p>\n<p>methods是函数的对象，其上下文也为this。函数中可以访问data，computed以及其他methods中的暴露的字段。 computed与methods的不同之处在于methods在上下文中按原样暴露为函数。</p>\n<p>SimpleVue的返回值类型可以是任意的。</p>\n<pre><code class=\"language-JavaScript\">const instance = SimpleVue({\n  data() {\n    return {\n      firstname: 'Type',\n      lastname: 'Challenges',\n      amount: 10,\n    }\n  },\n  computed: {\n    fullname() {\n      return this.firstname + ' ' + this.lastname\n    }\n  },\n  methods: {\n    hi() {\n      alert(this.fullname.toLowerCase())\n    }\n  }\n})\n\n</code></pre>\n<p>实现:</p>\n<pre><code class=\"language-TypeScript\">type Computed&#x3C;C extends Record&#x3C;PropertyKey, () => any>> = {\n  [CK in keyof C]: ReturnType&#x3C;C[CK]>;\n};\n\ntype SimpleVueType&#x3C;D extends Record&#x3C;PropertyKey, any>, C extends Record&#x3C;PropertyKey, any>, M extends Record&#x3C;PropertyKey, any>> = (arg: {\n  data:() => D;\n  computed:C &#x26; ThisType&#x3C;D>;\n  methods: M &#x26; ThisType&#x3C;D &#x26; M &#x26; Computed&#x3C;C>>;\n}) => any\n</code></pre>\n<h2 id=\"8-函数柯里化\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#8-函数柯里化\"><span class=\"icon icon-link\"></span></a>8. 函数柯里化</h2>\n<p>Currying 是一种将带有多个参数的函数转换为每个带有一个参数的函数序列的技术。</p>\n<p>例如：</p>\n<pre><code class=\"language-TypeScript\">const add = (a: number, b: number) => a + b\nconst three = add(1, 2)\n\nconst curriedAdd = Currying(add)\nconst five = curriedAdd(2)(3)\n</code></pre>\n<p>传递给 Currying 的函数可能有多个参数，您需要正确键入它。\n在此挑战中，curried 函数一次仅接受一个参数。分配完所有参数后，它应返回其结果。</p>\n<p>实现:</p>\n<pre><code class=\"language-TypeScript\">type CurryingType&#x3C;T> = T extends (...args: [infer Left, ...infer Rest]) => infer R\n    ? Rest['length'] extends 0\n        ? T\n        : (arg: Left) => CurryingType&#x3C;(...args: Rest) => R>\n    : never\n</code></pre>\n<h2 id=\"9-uniontointersection\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#9-uniontointersection\"><span class=\"icon icon-link\"></span></a>9. UnionToIntersection</h2>\n<p><code>type I = Union2Intersection&#x3C;'foo' | 42 | true> // expected to be 'foo' &#x26; 42 &#x26; true</code></p>\n<pre><code class=\"language-typescript\">type UnionToFunction&#x3C;T> = T extends any ? (arg:T) => void : never;\n\ntype test1 = UnionToFunction&#x3C;\"foo\" | 42 | true>;// (arg: \"foo\") => void | (arg: 42) => void | (arg: true) => void;\n\ntype UnionToIntersection&#x3C;U> = UnionToFunction&#x3C;U> extends (arg:infer T) => void ? T:never;\n\ntype test2 = UnionToIntersection&#x3C;{a:string} | {b:number} | {c:boolean}>;// {a: string} &#x26; {b: number} &#x26; {c: boolean}\n\n</code></pre>\n<p>解题思路: <a href=\"https://github.com/type-challenges/type-challenges/issues?q=label%3A55+label%3Aanswer+sort%3Areactions-%2B1-desc\">https://github.com/type-challenges/type-challenges/issues?q=label%3A55+label%3Aanswer+sort%3Areactions-%2B1-desc</a></p>\n<h2 id=\"10-getrequired-and-getoptional\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#10-getrequired-and-getoptional\"><span class=\"icon icon-link\"></span></a>10. GetRequired and GetOptional</h2>\n<pre><code class=\"language-typescript\">type GetRequired&#x3C;T> = {[P in keyof T as T[P] extends Required&#x3C;T>[P] ? P : never]:T[P]}\n</code></pre>\n<pre><code class=\"language-typescript\">type GetOptional&#x3C;T> = {[P in keyof T as T[P] extends Required&#x3C;T>[P] ? never : P]:T[P]}\n</code></pre>\n<h2 id=\"11-capitalize-words\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#11-capitalize-words\"><span class=\"icon icon-link\"></span></a>11. Capitalize Words</h2>\n<p>Implement CapitalizeWords which converts the first letter of each word of a string to uppercase and leaves the rest as-is.</p>\n<p>For example</p>\n<pre><code class=\"language-typescript\">type capitalized = CapitalizeWords&#x3C;'hello world, my friends'> // expected to be 'Hello World, My Friends'\n</code></pre>\n<pre><code class=\"language-typescript\">type CapitalizeRest&#x3C;T> = T extends `${infer Left}${infer Rest}` ? `${Left}${CapitalizeRest&#x3C;Capitalize&#x3C;Left> extends Lowercase&#x3C;Left> ? Capitalize&#x3C;Rest> : Rest>}`\n\n : T;\n\ntype CapitalizeWords&#x3C;S extends string> = Capitalize&#x3C;CapitalizeRest&#x3C;S>>;\n</code></pre>\n<h2 id=\"12-camelcase\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#12-camelcase\"><span class=\"icon icon-link\"></span></a>12 CamelCase</h2>\n<p>Implement CamelCase which converts snake_case string to camelCase.</p>\n<p>For example</p>\n<pre><code class=\"language-typescript\">type camelCase1 = CamelCase&#x3C;'hello_world_with_types'> // expected to be 'helloWorldWithTypes'\ntype camelCase2 = CamelCase&#x3C;'HELLO_WORLD_WITH_TYPES'> // expected to be same as previous one\n</code></pre>\n<pre><code class=\"language-typescript\">type IsGap&#x3C;T extends string> = Uppercase&#x3C;T> extends Lowercase&#x3C;T> ? true : false;\n\ntype CamelCase&#x3C;S extends string> = S extends Lowercase&#x3C;S>\n  ? S extends `${infer L}_${infer C}${infer R}`\n    ? C extends '_'\n      ? `${L}_${CamelCase&#x3C;`_${R}`>}`\n      : `${L}${IsGap&#x3C;C> extends true ? `_${C}` : Uppercase&#x3C;C>}${CamelCase&#x3C;R>}`\n    : S\n  : CamelCase&#x3C;Lowercase&#x3C;S>>;\n\n</code></pre>\n<h2 id=\"13-c-printf-parser\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#13-c-printf-parser\"><span class=\"icon icon-link\"></span></a>13 C-printf Parser</h2>\n<pre><code class=\"language-typescript\">import type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;''>, []>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'Any string.'>, []>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %d.'>, ['dec']>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %%d.'>, []>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %%%d.'>, ['dec']>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %f.'>, ['float']>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %h.'>, ['hex']>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %q.'>, []>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'Hello %s: score is %d.'>, ['string', 'dec']>>,\n  Expect&#x3C;Equal&#x3C;ParsePrintFormat&#x3C;'The result is %'>, []>>,\n]\n</code></pre>\n<pre><code class=\"language-typescript\">type ControlsMap = {\n  c: 'char'\n  s: 'string'\n  d: 'dec'\n  o: 'oct'\n  h: 'hex'\n  f: 'float'\n  p: 'pointer'\n}\n\ntype ParsePrintFormat&#x3C;S extends string> = S extends `${infer Start}%${infer Letter}${infer Rest}`\n  ? (Letter extends keyof ControlsMap\n      ? [ControlsMap[Letter], ...ParsePrintFormat&#x3C;Rest>]\n      : ParsePrintFormat&#x3C;Rest>)\n  : []\n\n</code></pre>\n<h2 id=\"14-typed-get\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#14-typed-get\"><span class=\"icon icon-link\"></span></a>14. Typed Get</h2>\n<p>实现以下功能的工具类型:</p>\n<pre><code class=\"language-typescript\">type Data = {\n  foo: {\n    bar: {\n      value: 'foobar',\n      count: 6,\n    },\n    included: true,\n  },\n  hello: 'world'\n}\n  \ntype A = Get&#x3C;Data, 'hello'> // 'world'\ntype B = Get&#x3C;Data, 'foo.bar.count'> // 6\ntype C = Get&#x3C;Data, 'foo.bar'> // { value: 'foobar', count: 6 }\n</code></pre>\n<pre><code class=\"language-typescript\">type Split&#x3C;S extends string, Element extends string = '.'> = S extends ''\n  ? []\n  : S extends `${infer Left}${Element}${infer Rest}`\n  ? [Left, Rest]\n  : [S];\n\ntype Get&#x3C;T, K extends string> = K extends keyof T\n  ? T[K]\n  : Split&#x3C;K>['length'] extends 2\n  ? Split&#x3C;K>[0] extends keyof T\n    ? Split&#x3C;K>[1] extends string\n      ? Get&#x3C;T[Split&#x3C;K>[0]], Split&#x3C;K>[1]>\n      : never\n    : never\n  : never;\n</code></pre>\n<h2 id=\"15-string-to-number\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#15-string-to-number\"><span class=\"icon icon-link\"></span></a>15. String to Number</h2>\n<pre><code class=\"language-typescript\">type cases = [\n  Expect&#x3C;Equal&#x3C;ToNumber&#x3C;'0'>, 0>>,\n  Expect&#x3C;Equal&#x3C;ToNumber&#x3C;'5'>, 5>>,\n  Expect&#x3C;Equal&#x3C;ToNumber&#x3C;'12'>, 12>>,\n  Expect&#x3C;Equal&#x3C;ToNumber&#x3C;'27'>, 27>>,\n  Expect&#x3C;Equal&#x3C;ToNumber&#x3C;'18@7_$%'>, never>>,\n]\n</code></pre>\n<pre><code class=\"language-typescript\">type ToNumber&#x3C;S extends string> = S extends `${infer N extends number}` ? N : never;\n</code></pre>\n<h2 id=\"16-tuple-filter\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#16-tuple-filter\"><span class=\"icon icon-link\"></span></a>16. Tuple Filter</h2>\n<pre><code class=\"language-typescript\">type cases = [\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;[], never>, []>>,\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;[never], never>, []>>,\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;['a', never], never>, ['a']>>,\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;[1, never, 'a'], never>, [1, 'a']>>,\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;[never, 1, 'a', undefined, false, null], never | null | undefined>, [1, 'a', false]>>,\n  Expect&#x3C;Equal&#x3C;FilterOut&#x3C;[number | null | undefined, never], never | null | undefined>, [number | null | undefined]>>,\n]\n\n</code></pre>\n<pre><code class=\"language-typescript\">type FilterOut&#x3C;T extends any[], F> = T extends [infer R, ...infer Rest] ? [R] extends [F] ? FilterOut&#x3C;Rest, F> : [R, ...FilterOut&#x3C;Rest, F>] : []\n\n</code></pre>\n<h2 id=\"17tuple-to-enum-object\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#17tuple-to-enum-object\"><span class=\"icon icon-link\"></span></a>17.Tuple to Enum Object</h2>\n<pre><code class=\"language-typescript\">type cases = [\n  Expect&#x3C;Equal&#x3C;Enum&#x3C;[]>, {}>>,\n  Expect&#x3C;Equal&#x3C;\n  Enum&#x3C;typeof OperatingSystem>,\n  {\n    readonly MacOS: 'macOS'\n    readonly Windows: 'Windows'\n    readonly Linux: 'Linux'\n  }\n  >>,\n  Expect&#x3C;Equal&#x3C;\n  Enum&#x3C;typeof OperatingSystem, true>,\n  {\n    readonly MacOS: 0\n    readonly Windows: 1\n    readonly Linux: 2\n  }\n  >>,\n  Expect&#x3C;Equal&#x3C;\n  Enum&#x3C;typeof Command>,\n  {\n    readonly Echo: 'echo'\n    readonly Grep: 'grep'\n    readonly Sed: 'sed'\n    readonly Awk: 'awk'\n    readonly Cut: 'cut'\n    readonly Uniq: 'uniq'\n    readonly Head: 'head'\n    readonly Tail: 'tail'\n    readonly Xargs: 'xargs'\n    readonly Shift: 'shift'\n  }\n  >>,\n  Expect&#x3C;Equal&#x3C;\n  Enum&#x3C;typeof Command, true>,\n  {\n    readonly Echo: 0\n    readonly Grep: 1\n    readonly Sed: 2\n    readonly Awk: 3\n    readonly Cut: 4\n    readonly Uniq: 5\n    readonly Head: 6\n    readonly Tail: 7\n    readonly Xargs: 8\n    readonly Shift: 9\n  }\n  >>,\n]\n</code></pre>\n<pre><code class=\"language-typescript\">type TupleKeys&#x3C;T extends readonly unknown[]> = T extends readonly [\n  infer Head,\n  ...infer Tail\n]\n  ? TupleKeys&#x3C;Tail> | Tail[\"length\"]\n  : never;\n\ntype Enum&#x3C;T extends readonly string[], N extends boolean = false> = {\n  readonly [K in TupleKeys&#x3C;T> as Capitalize&#x3C;T[K]>]: N extends true ? K : T[K]\n};\n</code></pre>\n<h2 id=\"18-deep-object-to-unique\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#18-deep-object-to-unique\"><span class=\"icon icon-link\"></span></a>18. Deep object to unique</h2>\n<pre><code class=\"language-typescript\">type DeepObjectToUniq&#x3C;O extends object> = {\n  [k in keyof O]: O[k] extends object ? DeepObjectToUniq&#x3C;O[k]> &#x26; { [unique: symbol]: [O, k] } : O[k]\n} &#x26; { [unique: symbol]: O }\n\n/* _____________ Test Cases _____________ */\nimport type { Equal, IsFalse, IsTrue } from '@type-challenges/utils'\n\ntype Quz = { quz: 4 }\n\ntype Foo = { foo: 2; baz: Quz; bar: Quz }\ntype Bar = { foo: 2; baz: Quz; bar: Quz &#x26; { quzz?: 0 } }\n\ntype UniqQuz = DeepObjectToUniq&#x3C;Quz>\ntype UniqFoo = DeepObjectToUniq&#x3C;Foo>\ntype UniqBar = DeepObjectToUniq&#x3C;Bar>\n\ndeclare let foo: Foo\ndeclare let uniqFoo: UniqFoo\n\nuniqFoo = foo\nfoo = uniqFoo\n\ntype cases = [\n  IsFalse&#x3C;Equal&#x3C;UniqQuz, Quz>>,\n  IsFalse&#x3C;Equal&#x3C;UniqFoo, Foo>>,\n  IsTrue&#x3C;Equal&#x3C;UniqFoo['foo'], Foo['foo']>>,\n  IsTrue&#x3C;Equal&#x3C;UniqFoo['bar']['quz'], Foo['bar']['quz']>>,\n  IsFalse&#x3C;Equal&#x3C;UniqQuz, UniqFoo['baz']>>,\n  IsFalse&#x3C;Equal&#x3C;UniqFoo['bar'], UniqFoo['baz']>>,\n  IsFalse&#x3C;Equal&#x3C;UniqBar['baz'], UniqFoo['baz']>>,\n  IsTrue&#x3C;Equal&#x3C;keyof UniqBar['baz'], keyof UniqFoo['baz']>>,\n  IsTrue&#x3C;Equal&#x3C;keyof Foo, keyof UniqFoo &#x26; string>>,\n]\n</code></pre>\n<h2 id=\"19-length-of-string-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#19-length-of-string-2\"><span class=\"icon icon-link\"></span></a>19. Length of String 2</h2>\n<pre><code class=\"language-typescript\">type Two&#x3C;S extends string,L extends string = '',R extends string = ''> =\n  S extends `${infer x}${infer xs}`\n    ? xs extends `${infer y}${infer ys}`\n      ? Two&#x3C;ys, `${L}${x}`, `${R}${y}`>\n    : [`${S}${L}`,R]\n  : [L,R];\n\ntype Spread&#x3C;S extends string> =\n  S extends ''\n    ? []\n  : Two&#x3C;S> extends [infer L, ''] ? [L]\n  : Two&#x3C;S> extends [infer L, infer R]\n    ? L extends string\n      ? R extends string\n        ? [...Spread&#x3C;L>, ...Spread&#x3C;R>]\n      : never\n    : never\n  : [];\ntype LengthOfString&#x3C;S extends string> = Spread&#x3C;S>['length'];\n\n/* _____________ Test Cases _____________ */\nimport type { Equal, IsTrue } from '@type-challenges/utils'\n\ntype cases = [\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;''>, 0>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1'>, 1>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12'>, 2>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123'>, 3>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234'>, 4>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345'>, 5>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456'>, 6>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567'>, 7>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678'>, 8>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456789'>, 9>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567890'>, 10>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678901'>, 11>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456789012'>, 12>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567890123'>, 13>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678901234'>, 14>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456789012345'>, 15>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567890123456'>, 16>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678901234567'>, 17>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456789012345678'>, 18>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567890123456789'>, 19>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678901234567890'>, 20>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'123456789012345678901'>, 21>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'1234567890123456789012'>, 22>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'12345678901234567890123'>, 23>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#x3C;'aaaaaaaaaaaaggggggggggggggggggggkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>, 272>>,\n  IsTrue&#x3C;Equal&#x3C;LengthOfString&#xn]\n</code></pre>\n<h2 id=\"20-union-to-tuple\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#20-union-to-tuple\"><span class=\"icon icon-link\"></span></a>20. Union to Tuple</h2>\n<pre><code class=\"language-typescript\">type UnionToIntersection&#x3C;U> = (U extends U ? (x: U) => unknown : never) extends (\n  x: infer R,\n) => unknown\n  ? R\n  : never;\n\n// type res = UnionToIntersection&#x3C;{ a: string } | { b: number }>;\n\n/**\n * 并集转元组\n */\ntype UnionToTuple&#x3C;T> = UnionToIntersection&#x3C;\n  T extends any ? () => T : never\n> extends () => infer ReturnType\n  ? [...UnionToTuple&#x3C;Exclude&#x3C;T, ReturnType>>, ReturnType]\n  : [];\n\n/* _____________ Test Cases _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype ExtractValuesOfTuple&#x3C;T extends any[]> = T[keyof T &#x26; number]\n\ntype cases = [\n  Expect&#x3C;Equal&#x3C;UnionToTuple&#x3C;'a' | 'b'>['length'], 2>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;'a' | 'b'>>, 'a' | 'b'>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;'a'>>, 'a'>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;any>>, any>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;undefined | void | 1>>, void | 1>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;any | 1>>, any | 1>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;any | 1>>, any>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;'d' | 'f' | 1 | never>>, 'f' | 'd' | 1>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;[{ a: 1 }] | 1>>, [{ a: 1 }] | 1>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;never>>, never>>,\n  Expect&#x3C;Equal&#x3C;ExtractValuesOfTuple&#x3C;UnionToTuple&#x3C;'a' | 'b' | 'c' | 1 | 2 | 'd' | 'e' | 'f' | 'g'>>, 'f' | 'e' | 1 | 2 | 'g' | 'c' | 'd' | 'a' | 'b'>>,\n]\n</code></pre>","theme":"fancy","tag":["Typescript"]}},"__N_SSG":true}