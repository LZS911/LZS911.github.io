{"pageProps":{"post":{"title":"大文件分片上传实践","date":"2024-08-20","slug":"大文件分片上传实践","author":"Ai.Haibara","content":"<h2 id=\"需求分析\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#需求分析\"><span class=\"icon icon-link\"></span></a>需求分析</h2>\n<ul>\n<li>大文件切割分片上传</li>\n<li>断点续传</li>\n<li>文件上传进度展示</li>\n<li>暂停以及继续上传文件</li>\n<li>已上传文件秒传</li>\n</ul>\n<h2 id=\"技术选型\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#技术选型\"><span class=\"icon icon-link\"></span></a>技术选型</h2>\n<ul>\n<li>前端：React.js</li>\n<li>服务端：Golang</li>\n<li>数据库：MySQL</li>\n<li>oss：minio</li>\n</ul>\n<h2 id=\"性能优化\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#性能优化\"><span class=\"icon icon-link\"></span></a>性能优化</h2>\n<ul>\n<li>可控制 Promise 并发数量的 PromisePool</li>\n<li>基于 WebWorker 的 WorkerPool / ThreadPool</li>\n<li>解决了前端计算大文件 hash 速度过慢的痛点</li>\n</ul>\n<h2 id=\"前端part\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#前端part\"><span class=\"icon icon-link\"></span></a>前端Part</h2>\n<h3 id=\"1-文件分片\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-文件分片\"><span class=\"icon icon-link\"></span></a>1. 文件分片</h3>\n<h4 id=\"11-目标\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#11-目标\"><span class=\"icon icon-link\"></span></a>1.1 目标</h4>\n<p>将文件按指定的分片大小进行分片, 最终拿到文件的 ArrayBuffer 数组用于上传和分片 Hash 计算</p>\n<h4 id=\"12-实现\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#12-实现\"><span class=\"icon icon-link\"></span></a>1.2 实现</h4>\n<p>利用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\">File.API</a>对文件进行切割</p>\n<pre><code class=\"language-typescript\">export function sliceFile(file: File, baseSize = 1): Blob[] {\n  const chunkSize = baseSize * 1024 * 1024;\n  const chunks: Blob[] = [];\n  let startPos = 0;\n  while (startPos &#x3C; file.size) {\n    chunks.push(file.slice(startPos, startPos + chunkSize));\n    startPos += chunkSize;\n  }\n  return chunks;\n}\n</code></pre>\n<p>获取到文件分片后的 Blob 数组后并不能直接用于计算分片 hash, 还需要将它们转成 ArrayBuffer 数组。</p>\n<p>可以通过以下两种方式进行转换：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">FileReader</a></li>\n</ol>\n<pre><code class=\"language-typescript\">export async function getArrayBufFromBlobs(chunks: Blob[]): Promise&#x3C;ArrayBuffer[]> {\n  async function readAsArrayBuffer(file: Blob) {\n    return new Promise&#x3C;ArrayBuffer>((rs) => {\n      const fileReader = new FileReader()\n      fileReader.onload = (e) => rs(e.target!.result as ArrayBuffer)\n      fileReader.readAsArrayBuffer(file)\n    })\n  }\n  return await Promise.all(chunks.map((chunk: Blob) => readAsArrayBuffer(chunk)))\n}\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/arrayBuffer\">Blob.ArrayBuff</a></li>\n</ol>\n<pre><code class=\"language-typescript\">export async function getArrayBufFromBlobs(chunks: Blob[]): Promise&#x3C;ArrayBuffer[]> {\n  return Promise.all(chunks.map(chunk => chunk.arrayBuffer()))\n}\n</code></pre>\n<blockquote>\n<p>遗留：是否需要将分片过程放到 WebWorker 中, 以避免阻塞主线程</p>\n<p>Tips: <a href=\"https://www.cnblogs.com/penghuwan/p/12053775.html\">前端的二进制家族：Blob 与 ArrayBuffer</a></p>\n</blockquote>\n<h3 id=\"2-计算分片-hash\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-计算分片-hash\"><span class=\"icon icon-link\"></span></a>2. 计算分片 Hash</h3>\n<h4 id=\"21-目标\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#21-目标\"><span class=\"icon icon-link\"></span></a>2.1 目标</h4>\n<p>使用文件分片的 Hash 来标识文件分片, 用来判断这个分片是否已经上传过了</p>\n<h4 id=\"22-使用-promiseall-处理\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#22-使用-promiseall-处理\"><span class=\"icon icon-link\"></span></a>2.2 使用 Promise.all 处理</h4>\n<p>使用 <a href=\"https://www.npmjs.com/package/hash-wasm\">hash-wasm</a> 对分片进行 Hash 计算</p>\n<pre><code class=\"language-typescript\">import { crc32, md5 } from 'hash-wasm';\n\nexport async function singleChunkProcessor(\n  chunkBlob: Blob,\n  strategy: Strategy\n) {\n  const arrayBuffer = await chunkBlob.arrayBuffer();\n  const unit8Array = new Uint8Array(arrayBuffer);\n  return strategy === Strategy.md5 || strategy === Strategy.mixed\n    ? [await md5(unit8Array)]\n    : [await crc32(unit8Array)];\n}\n\nexport async function getChunksHashWithPromise(chunksBlob: Blob[]) {\n  let chunksHash: string[] = [];\n\n  await Promise.all(\n    chunksBlob.map((v) => {\n      return singleChunkProcessor(v, Strategy.crc32);\n    })\n  ).then((res) => {\n    chunksHash = res.flat();\n  });\n\n  return chunksHash;\n}\n</code></pre>\n<h4 id=\"23-使用-web-workers\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#23-使用-web-workers\"><span class=\"icon icon-link\"></span></a>2.3 使用 Web Workers</h4>\n<p>由于计算文件分片 Hash 是一个 CPU 密集型任务, 直接在主线程中计算 hash 必定会导致 UI 卡死, 考虑做以下几点优化：</p>\n<ol>\n<li>放到 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> 中计算 Hash。并且，ArrayBuffer 是可 Transfer 的对象, 在主线程与 Worker 线程通信时, 可以通过移交控制权的方式通信, 避免线程通信引起的结构化克隆</li>\n<li>分片之间的 Hash 计算没有关联, 而 WebWorker 可以用来开额外的计算线程, 考虑基于 WebWorker 实现线程池(WorkerPool)来加速计算分片 Hash</li>\n<li>当文件较大时计算使用分片的 MD5值作为 Hash 计算速度仍然较慢, 但分片的 hash 其实只是为了标识分片, 对于唯一性要求并不高, 考虑在文件较大的场景下使用 CRC32 值作为分片的 Hash。CRC32的十六进制表示只有8位(MD5有32位), 且 CPU 对计算 CRC32 有硬件加速, 速度会比计算 MD5 快得多</li>\n</ol>\n<h3 id=\"3-计算文件-hash\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-计算文件-hash\"><span class=\"icon icon-link\"></span></a>3. 计算文件 Hash</h3>\n<h4 id=\"31-目标\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#31-目标\"><span class=\"icon icon-link\"></span></a>3.1 目标</h4>\n<p>计算文件的 Hash 用来标识这个文件是否已上传</p>\n<h4 id=\"32-存在的问题与解决思路\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#32-存在的问题与解决思路\"><span class=\"icon icon-link\"></span></a>3.2 存在的问题与解决思路</h4>\n<p>计算全部文件的 hash 效率过低，考虑使用以下两种方案之一</p>\n<ul>\n<li>使用 <a href=\"https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8\">wasm</a>: <a href=\"https://juejin.cn/post/7129446744080777224\">https://juejin.cn/post/7129446744080777224</a></li>\n<li>使用 MerkleTree(默克尔树) 的树根 hash 作为文件的 hash: <a href=\"https://juejin.cn/post/7354362021428117519#heading-6\">https://juejin.cn/post/7354362021428117519#heading-6</a></li>\n</ul>\n<h3 id=\"4上传文件分片\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4上传文件分片\"><span class=\"icon icon-link\"></span></a>4.上传文件分片</h3>\n<h4 id=\"41-目标\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#41-目标\"><span class=\"icon icon-link\"></span></a>4.1 目标</h4>\n<ul>\n<li>实现文件分片的并发上传</li>\n<li>实现中止以及继续上传文件分片</li>\n<li>实时展示文件上传进度</li>\n</ul>\n<h4 id=\"42-实现文件分片的并发上传\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#42-实现文件分片的并发上传\"><span class=\"icon icon-link\"></span></a>4.2 实现文件分片的并发上传</h4>\n<p>实现 PromisePool 来控制请求的发送：<a href=\"https://juejin.cn/post/7353106546827624463#heading-23\">https://juejin.cn/post/7353106546827624463#heading-23</a></p>\n<h3 id=\"展示上传进度\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#展示上传进度\"><span class=\"icon icon-link\"></span></a>展示上传进度</h3>\n<p>todo...</p>\n<h2 id=\"服务端-part\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#服务端-part\"><span class=\"icon icon-link\"></span></a>服务端 Part</h2>\n<h3 id=\"getsuccesschunks\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#getsuccesschunks\"><span class=\"icon icon-link\"></span></a>GetSuccessChunks</h3>\n<p>通过文件 hash 判断当前文件是否存在上传记录</p>\n<ul>\n<li>未上传</li>\n<li>部分上传：通过 minio client 提供的接口判断当前文件上传过的 chunks</li>\n<li>上传完成</li>\n</ul>\n<h3 id=\"newmultipart\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#newmultipart\"><span class=\"icon icon-link\"></span></a>NewMultipart</h3>\n<p>文件未上传的情况下调用该请求，向数据库中插入一条记录</p>\n<h3 id=\"getmultipartuploadurl\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#getmultipartuploadurl\"><span class=\"icon icon-link\"></span></a>GetMultipartUploadUrl</h3>\n<p>通过 minio client 生成上传部分 chunks 的 url</p>\n<h3 id=\"updatefilechunk\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#updatefilechunk\"><span class=\"icon icon-link\"></span></a>UpdateFileChunk</h3>\n<p>更新 MySQL 记录中的 completed_parts 字段</p>\n<h3 id=\"completemultipart\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#completemultipart\"><span class=\"icon icon-link\"></span></a>CompleteMultipart</h3>\n<p>通过 minio client 提供的接口合并之前上传过的文件分片并标记数据库中记录为上传成功</p>\n<h2 id=\"整体流程\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#整体流程\"><span class=\"icon icon-link\"></span></a>整体流程</h2>\n<ol>\n<li>对文件进行分片处理</li>\n<li>计算各分片 Hash 以及文件 Hash</li>\n<li>文件上传状态检查</li>\n</ol>\n<ul>\n<li>新文件上传：\n<ol>\n<li>调用服务端API创建新的上传记录。</li>\n<li>上传所有分片。</li>\n<li>所有分片上传完成后，调用服务端完成接口。</li>\n</ol>\n</li>\n<li>断点续传\n<ol>\n<li>只上传未完成的分片。</li>\n<li>所有分片上传完成后，调用服务端完成接口。</li>\n</ol>\n</li>\n<li>已上传文件\n<ol>\n<li>直接展示上传完成状态，无需重新上传。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"todo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#todo\"><span class=\"icon icon-link\"></span></a>Todo</h2>\n<ol>\n<li>暂停上传功能</li>\n<li>关闭应用后重启保留上传进度</li>\n<li>分布式服务</li>\n<li>分片 Hash 判断文件分片是否上传</li>\n<li>多文件同时上传</li>\n<li></li>\n</ol>\n<blockquote>\n<p>参考至:</p>\n<ol>\n<li><a href=\"https://juejin.cn/post/7353106546827624463\">https://juejin.cn/post/7353106546827624463</a></li>\n<li><a href=\"https://www.cnblogs.com/xiahj/p/vue-simple-uploader.html\">https://www.cnblogs.com/xiahj/p/vue-simple-uploader.html</a></li>\n<li><a href=\"https://juejin.cn/post/6844904046436843527\">https://juejin.cn/post/6844904046436843527</a></li>\n<li><a href=\"https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8\">https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8</a></li>\n<li><a href=\"https://juejin.cn/post/7129446744080777224\">https://juejin.cn/post/7129446744080777224</a></li>\n<li><a href=\"https://juejin.cn/post/7354362021428117519\">https://juejin.cn/post/7354362021428117519</a></li>\n</ol>\n</blockquote>","theme":"orange","tag":null}},"__N_SSG":true}