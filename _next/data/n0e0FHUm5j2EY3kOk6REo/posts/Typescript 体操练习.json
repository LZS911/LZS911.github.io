{"pageProps":{"post":{"title":"Typescript 体操练习","date":"2022-09-26","slug":"Typescript 体操练习","author":"LZS_911","content":"<p><strong>注: Typescript 使用最新版本号 v4.94</strong></p>\n<h2>1. 将下划线模式的 string 类型转化成驼峰类型</h2>\n<pre><code class=\"language-Typescript\">type TransformToCamelCase&#x3C;T extends string> =\n  T extends `${infer Left}_${infer Rest}`\n    ? `${Left}${TransformToCamelCase&#x3C;Capitalize&#x3C;Rest>>}`\n    : T;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-1.png\" alt=\"alt\"></p>\n<p>注意点:</p>\n<p>需要递归继续处理剩余的部分.</p>\n<h3>应用: 当服务端定义的实体中的 <code>key</code> 的模式为下环线, 但前端代码中需要使用驼峰模式时</h3>\n<p>实现:</p>\n<pre><code class=\"language-Typescript\">type CamelCase&#x3C;T extends Record&#x3C;string, any>> = T extends any\n  ? {\n      [key in keyof T as TransformToCamelCase&#x3C;\n        key &#x26; string\n      >]: T[key] extends Array&#x3C;infer Element>\n        ? Array&#x3C;\n            Element extends string\n              ? TransformToCamelCase&#x3C;Element>\n              : CamelCase&#x3C;Element>\n          >\n        : T[key] extends Record&#x3C;string, any>\n        ? CamelCase&#x3C;T[key]>\n        : T[key];\n    }\n  : never;\n</code></pre>\n<p><img src=\"/assets/typescript/example-2.png\" alt=\"alt\"></p>\n<p>注意点:</p>\n<ol>\n<li>当某项 <code>key</code> 的类型仍然满足 <code>Record&#x3C;string, any></code> 时, 需要递归继续.</li>\n<li>因为 <code>Typescript</code> 不会去计算递归中的表达式, 所以需要加上一个一定为 <code>true</code> 的判断, 让他去执行, 也就是 <code>T extends any</code>.</li>\n<li>需要注意 <code>Array</code> 的情况.</li>\n</ol>\n<h2>2. 将索引类型转化为联合类型</h2>\n<ul>\n<li>索引类型是一个聚合了多个元素的类型，对象、类、元组等都是索引类型, 举个栗子:</li>\n</ul>\n<pre><code class=\"language-Typescript\">type ExampleType = {\n  name: string;\n  sex: boolean;\n  age: number;\n  hobbies: string[];\n}\n</code></pre>\n<ul>\n<li>联合类型. 顾名思义, 它是一个联合了多种类型的集合, 取值可以取其中任意一种类型.</li>\n</ul>\n<pre><code class=\"language-Typescript\">type UnionTypes = { name: string } | { sex: boolean } | { age: number} | { hobbies: string[] };\n</code></pre>\n<ul>\n<li>\n<p>需求: 实现一个工具类, 将 <code>ExampleType</code> 转化为 <code>UnionTypes</code></p>\n</li>\n<li>\n<p>实现:</p>\n<pre><code class=\"language-Typescript\">type SpiltObj&#x3C;T> = {\n  [key in keyof T]: {\n    [key2 in key]:T[key2]\n  }\n}[keyof T]\n</code></pre>\n</li>\n<li>\n<p>拆分, 先看第一部分</p>\n<pre><code class=\"language-Typescript\">type SpiltObj&#x3C;T> = {\n  [key in keyof T]: {\n    [key2 in key]:T[key2]\n  }\n}\n</code></pre>\n<pre><code class=\"language-Typescript\">  type Res1 = SpiltObj&#x3C;ExampleType>\n</code></pre>\n<p><img src=\"/assets/typescript/example-3.png\" alt=\"alt\"></p>\n<p>第二部分</p>\n<pre><code class=\"language-Typescript\">  type ExampleType = {\n    name: string;\n    sex: boolean;\n    age: number;\n    hobbies: string[];\n  }\n\n  type Res2 = ExampleType[keyof ExampleType]\n</code></pre>\n<p><img src=\"/assets/typescript/example-4.png\" alt=\"alt\"></p>\n</li>\n<li>\n<p>拓展, 实现一个工具类, 拿到索性类型键值路径的联合类型</p>\n<pre><code class=\"language-Typescript\">type Template = {\n  aa: {\n    bb: string;\n  };\n  cc: number;\n  dd: {\n    ee: {\n      ff: string;\n    }\n  };\n  gg: {\n    hh: number\n  };\n}\n\ntype TemplateKeyPath&#x3C;T> ={\n   [key in keyof T]: key extends string ? T[key] extends Record&#x3C;string, any> ? key | `${key}.${TemplateKeyPath&#x3C;T[key]>}` : key : never;\n}[keyof T]\n\ntype Res3 = TemplateKeyPath&#x3C;Template>\n</code></pre>\n<p><img src=\"/assets/typescript/example-5.png\" alt=\"alt\"></p>\n</li>\n</ul>\n<h2>3. 数组长度数值计算</h2>\n<p>Typescript 本身是没有加减乘除运算符的, 所以需要取巧来处理数值的计算.</p>\n<p>利用构造数组, 然后获取它的 <code>length</code>.</p>\n<p><strong>注: 因为数组长度不会为负数, 所以这里做的数值计算只包含正整数</strong></p>\n<p><img src=\"/assets/typescript/example-6.png\" alt=\"alt\"></p>\n<p>实现运算方法之前, 先实现一个构造数组的工具类</p>\n<pre><code class=\"language-Typescript\">type BuildArray&#x3C;\n  Length extends number,\n  Element = unknown,\n  Array extends unknown[] = []\n> = Array['length'] extends Length\n  ? Array\n  : BuildArray&#x3C;Length, Element, [Element, ...Array]>;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-7.png\" alt=\"alt\"></p>\n<p><code>BuildArray</code> 接收三个泛形, 其中第一个参数 <code>Length</code> 为需要构造出来的数组长度, <code>Element</code> 为数组类的元素类型, 默认值为 <code>unknown</code>, <code>Array</code> 为返回结果, 用来递归处理. 如果将其转化为 <code>javascript</code> 代码, 大致如下:</p>\n<pre><code class=\"language-javascript\">const buildArray = (length, element, arr = []) => {\n  if (length === arr.length) {\n    return arr;\n  }\n\n  return buildArray(length, element, [element, ...arr]);\n};\n</code></pre>\n<h3>1. 加法运算</h3>\n<pre><code class=\"language-typescript\">type Add&#x3C;Num1 extends number, Num2 extends number> = [...BuildArray&#x3C;Num1>, ...BuildArray&#x3C;Num2>]['length']\n</code></pre>\n<p><img src=\"/assets/typescript/example-8.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-9.png\" alt=\"alt\"></p>\n<h3>2. 减法运算</h3>\n<pre><code class=\"language-typescript\">type Subtract&#x3C;\n  Num1 extends number,\n  Num2 extends number\n> = BuildArray&#x3C;Num1> extends [...arr1: BuildArray&#x3C;Num2>, ...arr2: infer Rest]\n  ? Rest['length']\n  : never;\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-10.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-11.png\" alt=\"alt\"></p>\n<h3>3. 乘法运算</h3>\n<pre><code class=\"language-typescript\">type Multiply&#x3C;\n  Num1 extends number,\n  Num2 extends number,\n  ResultArray extends unknown[] = []\n> = Num2 extends 0\n  ? ResultArray['length']\n  : Multiply&#x3C;Num1, Subtract&#x3C;Num2, 1>, [...BuildArray&#x3C;Num1>, ...ResultArray]>;\n</code></pre>\n<p><img src=\"/assets/typescript/example-12.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-13.png\" alt=\"alt\"></p>\n<h3>4. 除法运算</h3>\n<pre><code class=\"language-typescript\">type Divide&#x3C;\n  Num1 extends number,\n  Num2 extends number,\n  ResultArray extends unknown[] = []\n> = Num1 extends 0\n  ? ResultArray['length']\n  : Divide&#x3C;Subtract&#x3C;Num1, Num2>, Num2, [unknown, ...ResultArray]>; \n  // [unknown, ...ResultArray] => [...BuildArray&#x3C;Add&#x3C;ResultArray['length'], 1> &#x26; number>]\n\n</code></pre>\n<p><img src=\"/assets/typescript/example-14.png\" alt=\"alt\"></p>\n<p><img src=\"/assets/typescript/example-15.png\" alt=\"alt\"></p>","theme":"fancy","tag":["Typescript"]}},"__N_SSG":true}