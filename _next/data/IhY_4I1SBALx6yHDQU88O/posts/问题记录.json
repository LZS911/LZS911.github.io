{"pageProps":{"post":{"title":"问题记录","date":"2022-01-01","slug":"问题记录","author":"LZS_911","content":"<h2 id=\"记录什么\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#记录什么\"><span class=\"icon icon-link\"></span></a>记录什么?</h2>\n<p>记录开发一个前后端分离的窗体程序时遇到的一些 <code>bug</code> 和一些不太熟悉知识点.</p>\n<p>项目技术栈: <code>react + electron + koa2</code></p>\n<h3 id=\"1-使用-koa2-cors-中间件解决跨域后为什么还是提示跨域的问题\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-使用-koa2-cors-中间件解决跨域后为什么还是提示跨域的问题\"><span class=\"icon icon-link\"></span></a>1. 使用 <code>koa2-cors</code> 中间件解决跨域后为什么还是提示跨域的问题</h3>\n<p>跨域应该是一个老生常谈的问题了, 这里不过多解释. 在开发环境上, 跨域问题前后端都能进行解决. 本项目中采用服务端使用<code>koa2-cors</code> 中间件来进行解决.</p>\n<p>按照包的官网进行配置</p>\n<p><img src=\"../assets/images/treasure-bowl-question/koa-cors-docs.jpg\" alt=\"alt\"></p>\n<p>前端调用接口</p>\n<p><img src=\"../assets/images/treasure-bowl-question/request-error.jpg\" alt=\"alt\"></p>\n<p>可以看到并没有解决跨域问题, 但是 <code>Google</code> 明明告诉我这个包就能解决跨域问题啊 😫😫😫</p>\n<p>继续<code>Google</code> 后无果, 于是冷静下来分析报错信息, 发现这次报错信息和以往的跨域报错信息并不相同, 最后多了一段话:</p>\n<p><code>The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</code></p>\n<p>也就是说 这里的 <code>origin</code> 在包含凭证信息时并不能设置为 <code>*</code>. 于是回到前端项目中发现 <code>axios</code> 的配置中设置了</p>\n<pre><code class=\"language-javascript\">axios.defaults.withCredentials = true;\n</code></pre>\n<p>该配置表示如果前端项目在跨域的情况下能够携带 <code>cookies</code> 信息.</p>\n<p>而为什么当包含凭证时不能设置为 <code>*</code> 呢?</p>\n<p>通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\">MDN</a> 得知:</p>\n<blockquote>\n<p>对于没有凭据的请求（没有 <code>HTTP cookie</code> 或 <code>HTTP</code> 认证信息的请求），值 <code>*</code> 仅作为特殊的通配符值。 在具有凭据的请求中，它被视为没有特殊语义的文字标头名称 <code>*</code> 。 请注意，<code>Authorization</code> 标头不能使用通配符，并且始终需要明确列出。</p>\n</blockquote>\n<p>而要在携带凭据的同时也要支持跨域便得这样配置:</p>\n<pre><code class=\"language-javascript\">   origin(ctx) {\n        return ctx.header.origin ?? '';\n      },\n</code></pre>\n<p>反思:</p>\n<ol>\n<li>各种无脑 <code>cv</code> 操作...</li>\n<li>还是不太熟悉 <code>http</code> 协议的各种配置...</li>\n</ol>","ogImage":{"url":"/assets/blog/image/cover.jpg"},"coverImage":"/assets/blog/image/cover.jpg","theme":"arknights","tag":["koa","node","cors"]}},"__N_SSG":true}