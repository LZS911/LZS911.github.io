1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-90f68e0a3827b559.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-90f68e0a3827b559.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/afd685b2833157f9.css","style"]
0:{"P":null,"b":"VQMikkFLjz8rKFgMU-oOZ","p":"","c":["","posts","%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E5%AE%9E%E8%B7%B5"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E5%AE%9E%E8%B7%B5","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/afd685b2833157f9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[null,"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E5%AE%9E%E8%B7%B5","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","NAipfMwIIhniDBhxv6ths",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[4467,["874","static/chunks/874-90f68e0a3827b559.js","766","static/chunks/766-dfd76e5b111fda64.js","651","static/chunks/app/(article)/layout-120a8801c6045af4.js"],"default"]
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}],false]}]}]
9:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
c:null
17:I[5099,["766","static/chunks/766-dfd76e5b111fda64.js","62","static/chunks/62-abd5adcc4de2f71a.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-3df7d22b1edb27cc.js"],"ThemeLoader"]
18:T400e,<h2 id="需求分析"><a aria-hidden="true" tabindex="-1" href="#需求分析"><span class="icon icon-link"></span></a>需求分析</h2>
<ul>
<li>大文件切割分片上传</li>
<li>断点续传</li>
<li>文件上传进度展示</li>
<li>暂停以及继续上传文件</li>
<li>已上传文件秒传</li>
</ul>
<h2 id="技术选型"><a aria-hidden="true" tabindex="-1" href="#技术选型"><span class="icon icon-link"></span></a>技术选型</h2>
<ul>
<li>前端：React.js</li>
<li>服务端：Golang</li>
<li>数据库：MySQL</li>
<li>oss：minio</li>
</ul>
<h2 id="涉及知识点"><a aria-hidden="true" tabindex="-1" href="#涉及知识点"><span class="icon icon-link"></span></a>涉及知识点</h2>
<ul>
<li>Blob 与 ArrayBuff</li>
<li>WebWorker</li>
<li>Wasm</li>
<li>MerkleTree</li>
<li>PromisePool</li>
</ul>
<h2 id="性能优化"><a aria-hidden="true" tabindex="-1" href="#性能优化"><span class="icon icon-link"></span></a>性能优化</h2>
<ul>
<li>可控制 Promise 并发数量的 PromisePool</li>
<li>基于 WebWorker 的 WorkerPool / ThreadPool</li>
<li>解决了前端计算大文件 hash 速度过慢的痛点</li>
</ul>
<h2 id="整体流程"><a aria-hidden="true" tabindex="-1" href="#整体流程"><span class="icon icon-link"></span></a>整体流程</h2>
<ol>
<li>对文件进行分片处理</li>
<li>计算各分片 Hash 以及文件 Hash</li>
<li>文件上传状态检查</li>
</ol>
<ul>
<li>新文件上传：
<ol>
<li>调用服务端API创建新的上传记录。</li>
<li>上传所有分片。</li>
<li>所有分片上传完成后，调用服务端完成接口。</li>
</ol>
</li>
<li>断点续传
<ol>
<li>只上传未完成的分片。</li>
<li>所有分片上传完成后，调用服务端完成接口。</li>
</ol>
</li>
<li>已上传文件
<ol>
<li>直接展示上传完成状态，无需重新上传。</li>
</ol>
</li>
</ul>
<h2 id="前端part"><a aria-hidden="true" tabindex="-1" href="#前端part"><span class="icon icon-link"></span></a>前端Part</h2>
<h3 id="1-文件分片"><a aria-hidden="true" tabindex="-1" href="#1-文件分片"><span class="icon icon-link"></span></a>1. 文件分片</h3>
<h4 id="11-目标"><a aria-hidden="true" tabindex="-1" href="#11-目标"><span class="icon icon-link"></span></a>1.1 目标</h4>
<p>将文件按指定的分片大小进行分片, 最终拿到文件的 ArrayBuffer 数组用于上传和分片 Hash 计算</p>
<h4 id="12-实现"><a aria-hidden="true" tabindex="-1" href="#12-实现"><span class="icon icon-link"></span></a>1.2 实现</h4>
<p>利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice">File.API</a>对文件进行切割</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sliceFile</span>(<span class="hljs-params"><span class="hljs-attr">file</span>: <span class="hljs-title class_">File</span>, baseSize = <span class="hljs-number">1</span></span>): <span class="hljs-title class_">Blob</span>[] {
  <span class="hljs-keyword">const</span> chunkSize = baseSize * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;
  <span class="hljs-keyword">const</span> <span class="hljs-attr">chunks</span>: <span class="hljs-title class_">Blob</span>[] = [];
  <span class="hljs-keyword">let</span> startPos = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">while</span> (startPos &#x3C; file.<span class="hljs-property">size</span>) {
    chunks.<span class="hljs-title function_">push</span>(file.<span class="hljs-title function_">slice</span>(startPos, startPos + chunkSize));
    startPos += chunkSize;
  }
  <span class="hljs-keyword">return</span> chunks;
}
</code></pre>
<p>获取到文件分片后的 Blob 数组后并不能直接用于计算分片 hash, 还需要将它们转成 ArrayBuffer 数组。</p>
<p>可以通过以下两种方式进行转换：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader</a></li>
</ol>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getArrayBufFromBlobs</span>(<span class="hljs-params"><span class="hljs-attr">chunks</span>: <span class="hljs-title class_">Blob</span>[]</span>): <span class="hljs-title class_">Promise</span>&#x3C;<span class="hljs-title class_">ArrayBuffer</span>[]> {
  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">readAsArrayBuffer</span>(<span class="hljs-params"><span class="hljs-attr">file</span>: <span class="hljs-title class_">Blob</span></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&#x3C;<span class="hljs-title class_">ArrayBuffer</span>>(<span class="hljs-function">(<span class="hljs-params">rs</span>) =></span> {
      <span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()
      fileReader.<span class="hljs-property">onload</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =></span> <span class="hljs-title function_">rs</span>(e.<span class="hljs-property">target</span>!.<span class="hljs-property">result</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ArrayBuffer</span>)
      fileReader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)
    })
  }
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(chunks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">chunk</span>: <span class="hljs-title class_">Blob</span></span>) =></span> <span class="hljs-title function_">readAsArrayBuffer</span>(chunk)))
}
</code></pre>
<ol start="2">
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/arrayBuffer">Blob.ArrayBuff</a></li>
</ol>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getArrayBufFromBlobs</span>(<span class="hljs-params"><span class="hljs-attr">chunks</span>: <span class="hljs-title class_">Blob</span>[]</span>): <span class="hljs-title class_">Promise</span>&#x3C;<span class="hljs-title class_">ArrayBuffer</span>[]> {
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(chunks.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">chunk</span> =></span> chunk.<span class="hljs-title function_">arrayBuffer</span>()))
}
</code></pre>
<blockquote>
<p>遗留：是否需要将分片过程放到 WebWorker 中, 以避免阻塞主线程</p>
<p>Tips: <a href="https://zh.javascript.info/arraybuffer-binary-arrays">ArrayBuffer相关介绍</a></p>
</blockquote>
<h3 id="2-计算分片-hash"><a aria-hidden="true" tabindex="-1" href="#2-计算分片-hash"><span class="icon icon-link"></span></a>2. 计算分片 Hash</h3>
<h4 id="21-目标"><a aria-hidden="true" tabindex="-1" href="#21-目标"><span class="icon icon-link"></span></a>2.1 目标</h4>
<p>使用文件分片的 Hash 来标识文件分片, 用来判断这个分片是否已经上传过了</p>
<h4 id="22-使用-promiseall-处理"><a aria-hidden="true" tabindex="-1" href="#22-使用-promiseall-处理"><span class="icon icon-link"></span></a>2.2 使用 Promise.all 处理</h4>
<p>使用 <a href="https://www.npmjs.com/package/hash-wasm">hash-wasm</a> 对分片进行 Hash 计算</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { crc32, md5 } <span class="hljs-keyword">from</span> <span class="hljs-string">'hash-wasm'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">singleChunkProcessor</span>(<span class="hljs-params">
  <span class="hljs-attr">chunkBlob</span>: <span class="hljs-title class_">Blob</span>,
  <span class="hljs-attr">strategy</span>: <span class="hljs-title class_">Strategy</span>
</span>) {
  <span class="hljs-keyword">const</span> arrayBuffer = <span class="hljs-keyword">await</span> chunkBlob.<span class="hljs-title function_">arrayBuffer</span>();
  <span class="hljs-keyword">const</span> unit8Array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(arrayBuffer);
  <span class="hljs-keyword">return</span> strategy === <span class="hljs-title class_">Strategy</span>.<span class="hljs-property">md5</span> || strategy === <span class="hljs-title class_">Strategy</span>.<span class="hljs-property">mixed</span>
    ? [<span class="hljs-keyword">await</span> <span class="hljs-title function_">md5</span>(unit8Array)]
    : [<span class="hljs-keyword">await</span> <span class="hljs-title function_">crc32</span>(unit8Array)];
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getChunksHashWithPromise</span>(<span class="hljs-params"><span class="hljs-attr">chunksBlob</span>: <span class="hljs-title class_">Blob</span>[]</span>) {
  <span class="hljs-keyword">let</span> <span class="hljs-attr">chunksHash</span>: <span class="hljs-built_in">string</span>[] = [];

  <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(
    chunksBlob.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> {
      <span class="hljs-keyword">return</span> <span class="hljs-title function_">singleChunkProcessor</span>(v, <span class="hljs-title class_">Strategy</span>.<span class="hljs-property">crc32</span>);
    })
  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =></span> {
    chunksHash = res.<span class="hljs-title function_">flat</span>();
  });

  <span class="hljs-keyword">return</span> chunksHash;
}
</code></pre>
<h4 id="23-使用-web-workers"><a aria-hidden="true" tabindex="-1" href="#23-使用-web-workers"><span class="icon icon-link"></span></a>2.3 使用 Web Workers</h4>
<p>由于计算文件分片 Hash 是一个 CPU 密集型任务, 直接在主线程中计算 hash 必定会导致 UI 卡死, 考虑做以下几点优化：</p>
<ol>
<li>放到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">WebWorker</a> 中计算 Hash。并且，ArrayBuffer 是可 Transfer 的对象, 在主线程与 Worker 线程通信时, 可以通过移交控制权的方式通信, 避免线程通信引起的结构化克隆</li>
<li>分片之间的 Hash 计算没有关联, 而 WebWorker 可以用来开额外的计算线程, 考虑基于 WebWorker 实现线程池(WorkerPool)来加速计算分片 Hash</li>
<li>当文件较大时计算使用分片的 MD5值作为 Hash 计算速度仍然较慢, 但分片的 hash 其实只是为了标识分片, 对于唯一性要求并不高, 考虑在文件较大的场景下使用 CRC32 值作为分片的 Hash。CRC32的十六进制表示只有8位(MD5有32位), 且 CPU 对计算 CRC32 有硬件加速, 速度会比计算 MD5 快得多</li>
</ol>
<p>相关参考：<a href="https://juejin.cn/post/7353106546827624463#heading-9">https://juejin.cn/post/7353106546827624463#heading-9</a></p>
<h3 id="3-计算文件-hash"><a aria-hidden="true" tabindex="-1" href="#3-计算文件-hash"><span class="icon icon-link"></span></a>3. 计算文件 Hash</h3>
<h4 id="31-目标"><a aria-hidden="true" tabindex="-1" href="#31-目标"><span class="icon icon-link"></span></a>3.1 目标</h4>
<p>计算文件的 Hash 用来标识这个文件是否已上传</p>
<h4 id="32-存在的问题与解决思路"><a aria-hidden="true" tabindex="-1" href="#32-存在的问题与解决思路"><span class="icon icon-link"></span></a>3.2 存在的问题与解决思路</h4>
<p>计算全部文件的 hash 效率过低，考虑使用以下两种方案之一</p>
<ul>
<li>使用 <a href="https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8">wasm</a>: <a href="https://juejin.cn/post/7129446744080777224">https://juejin.cn/post/7129446744080777224</a></li>
<li>使用 MerkleTree(默克尔树) 的树根 hash 作为文件的 hash: <a href="https://juejin.cn/post/7353106546827624463#heading-17">https://juejin.cn/post/7353106546827624463#heading-17</a></li>
</ul>
<h3 id="4上传文件分片"><a aria-hidden="true" tabindex="-1" href="#4上传文件分片"><span class="icon icon-link"></span></a>4.上传文件分片</h3>
<h4 id="41-目标"><a aria-hidden="true" tabindex="-1" href="#41-目标"><span class="icon icon-link"></span></a>4.1 目标</h4>
<ul>
<li>实现文件分片的并发上传</li>
<li>实现中止以及继续上传文件分片</li>
<li>实时展示文件上传进度</li>
</ul>
<h4 id="42-实现文件分片的并发上传"><a aria-hidden="true" tabindex="-1" href="#42-实现文件分片的并发上传"><span class="icon icon-link"></span></a>4.2 实现文件分片的并发上传</h4>
<p>实现 PromisePool 来控制请求的发送：<a href="https://juejin.cn/post/7353106546827624463#heading-23">https://juejin.cn/post/7353106546827624463#heading-23</a></p>
<h3 id="展示上传进度"><a aria-hidden="true" tabindex="-1" href="#展示上传进度"><span class="icon icon-link"></span></a>展示上传进度</h3>
<p>todo...</p>
<h2 id="服务端-part"><a aria-hidden="true" tabindex="-1" href="#服务端-part"><span class="icon icon-link"></span></a>服务端 Part</h2>
<h3 id="getsuccesschunks"><a aria-hidden="true" tabindex="-1" href="#getsuccesschunks"><span class="icon icon-link"></span></a>GetSuccessChunks</h3>
<p>通过文件 hash 判断当前文件是否存在上传记录</p>
<ul>
<li>未上传</li>
<li>部分上传：通过 minio client 提供的接口判断当前文件上传过的 chunks</li>
<li>上传完成</li>
</ul>
<h3 id="newmultipart"><a aria-hidden="true" tabindex="-1" href="#newmultipart"><span class="icon icon-link"></span></a>NewMultipart</h3>
<p>文件未上传的情况下调用该请求，向数据库中插入一条记录</p>
<h3 id="getmultipartuploadurl"><a aria-hidden="true" tabindex="-1" href="#getmultipartuploadurl"><span class="icon icon-link"></span></a>GetMultipartUploadUrl</h3>
<p>通过 minio client 生成上传部分 chunks 的 url</p>
<h3 id="updatefilechunk"><a aria-hidden="true" tabindex="-1" href="#updatefilechunk"><span class="icon icon-link"></span></a>UpdateFileChunk</h3>
<p>更新 MySQL 记录中的 completed_parts 字段</p>
<h3 id="completemultipart"><a aria-hidden="true" tabindex="-1" href="#completemultipart"><span class="icon icon-link"></span></a>CompleteMultipart</h3>
<p>通过 minio client 提供的接口合并之前上传过的文件分片并标记数据库中记录为上传成功</p>
<h2 id="todo"><a aria-hidden="true" tabindex="-1" href="#todo"><span class="icon icon-link"></span></a>Todo</h2>
<ol>
<li>暂停上传功能</li>
<li>关闭应用后重启保留上传进度</li>
<li>分布式服务</li>
<li>分片 Hash 判断文件分片是否上传</li>
<li>多文件同时上传</li>
<li></li>
</ol>
<blockquote>
<p>参考至:</p>
<ol>
<li><a href="https://juejin.cn/post/7353106546827624463">https://juejin.cn/post/7353106546827624463</a></li>
<li><a href="https://www.cnblogs.com/xiahj/p/vue-simple-uploader.html">https://www.cnblogs.com/xiahj/p/vue-simple-uploader.html</a></li>
<li><a href="https://juejin.cn/post/6844904046436843527">https://juejin.cn/post/6844904046436843527</a></li>
<li><a href="https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8">https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8</a></li>
<li><a href="https://juejin.cn/post/7129446744080777224">https://juejin.cn/post/7129446744080777224</a></li>
<li><a href="https://juejin.cn/post/7354362021428117519">https://juejin.cn/post/7354362021428117519</a></li>
</ol>
</blockquote>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"大文件分片上传实践"}]}],["$","time",null,{"dateTime":"2024-08-20","className":"text-center block my-4 text-sm opacity-60","children":"August\t20, 2024"}],[null,["$","$L17",null,{"theme":"orange"}],["$","section",null,{"className":"markdown-body-orange max-w-3xl","dangerouslySetInnerHTML":{"__html":"$18"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
16:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
