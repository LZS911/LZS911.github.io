1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-16716eedeadde879.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-16716eedeadde879.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/2626867bd1decdff.css","style"]
0:{"P":null,"b":"-Iu8KnLDp0bD3kZkGuE9H","p":"","c":["","posts","%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%8A-%E7%AC%94%E8%AE%B0"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%8A-%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2626867bd1decdff.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[null,"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%8A-%E7%AC%94%E8%AE%B0","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","fFlVc3rg-D7QNzIBMejBJ",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[8565,["874","static/chunks/874-16716eedeadde879.js","766","static/chunks/766-eeb113df4f56c105.js","651","static/chunks/app/(article)/layout-18bcffe355ed9a9b.js"],"default"]
14:I[7832,["874","static/chunks/874-16716eedeadde879.js","766","static/chunks/766-eeb113df4f56c105.js","651","static/chunks/app/(article)/layout-18bcffe355ed9a9b.js"],"default"]
15:"$Sreact.suspense"
16:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}],["$","$L14",null,{"href":"/practice"}]]}]}]
9:["$","$15",null,{"fallback":null,"children":["$","$L16",null,{"promise":"$@17"}]}]
c:null
18:I[5099,["766","static/chunks/766-eeb113df4f56c105.js","62","static/chunks/62-36d7af331e30e687.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-2ec56518ac6621da.js"],"ThemeLoader"]
19:T77d3,<h2 id="什么是-prototype"><a aria-hidden="true" tabindex="-1" href="#什么是-prototype"><span class="icon icon-link"></span></a>什么是 <code>[[Prototype]]</code>?</h2>
<p>JavaScript 中的对象有一个特殊的<code>[[Prototype]]</code>内置属性, 其实就是对于其他对象的引用。几乎所有的对象在创建时<code>[[Prototype]]</code>属性都会被赋予一个非空的值。(也存在<code>[[Prototype]]</code>属性为空的情况, 虽然其不常见)。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myObj = {
  <span class="hljs-attr">a</span>: <span class="hljs-string">'hello prototype'</span>,
};
myObj.<span class="hljs-property">a</span>; <span class="hljs-comment">// 'hello prototype'</span>
</code></pre>
<p>当我们使用 <code>.引用</code> 或者 <code>[]引用</code>属性 <code>a</code>时, 会触发<code>[[GET]]</code>操作。对于默认<code>[[GET]]</code>操作来说, 首先会去检查对象本身是否有该属性, 如果有的话就是用它, 否则就需要使用对象<code>[[Prototype]]</code>链了。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> sourceObj = {
  <span class="hljs-attr">a</span>: <span class="hljs-string">'hello prototype'</span>,
};
<span class="hljs-comment">//创建一个关联到sourceObj的对象</span>
<span class="hljs-keyword">const</span> targetObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(sourceObj);
targetObj.<span class="hljs-property">a</span>; <span class="hljs-comment">// 'hello prototype'</span>
</code></pre>
<p>上述代码中显然属性<code>a</code>是不存在 targetObj 上的, 但是我们使用 <code>Object.create</code>方法创建该对象后, 将其<code>[[Prototype]]</code>关联到了<code>sourceObj</code>上, 便可正常的访问到属性<code>a</code>了。但是, 如果当<code>sourceObj</code>上也不存在属性<code>a</code>并且<code>[[Prototype]]</code>也不为空, 就会继续查找下去。这个过程会持续到找到匹配的属性或者查找完一条完整的<code>[[Prototype]]</code>链。如果是后者的话, <code>[[GET]]</code>操作的返回值为<code>undefined</code>。</p>
<p>使用<code>for...in</code>遍历对象时原理和查找<code>[[Prototype]]</code>链类似, 任何可以通过<code>[[Prototype]]</code>链访问到并且是<code>enumerable</code>的属性都会被枚举。使用 <code>in</code>操作符时同样会查找完整的原型链(无论是否为<code>enumerable</code>)。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> sourceObj = {
  <span class="hljs-attr">a</span>: <span class="hljs-string">'hello prototype'</span>,
};
<span class="hljs-comment">//创建一个关联到sourceObj的对象</span>
<span class="hljs-keyword">const</span> targetObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(sourceObj);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> targetObj) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'key:'</span> + key); <span class="hljs-comment">//key: a</span>
}
<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(myObj, <span class="hljs-string">'a'</span>, {
  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,
});
<span class="hljs-string">'a'</span> <span class="hljs-keyword">in</span> targetObj; <span class="hljs-comment">//true</span>
</code></pre>
<h3 id="objectprototype"><a aria-hidden="true" tabindex="-1" href="#objectprototype"><span class="icon icon-link"></span></a>Object.prototype</h3>
<p>所有普通的<code>[[Prototype]]</code>链最终都会指向内置的<code>Object.prototype</code>。由于所有普通的对象都源于(或者说把<code>[[Prototype]]</code>链的顶端设置为<code>Object.prototype</code>), 所以会包含 JavaScript 中一些内置的功能。比如说<code>toString()</code>和<code>valueOf()</code>。</p>
<h3 id="属性设置与屏蔽"><a aria-hidden="true" tabindex="-1" href="#属性设置与屏蔽"><span class="icon icon-link"></span></a>属性设置与屏蔽</h3>
<p>给一个对象设置属性并不仅仅是添加一个新属性或者是修改已有的属性值, 现在看一下完整的一个过程:
<code>myObj.bar = 'hello prototype'</code></p>
<ol>
<li>如果<code>myObj</code>中存在普通数据访问属性<code>bar</code>, 则会直接修改已有的属性值。</li>
<li>如果<code>bar</code>既存在<code>myObj</code>中, 又存在于<code>myObj</code>的<code>[[Prototype]]</code>链中, 则会发生属性屏蔽, <code>myObj</code>中的<code>bar</code>会屏蔽<code>[[Prototype]]</code>链上层中的所有<code>bar</code>, 因为<code>myObj.bar</code>总是会选择原型链中最底层的<code>bar</code>。</li>
<li>如果<code>bar</code>不存在于<code>myObj</code>中, 也不存在与原型链中, 则会直接添加到<code>myObj</code>上。若<code>bar</code>不存在于<code>myObj</code>中, 但存在与原型链中, 则又有以下几种情况:</li>
</ol>
<ul>
<li>
<p>如果原型链上层中存在普通数据访问属性<code>bar</code>, 并且没有被标记为只读(<code>writable:true</code>), 那么就会直接在<code>myObj</code>中添加<code>bar</code>, 它是屏蔽属性。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> sourceObj = {
  <span class="hljs-attr">bar</span>: <span class="hljs-string">'2'</span>,
};
<span class="hljs-keyword">const</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(sourceObj);
myObj.<span class="hljs-property">bar</span> = <span class="hljs-string">'345'</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj, sourceObj); <span class="hljs-comment">//'345', '2'</span>
</code></pre>
</li>
<li>
<p>如果原型链上层中存在<code>bar</code>, 且被标记为只读(<code>writable:false</code>), 那么便无法在<code>myObj</code>中添加<code>bar</code>, 如果为严格模式, 代码会抛出一个错误, 非严格模式下, 赋值语句会被跳过。总之, 不会发生屏蔽。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> sourceObj = {
  <span class="hljs-attr">bar</span>: <span class="hljs-string">'2'</span>,
};
<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(sourceObj, <span class="hljs-string">'bar'</span>, {
  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,
});
<span class="hljs-keyword">const</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(sourceObj);

myObj.<span class="hljs-property">bar</span> = <span class="hljs-string">'345'</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-property">bar</span>, sourceObj.<span class="hljs-property">bar</span>); <span class="hljs-comment">//'2', '2'</span>
</code></pre>
</li>
<li>
<p>如果原型链上层中存在<code>bar</code>, 且为一个<code>setter</code>, 那么会调用这个<code>setter</code>, 不会添加在<code>myObj</code>上,也不会重新定义这个<code>setter</code>, 即不会发生屏蔽。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> sourceObj = {
  <span class="hljs-keyword">set</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">val</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'bar setter'</span>);
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_val_</span> = val;
  },
};

<span class="hljs-keyword">const</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(sourceObj);
myObj.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// bar setter</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-property">bar</span>); <span class="hljs-comment">// undefined</span>
</code></pre>
<p>如果希望在第二种和第三种中也屏蔽原型链上的<code>bar</code>, 就不能通过 <code>=</code> 操作符来赋值, 而是使用<code>Object.defineProperty</code>来添加。</p>
</li>
</ul>
<h3 id="类"><a aria-hidden="true" tabindex="-1" href="#类"><span class="icon icon-link"></span></a>’类‘</h3>
<p><code>JavaScript</code>和面向类的语言不同, 它没有类来作为对象的抽象模式。<code>JavaScript</code>只有对象。
实际上, <code>JavaScript</code>才是真正应该被称为‘面向对象’的语言, 因为它是少有的可以不通过类直接创造对象的语言。</p>
<h3 id="类函数"><a aria-hidden="true" tabindex="-1" href="#类函数"><span class="icon icon-link"></span></a>类函数</h3>
<p><code>JavaScript</code>中一直有一种无耻的行为被滥用, 那就是<strong>模仿类</strong>。
这种奇怪的行为利用了函数的一种特殊性:所有函数都会拥有一个名为 prototype 的公有并且不可枚举的属性, 它会指向另一个对象。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) {}
<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;
</code></pre>
<p>这个对象通常被称为<code>Bar</code>的原型。这个对象到底是什么?
最直接的解释就是, 这个对象是在调用 <code>new Bar()</code>时创建的, 最后会被关联到<code>Bar.prototype</code>这个对象上。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) {}
<span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>();
<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(bar) === <span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">//true</span>
</code></pre>
<p>解释一下<code>javascript</code>中<code>new</code>操作符的作用:</p>
<ol>
<li>创建(或者说构造)一个全新的对象。</li>
<li>这个对象会被执行原型链接。</li>
<li>这个对象会绑定到函数调用的<code>this</code>。</li>
<li>如果函数没有返回其他对象, 那么 <code>new</code> 表达式中的函数调用会自动返回这个新对象。</li>
</ol>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">Bar, ...args</span>) {
  <span class="hljs-keyword">const</span> obj = {};
  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);
  <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">apply</span>(obj, args);
  <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? result : obj;
}
</code></pre>
<p>在面向类的语言中, 类可以被实例化多次, 就像用模具制作东西一样。之所以为这样是因为实例化(或继承)一个类就意味着<strong>把类的行为复制到物理对象(实例)中去</strong>, 对于每一个新实例来说都会重复这个过程。
但是在 <code>JavaScript</code>中, 并没有类似的复制机制。我们并不能创建多个实例, 只能创建多个对象, 这些对象的<code>[[Prototype]]</code>关联的是同一个对象, 即<code>Bar.prototype</code>。但是在默认情况下并不会进行复制, 因此这些对象之间并不会完全失去联系, 它们是互相关联的。</p>
<h3 id="关于名称"><a aria-hidden="true" tabindex="-1" href="#关于名称"><span class="icon icon-link"></span></a>关于名称</h3>
<p>在<code>JavaScript</code>中, 我们并不会将一个对象(类)复制到另一个对象(实例), 只是将它们关联了起来。从视觉角度来讲, <code>[[Prototype]]</code>机制如下:</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40af4f8858ca4b26af4cfe32b4ab7f8e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>这个机制通常被称为<strong>原型继承</strong>。 但是我觉得恰恰是因为这个名称影响了大家对于<code>JavaScript</code>机制真实原理的理解。
继承意味着复制操作, 但<code>JavaScript</code>(默认)并不会复制对象属性。相反, <code>JavaScript</code>会在两个对象之间创建一个关联, 这样一个对象就可以通过 <strong>委托</strong> 访问另一个对象的属性和函数。<strong>委托</strong>这个术语可以更加准确的描述<code>JavaScript</code>中对象的关联机制。</p>
<h3 id="构造函数"><a aria-hidden="true" tabindex="-1" href="#构造函数"><span class="icon icon-link"></span></a>构造函数</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) {}
<span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>();
bar.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Bar</span>; <span class="hljs-comment">//true</span>
</code></pre>
<p>上述代码很容易让人认为<code>Bar</code>是一个构造函数, 因为我们使用 <code>new</code>操作符调用它, 并且创建了一个对象 <code>bar</code>。<br>
实际上, <code>Bar</code>与其他一个正常函数没有任何区别, 这里能创建对象仅仅是因为我们使用了<code>new</code>操作符, 所以我的理解是 <code>JavaScript</code>中的构造函数是所有带<code>new</code>的函数调用。换句话说, 函数不是构造函数, 但是当且仅当使用<code>new</code>操作符时, 函数变成了构造函数。</p>
<p><code>bar.constructor === Bar</code>很容易让人误解为<code>bar</code>有一个指向<code>Bar</code>的<code>constructor</code>, 但实际上并不是这样的,<code>bar.constructor</code>也是委托给了<code>Bar.prototype.constructor</code>, 这和构造毫无关系。</p>
<p>举个栗子:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) {}
<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = {};
<span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>();
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Bar</span>); <span class="hljs-comment">//false</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>); <span class="hljs-comment">//true</span>
</code></pre>
<p>所以说, 只是因为在函数<code>Bar</code>定义时创建了<code>Bar.prototype</code>, <code>Bar.prototype.constructor</code>默认是指向<code>Bar</code>本身的, 又通过<code>new</code>创建的对象的<code>[[Prototype]]</code>会指向<code>Bar.prototype</code>, 可是当<code>Bar.prototype</code>的引用发生改变时, 便不能保证<code>bar.constructor === Bar</code>, 即使<code>bar</code>是通过
<code>Bar new</code>出来的一个对象, 所以说<code>bar.constructor</code>是一个不可靠且不安全的引用。</p>
<h3 id="原型继承"><a aria-hidden="true" tabindex="-1" href="#原型继承"><span class="icon icon-link"></span></a>原型继承</h3>
<p>下面这段代码就是典型的原型风格。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">name</span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
}
<span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;
};
<span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params">name, label</span>) {
  <span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">label</span> = label;
}
<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);

<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getLabel</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">label</span>;
};

<span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'obj a'</span>);
a.<span class="hljs-title function_">getLabel</span>(); <span class="hljs-comment">// "obj a"</span>
a.<span class="hljs-title function_">getName</span>(); <span class="hljs-comment">// "a"</span>
</code></pre>
<p>这段代码的核心是 <code>Bar.prototype = Object.create(Foo.prototype)</code>, 调用<code>Object.create(...)</code>会凭空创建一个新对象, 并把新对象内部的<code>[[Prototype]]</code>关联到你指定的对象, 换句话说, 这条语句的意思就是 <strong>创建一个新的 Bar.prototype 对象, 并把它关联到 Foo.prototype</strong>。</p>
<p>注意, 下面这两种方式是常见的错误做法, 实际上它们都存在一些问题:</p>
<p><code>Bar.prototype = Foo.prototype</code></p>
<p><code>Bar.prototype = new Foo()</code></p>
<p><code>Bar.prototype = Foo.prototype</code> 并不会创建一个关联到<code>Bar.prototype</code>的新对象, 它只是让<code>Bar.prototype</code>直接引用<code>Foo.prototype</code>对象。因此当你执行类似<code>Bar.prototype.getLabel = ...</code>赋值语句的时候会直接修改<code>Foo.prototype</code>本身。显然这不是你想要的结果, 否则你根本不需要<code>Bar</code>对象, 直接使用<code>Foo</code>就行了, 这样代码也更简单一些。
<code>Bar.prototype = new Foo()</code> 的确会创建一个关联到<code>Bar.prototype</code>的新对象。但是它使用了<code>Foo</code>的构造函数调用, 如果函数<code>Foo</code>有一些副作用的话, 就会影响到<code>Bar()</code>的后代, 后果不堪设想。</p>
<h3 id="检查类关系"><a aria-hidden="true" tabindex="-1" href="#检查类关系"><span class="icon icon-link"></span></a>检查类关系</h3>
<p>检查一个实例(<code>JavaScript</code>的对象)的继承祖先(<code>JavaScript</code>中的委托关联)通常被称为<strong>内审(或者反射)</strong>。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) {}
<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">'Bar'</span>;

<span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>();
</code></pre>
<p>我们如何通过内审找到<code>bar</code>的委托关联呢?第一种方法是站在"类"的角度来判断:
<code>bar instanceof Bar</code>
<code>instanceof</code>操作符的左操作数是一个普通的对象, 右操作数是一个函数。<code>instanceof</code>回答的问题是:在<code>bar</code>的整条原型链中是否有指向<code>Bar.prototype</code>的对象。</p>
<p>如果是使用<code>bind</code>生成的硬绑定函数, 该函数是没有<code>prototype</code>属性的。在这样的函数上使用<code>instanceof</code>的话, 目标函数的<code>prototype</code>会代替硬绑定函数的<code>prototype</code>。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params">name</span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
}

<span class="hljs-keyword">const</span> obj = {};
<span class="hljs-keyword">const</span> <span class="hljs-title class_">Baz</span> = <span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">bind</span>(obj);
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Baz</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">//undefined</span>
</code></pre>
<p>判断两个对象之间是否通过原型链关联:
<code>a.inPrototypeOf(b)</code></p>
<p>我们也可以直接获取一个对象的原型链。在 ES5 中的标准方法是:
<code>Object.getPrototypeOf(bar)</code>
可以验证下这个对象是否和我们想的一样:
<code>Object.getPrototypeOf(bar) === Bar.prototype</code> <code>// true</code></p>
<p>绝大多数浏览器(并不是所有)也支持一种非标准的方法来访问:
<code>bar.__proto__ === Bar.prototype</code></p>
<p><code>.__proto__</code>的大致实现:</p>
<pre><code class="hljs language-javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">definePrototype</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">'__proto__'</span>, {
  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-variable language_">this</span>);
  },
  <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) {
    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(<span class="hljs-variable language_">this</span>, o);
    <span class="hljs-keyword">return</span> o;
  },
});
</code></pre>
<h3 id="对象关联"><a aria-hidden="true" tabindex="-1" href="#对象关联"><span class="icon icon-link"></span></a>对象关联</h3>
<p><code>[[Prototype]]</code>机制就是存在于对象中的一个内部链接, 它会引用其他对象。
通常来说, 这个链接的作用时: 如果在对象上没有找到需要的属性或者方法引用, 引擎就会继续在<code>[[Prototype]]</code>关联的对象上进行查找。同理, 如果在后者中也没有找到需要的引用就会继续查找它的<code>[[Prototype]]</code>, 以此类推。这一系列对象的链接被称为<strong>原型链</strong>。</p>
<h3 id="创建关联"><a aria-hidden="true" tabindex="-1" href="#创建关联"><span class="icon icon-link"></span></a>创建关联</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">something</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'tell me something...'</span>);
  },
};
<span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(foo);
bar.<span class="hljs-title function_">something</span>(); <span class="hljs-comment">// 'tell me something...'</span>
</code></pre>
<p><code>Object.create(..)</code>会创建一个新对象<code>bar</code>并把它关联到我们制定的对象<code>foo</code>, 这样我们就可以充分发挥<code>[[Prototype]]</code>机制的威力(委托)并且避免不必要的麻烦(比如使用<code>new</code>的构造函数调用会生成<code>prototype</code>和<code>constructor</code>引用)。</p>
<p><code>Object.create(null)</code>会创建一个拥有空(或者<code>null</code>)<code>[[Prototype]]</code>链接的对象, 这个对象无法进行委托。由于这个对象没有原型链, 所以<code>instanceof</code>操作符无法进行判断, 因此总是为返回<code>false</code>。这些特殊的空<code>[[Prototype]]</code>对象通常被称作<strong>字典</strong>, 它们完全不会受到原型链的干扰, 因此非常适合用来存储数据。</p>
<h3 id="关联关系是备用"><a aria-hidden="true" tabindex="-1" href="#关联关系是备用"><span class="icon icon-link"></span></a>关联关系是备用</h3>
<p>看起来对象之前的关联关系是用来处理缺失属性或者方法时的一种备用选项。这个说法有点道理, 但是我认为这并不是
<code>[[Prototype]]</code>的本质。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">something</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'tell me something...'</span>);
  },
};
<span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(foo);
bar.<span class="hljs-title function_">something</span>(); <span class="hljs-comment">// 'tell me something...'</span>
</code></pre>
<p>虽然这段代码可以正常工作。但是如果你这么写只是为了让<code>bar</code>在无法处理属性或者方法时可以使用备用的<code>foo</code>, 那么这段代码后续就会很难理解和维护。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">something</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'tell me something...'</span>);
  },
};
<span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(foo);
bar.<span class="hljs-property">something</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">something</span>();
};
bar.<span class="hljs-title function_">something</span>(); <span class="hljs-comment">// 'tell me something...'</span>
</code></pre>
<p>这里我们调用的<code>bar.something()</code>实际是存在于<code>bar</code>中的, 这可以让我们的<code>API</code>设计的更加清晰, 不那么的神奇。从内部来说, 我们实现遵循的是<strong>委托设计模式</strong>。</p>
<h2 id="总结"><a aria-hidden="true" tabindex="-1" href="#总结"><span class="icon icon-link"></span></a>总结</h2>
<p>如果要访问对象中并不存在的一个属性, <code>[[Get]]</code>操作就会查找对象内部<code>[[Prototype]]</code>关联的对象。这个关联关系世纪上定义了一条 <strong>原型链</strong>, 在查找属性是会对它进行遍历。</p>
<p>所有普通对象都会有内置的<code>__proto__</code>, 指向原型链的顶端,如果在原型链中找不到制定的属性就会停止。一些通用的方法存在于<code>Object.prototype</code>上, 所以所有对象都可以使用它们。</p>
<p>关联两个对象最常用的方法时使用<code>new</code>关键字进行函数调用, 在调用的 4 个步骤走中会创建一个关联其他对象的新对象。</p>
<p>使用<code>new</code>调用函数时会把新对象的<code>prototype</code>属性关联到其他对象。带<code>new</code>的函数调用通常被称为构造函数调用, 尽管它们实际上和传统面向类语言中的类构造函数不一样。</p>
<p>虽然这些<code>JavaScript</code>机制和传统面向类语言中的类初始化和类继承很相似, 但是<code>JavaScript</code>中的机制有一个核心区别, 那就是不会进行复制, 对象之间是通过内部的原型链项=相关联的。</p>
<p>出于各种原因, 以继承结尾的术语和其他面向对象的术语都无法帮助你理解<code>JavaScript</code>的真实机制。</p>
<p>相比之下, <strong>委托</strong>是一个更适合的术语, 因为对象之间的关系不是复制而是委托。</p>
<p><strong>本文内容仅为个人学习时所做笔记, 文章内容参考与《你不知道的 JavaScript》。</strong></p>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"你不知道的javascript上-笔记"}]}],["$","time",null,{"dateTime":"2022-05-01","className":"text-center block my-4 text-sm opacity-60","children":"May\t1, 2022"}],[null,["$","$L18",null,{"theme":"orange"}],["$","section",null,{"className":"markdown-body-orange max-w-3xl","dangerouslySetInnerHTML":{"__html":"$19"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
17:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$17:metadata","error":null,"digest":"$undefined"}
