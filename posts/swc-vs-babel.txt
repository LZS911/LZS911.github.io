1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-90f68e0a3827b559.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-90f68e0a3827b559.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/afd685b2833157f9.css","style"]
0:{"P":null,"b":"pziluXrn53DWp-k7Mvo1l","p":"","c":["","posts","swc-vs-babel"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","swc-vs-babel","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/afd685b2833157f9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[null,"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","swc-vs-babel","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","UHD7k3198ghx7gAz8MyLI",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[4467,["874","static/chunks/874-90f68e0a3827b559.js","766","static/chunks/766-dfd76e5b111fda64.js","651","static/chunks/app/(article)/layout-120a8801c6045af4.js"],"default"]
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}],false]}]}]
9:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
c:null
17:I[5099,["766","static/chunks/766-dfd76e5b111fda64.js","62","static/chunks/62-abd5adcc4de2f71a.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-3df7d22b1edb27cc.js"],"ThemeLoader"]
18:T21c7,<h2 id="babel"><a aria-hidden="true" tabindex="-1" href="#babel"><span class="icon icon-link"></span></a>babel</h2>
<p>关于 babel 的介绍: &#x3C;<a href="https://lzs911.github.io/posts/babe">https://lzs911.github.io/posts/babe</a></p>
<h2 id="swc"><a aria-hidden="true" tabindex="-1" href="#swc"><span class="icon icon-link"></span></a>swc</h2>
<p><a href="https://swc.rs/">swc</a> 是通过 <a href="https://www.rust-lang.org/">rust</a> 实现的一个类 babel 工具, 而且在 swc 的官网，很直白说自己和 babel 对标，swc 和 babel 命令可以相互替换，并且大部分的 babel 插件也已经实现。</p>
<p>对比 babel, swc 的最大优势就是快, 这是底层语言所造成的原因. 所以现在很多能用rust重写的工具都开始进行重写.</p>
<p>光说可能并不能具体的体会 swc 到底有多快, 所以准备同时使用 babel 以及 swc 实现一个简易版本的 <code>babel-import-plugin</code>, 也就是将 <code>import { A, B } from 'lib'</code> 转化成 <code>import A from lib/A; import B from lib/B;</code>.</p>
<h2 id="对比"><a aria-hidden="true" tabindex="-1" href="#对比"><span class="icon icon-link"></span></a>对比</h2>
<p>先来看下 babel 的实现</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> { traverse, parseSync, <span class="hljs-attr">types</span>: t } = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/core"</span>);
<span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).<span class="hljs-property">default</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">transform</span> = (<span class="hljs-params">content</span>) => {
  <span class="hljs-keyword">const</span> ast = <span class="hljs-title function_">parseSync</span>(content);
  <span class="hljs-title function_">traverse</span>(ast, {
    <span class="hljs-title class_">ImportDeclaration</span>(_path) {
      <span class="hljs-keyword">const</span> { node } = _path;

      <span class="hljs-keyword">const</span> libraryName = node.<span class="hljs-property">source</span>.<span class="hljs-property">value</span>;

      <span class="hljs-keyword">const</span> _program = _path.<span class="hljs-title function_">findParent</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =></span> p.<span class="hljs-title function_">isProgram</span>());

      <span class="hljs-keyword">if</span> (
        node.<span class="hljs-property">specifiers</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> v.<span class="hljs-property">type</span> === <span class="hljs-string">"ImportDefaultSpecifier"</span>)
          .<span class="hljs-property">length</span> > <span class="hljs-number">0</span>
      ) {
        <span class="hljs-keyword">return</span>;
      }

      node.<span class="hljs-property">specifiers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> {
        <span class="hljs-keyword">const</span> name = v.<span class="hljs-property">imported</span>?.<span class="hljs-property">name</span> ?? <span class="hljs-string">""</span>;

        _program.<span class="hljs-title function_">pushContainer</span>(
          <span class="hljs-string">"body"</span>,
          t.<span class="hljs-title function_">importDeclaration</span>(
            [t.<span class="hljs-title function_">importDefaultSpecifier</span>(t.<span class="hljs-title function_">identifier</span>(name))],
            t.<span class="hljs-title function_">stringLiteral</span>(<span class="hljs-string">`<span class="hljs-subst">${libraryName}</span>/lib/<span class="hljs-subst">${name}</span>`</span>)
          )
        );
      });

      _path.<span class="hljs-title function_">remove</span>();
      _path.<span class="hljs-title function_">skip</span>();
    },
  });

  <span class="hljs-keyword">const</span> out = <span class="hljs-title function_">generator</span>(ast)?.<span class="hljs-property">code</span>;
};
</code></pre>
<p>主要流程还是老三步:</p>
<ol>
<li>将原代码转化成 ast 树</li>
<li>遍历 ast, 处理符合条件的 import 语句, 将其转化成需要的格式, 同时使用 <code>program.pushContainer</code> 添加到原树中, 并且移除掉旧的节点.</li>
<li>将 ast 转化回字符串格式的代码.</li>
</ol>
<p>接下来看下 swc 的实现</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Visitor</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@swc/core/Visitor"</span>).<span class="hljs-property">default</span>;
<span class="hljs-keyword">const</span> { transformSync } = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@swc/core"</span>);

<span class="hljs-keyword">class</span> <span class="hljs-title class_">PluginTransformImport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Visitor</span> {
  <span class="hljs-title function_">visitModuleItems</span>(<span class="hljs-params">nodes</span>) {
    <span class="hljs-keyword">const</span> transformedNodes = [];

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> node <span class="hljs-keyword">of</span> nodes) {
      <span class="hljs-keyword">const</span> { type, source, specifiers } = node;

      <span class="hljs-keyword">if</span> (type === <span class="hljs-string">"ImportDefaultSpecifier"</span>) {
        transformedNodes.<span class="hljs-title function_">push</span>(node);
        <span class="hljs-keyword">continue</span>;
      }

      specifiers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> {
        <span class="hljs-keyword">const</span> name = v.<span class="hljs-property">local</span>.<span class="hljs-property">value</span>;
        <span class="hljs-keyword">const</span> type = v.<span class="hljs-property">type</span>;

        <span class="hljs-keyword">if</span> (type === <span class="hljs-string">"ImportSpecifier"</span>) {
          <span class="hljs-keyword">const</span> newSpecifier = {
            ...v,
            <span class="hljs-attr">imported</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">type</span>: <span class="hljs-string">"ImportDefaultSpecifier"</span>,
          };
          <span class="hljs-keyword">const</span> value = <span class="hljs-string">`<span class="hljs-subst">${source.value}</span>/lib/<span class="hljs-subst">${name}</span>`</span>;

          <span class="hljs-keyword">const</span> copyNode = {
            ...node,
            <span class="hljs-attr">source</span>: {
              ...source,
              value,
            },
            <span class="hljs-attr">specifiers</span>: [newSpecifier],
            <span class="hljs-attr">type</span>: <span class="hljs-string">"ImportDeclaration"</span>,
          };

          transformedNodes.<span class="hljs-title function_">push</span>(copyNode);
        }
      });
    }
    <span class="hljs-keyword">return</span> transformedNodes;
  }
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">transform</span> = (<span class="hljs-params">content</span>) => {
  <span class="hljs-keyword">const</span> code =
    <span class="hljs-title function_">transformSync</span>(content, {
      <span class="hljs-attr">plugin</span>: <span class="hljs-function">(<span class="hljs-params">v</span>) =></span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PluginTransformImport</span>().<span class="hljs-title function_">visitProgram</span>(v),
    })?.<span class="hljs-property">code</span> ?? <span class="hljs-string">""</span>;
};

</code></pre>
<p>具体流程:</p>
<ol>
<li>新建一个类, 并且继承 <code>@swc/core</code> 提供的 <code>Visitor</code> 类.</li>
<li>实现对应节点类型的处理函数, 这里是 <code>visitModuleItems</code>, 这里与 babel 不同的是这里是通过函数的返回值来 replace 掉旧的节点</li>
<li>调用 transformSync, 将实现的类作为插件的形式传入</li>
</ol>
<p>下面是两者在对 10000 条 import 语句下的表现:</p>
<p><img src="/assets/swc_vs_babel/example-1.png" alt="alt">
<img src="/assets/swc_vs_babel/example-1.png" alt="alt"></p>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"swc-vs-babel"}]}],["$","time",null,{"dateTime":"2023-03-18","className":"text-center block my-4 text-sm opacity-60","children":"March\t18, 2023"}],[null,["$","$L17",null,{"theme":"fancy"}],["$","section",null,{"className":"markdown-body-fancy max-w-3xl","dangerouslySetInnerHTML":{"__html":"$18"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
16:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
