1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-90f68e0a3827b559.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-90f68e0a3827b559.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/60adccb42f39203c.css","style"]
:HL["/_next/static/css/c7f6e508dc13ee25.css","style"]
0:{"P":null,"b":"fPyRDf3jU8EaKreMEXeMB","p":"","c":["","posts","313c7d69a04b4c72485036ba"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","313c7d69a04b4c72485036ba","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/60adccb42f39203c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c7f6e508dc13ee25.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","313c7d69a04b4c72485036ba","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","WO0rzmx1efUpXk_Xxoc2a",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[2034,["874","static/chunks/874-90f68e0a3827b559.js","296","static/chunks/296-93bf38127a29d878.js","766","static/chunks/766-3404ce8492c1c2aa.js","846","static/chunks/846-5073d6248f7e4d01.js","651","static/chunks/app/(article)/layout-0113e097a12c4d28.js"],"default"]
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://vercel.com/","target":"_blank","children":"Vercel"}]]}]]}],false]}]}]
9:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
c:null
17:I[6874,["874","static/chunks/874-90f68e0a3827b559.js","296","static/chunks/296-93bf38127a29d878.js","766","static/chunks/766-3404ce8492c1c2aa.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-15870e626cfa21a8.js"],""]
18:I[5099,["874","static/chunks/874-90f68e0a3827b559.js","296","static/chunks/296-93bf38127a29d878.js","766","static/chunks/766-3404ce8492c1c2aa.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-15870e626cfa21a8.js"],"ThemeLoader"]
19:T333c,<h2 id="1-console"><a aria-hidden="true" tabindex="-1" href="#1-console"><span class="icon icon-link"></span></a>1. Console</h2>
<p><code>console</code> 对象提供了浏览器控制台调试的接口, 能够直接将内容输出在浏览器控制台上, 类似 c 语言中的 <code>printf</code>. 同时 <code>node.js</code> 也提供了 <code>node:console</code> 模块, 效果与浏览器类似. 具体 Api 介绍:</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console">Web</a></li>
<li><a href="https://nodejs.org/api/console.html">Node.js</a></li>
</ul>
<h2 id="2-浏览器开发者工具"><a aria-hidden="true" tabindex="-1" href="#2-浏览器开发者工具"><span class="icon icon-link"></span></a>2. 浏览器开发者工具</h2>
<p>当我们调试一个 web 项目时, 我们可以使用浏览器自带的 developer tools, 这里我们以 chrome 为例:</p>
<p><img src="/assets/debugger_methods/example-1.gif" alt="example-1"></p>
<h2 id="3-vscode-debugger"><a aria-hidden="true" tabindex="-1" href="#3-vscode-debugger"><span class="icon icon-link"></span></a>3. vscode Debugger</h2>
<p>vscode 提供了 “Run and Debug” 视窗, 默认情况它长这个样:</p>
<p><img src="/assets/debugger_methods/example-2.png" alt="example-2"></p>
<p>这里我们点击 <code>create launch.json file</code> 来创建一个配置文件后即可开始调试. 具体配置见: <a href="https://code.visualstudio.com/docs/editor/debugging#_run-and-debug-view">https://code.visualstudio.com/docs/editor/debugging#_run-and-debug-view</a></p>
<p>接下来看下使用 Debug 视窗调试一个 node 项目会带来哪些提升.</p>
<h3 id="1-breakpoint"><a aria-hidden="true" tabindex="-1" href="#1-breakpoint"><span class="icon icon-link"></span></a>1. Breakpoint</h3>
<p>当我们开始调试并设置断点后可以看到以下画面:</p>
<p><img src="/assets/debugger_methods/example-3.png" alt="example-2"></p>
<p>设置断点后我们可以更方便的观察到运行环境中的变量以及一些全局方法和全局变量, 并且可以以更高的效率去阅读一些项目源码.</p>
<h3 id="2-logpoint"><a aria-hidden="true" tabindex="-1" href="#2-logpoint"><span class="icon icon-link"></span></a>2. LogPoint</h3>
<p>添加 LogPoint 后, 当执行到该处时, 便会在 debug 控制台输出 log 信息, 在实现 console 功能的同时无需修改代码.</p>
<p><img src="/assets/debugger_methods/example-4.gif" alt="example-2"></p>
<h3 id="3-debugger-web项目"><a aria-hidden="true" tabindex="-1" href="#3-debugger-web项目"><span class="icon icon-link"></span></a>3. Debugger Web项目</h3>
<p>除了 node 项目, vscode Debugger 同时也是可以调试一个 web 项目. 同样, 我们需要创建一个 <code>launch.json</code> 文件, 环境我们这里以 chrome 为例. 创建配置文件将 url 的值配置为开发环境下项目的地址, 我们便可以开始 Debugger 一个 web 项目了.</p>
<p><img src="/assets/debugger_methods/example-5.png" alt="example-2"></p>
<p>当我们开始调试时, vscode 会帮助我们新开一个 chrome 窗口, 我们在这个窗口下的操作都触发我们添加的 Breakpoint 以及 LogPoint.</p>
<p><img src="/assets/debugger_methods/example-6.gif" alt="example-2"></p>
<h2 id="4-在调试过程中融入自动化操作"><a aria-hidden="true" tabindex="-1" href="#4-在调试过程中融入自动化操作"><span class="icon icon-link"></span></a>4. 在调试过程中融入自动化操作</h2>
<p>当我们在开发项目业务逻辑, 特别是长表单提交逻辑时, 每次调试都需要填一大堆东西, 并且在开始调试时, 都先需要进行登录操作, 然后进入到开发页面进行操作, 这个操作还是比较繁琐的. 这个时候我们是否能通过自动脚本在调试时自动执行这一部分流程呢?</p>
<h3 id="1-选择一个自动化工具"><a aria-hidden="true" tabindex="-1" href="#1-选择一个自动化工具"><span class="icon icon-link"></span></a>1. 选择一个自动化工具</h3>
<p>这里我们选择 <a href="https://github.com/puppeteer/puppeteer">Puppeteer</a>. Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome. 和我们的调试环境完美适配, 接下来看怎样将其融合进调试流程中.</p>
<h3 id="2-将-puppeteer-融合进调试流程"><a aria-hidden="true" tabindex="-1" href="#2-将-puppeteer-融合进调试流程"><span class="icon icon-link"></span></a>2. 将 Puppeteer 融合进调试流程</h3>
<p>首先来看一下一段 node 脚本:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">"puppeteer"</span>);

(<span class="hljs-title function_">async</span> () => {
  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>({
    <span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">defaultViewport</span>: {
      <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>,
      <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>,
    },
  });

  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();
  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">"http://localhost:4546/login"</span>);
  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(<span class="hljs-string">"#emailAddress"</span>);

  <span class="hljs-keyword">const</span> $emailAddress = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">"#emailAddress"</span>);
  <span class="hljs-keyword">await</span> $emailAddress.<span class="hljs-title function_">type</span>(<span class="hljs-string">"demo@gmail.com"</span>, {
    <span class="hljs-attr">delay</span>: <span class="hljs-number">100</span>,
  });

  <span class="hljs-keyword">const</span> $password = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">"#password"</span>);
  <span class="hljs-keyword">await</span> $password.<span class="hljs-title function_">type</span>(<span class="hljs-string">"123456"</span>, {
    <span class="hljs-attr">delay</span>: <span class="hljs-number">100</span>,
  });

  <span class="hljs-keyword">const</span> $button = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">'button[type="submit"]'</span>);
  <span class="hljs-keyword">await</span> $button.<span class="hljs-title function_">click</span>();
})();
</code></pre>
<p>使用 Puppeteer 启动一个 chrome 窗口, headless 设置为 false 表示需要显示窗口, 同时设置视窗宽高. 打开新页面, 将其导航至指定的地址, 等待 <code>#emailAddress</code> 元素出现后, 输入邮箱地址和密码, 点击提交按钮.</p>
<p>现在我们成功执行了一段浏览器自动化脚本, 但是存在一个问题: vscode debug 打开的 chrome 视窗与 Puppeteer 打开的并不相同, 在 Puppeteer 执行自动化脚本时, 并不会进入 vscode 中的 Breakpoint, 有没有办法使它们使用同一个chrome 视窗呢?</p>
<p>现在我们回到调试的配置文件, 其中有一个关键字段: request, 它有两个值, <code>Launch</code> 以及 <code>Attach</code>, 创建后的默认值为 <code>Launch</code>, 其代表调试时新开一个窗口, 而 <code>Attach</code> 表示附加到某一浏览器中. 具体解释见: <a href="https://code.visualstudio.com/Docs/editor/debugging#_launch-versus-attach-configurations">https://code.visualstudio.com/Docs/editor/debugging#_launch-versus-attach-configurations</a></p>
<p>现在我们便可等 Puppeteer 新开窗口后, 将调试进程附加到上面, 便可以进行融合了, 我们来具体试一下:</p>
<p>修改 Puppeteer 脚本:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">"puppeteer"</span>);
<span class="hljs-keyword">const</span> readline = <span class="hljs-built_in">require</span>(<span class="hljs-string">"readline"</span>);

(<span class="hljs-title function_">async</span> () => {
  <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>({
    <span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">defaultViewport</span>: {
      <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>,
      <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>,
    },
    <span class="hljs-attr">debuggingPort</span>: <span class="hljs-number">9222</span>,
  });

  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();

  <span class="hljs-keyword">const</span> rl = readline.<span class="hljs-title function_">createInterface</span>({
    <span class="hljs-attr">input</span>: process.<span class="hljs-property">stdin</span>,
    <span class="hljs-attr">output</span>: process.<span class="hljs-property">stdout</span>,
  });

  rl.<span class="hljs-title function_">on</span>(<span class="hljs-string">"line"</span>, <span class="hljs-title function_">async</span> (str) => {
    <span class="hljs-keyword">if</span> (str === <span class="hljs-string">"login"</span>) {
      <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(page);
    }
    <span class="hljs-keyword">if</span> (str === <span class="hljs-string">"operationRecord"</span>) {
      <span class="hljs-keyword">await</span> <span class="hljs-title function_">testOperationRecord</span>(page);
    }
  });
})();

<span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">page</span>) => {
  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">"http://localhost:4546"</span>);
  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(<span class="hljs-string">"#emailAddress"</span>);
  <span class="hljs-keyword">const</span> $emailAddress = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">"#emailAddress"</span>);
  <span class="hljs-keyword">await</span> $emailAddress.<span class="hljs-title function_">type</span>(<span class="hljs-string">"demo@gmail.com"</span>, {
    <span class="hljs-attr">delay</span>: <span class="hljs-number">100</span>,
  });

  <span class="hljs-keyword">const</span> $password = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">"#password"</span>);
  <span class="hljs-keyword">await</span> $password.<span class="hljs-title function_">type</span>(<span class="hljs-string">"123456"</span>, {
    <span class="hljs-attr">delay</span>: <span class="hljs-number">100</span>,
  });

  <span class="hljs-keyword">const</span> $button = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">'button[type="submit"]'</span>);
  <span class="hljs-keyword">await</span> $button.<span class="hljs-title function_">click</span>();
};
</code></pre>
<p>同时更改 <code>launch.file</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"version"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0.2.0"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"configurations"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pwa-chrome"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"request"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"attach"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"port"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9222</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Launch Chrome against localhost"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"webRoot"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"${workspaceFolder}"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>最终效果如下:</p>
<p><img src="/assets/debugger_methods/example-7.gif" alt="example-2"></p>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"前端项目Debugger方法"}]}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 mb-6","children":[["$","time",null,{"dateTime":"2023-02-16","className":"text-center block my-4 text-sm opacity-60","children":"February\t16, 2023"}],["$","span",null,{"className":"px-3 py-1 text-sm rounded bg-gray-100 dark:bg-gray-800","children":"blog"}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L17","null",{"href":"/tags/null","className":"inline-block rounded transition-colors px-2 py-0.5 text-xs bg-blue-100 text-blue-800 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800","children":null}]]}]]}],[null,["$","$L18",null,{"theme":"fancy"}],["$","section",null,{"className":"markdown-body-fancy max-w-3xl","dangerouslySetInnerHTML":{"__html":"$19"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
16:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
