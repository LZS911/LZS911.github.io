1:"$Sreact.fragment"
2:I[996,["874","static/chunks/874-0197bf8342d89979.js","766","static/chunks/766-28cafc2b8349fbd8.js","177","static/chunks/app/layout-bb1da1aafb2c343b.js"],"default"]
3:I[7555,[],""]
4:I[1901,["874","static/chunks/874-0197bf8342d89979.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
5:I[1295,[],""]
6:I[9543,["874","static/chunks/874-0197bf8342d89979.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/e948a5c1bf791e9e.css","style"]
:HL["/_next/static/css/36a97ca7ae61047e.css","style"]
:HL["/_next/static/css/cb28a8db79c7a247.css","style"]
:HL["/_next/static/css/90e48aee015d076a.css","style"]
0:{"P":null,"b":"zqV1dHPRggiwu9nwtjnlM","p":"","c":["","posts","work-review"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","work-review","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e948a5c1bf791e9e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","div",null,{"className":"min-h-screen","children":[["$","$L2",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","work-review","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/36a97ca7ae61047e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/cb28a8db79c7a247.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/90e48aee015d076a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","PKgE0nr3SjM4C5_PbG6gx",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:"$Sreact.suspense"
14:I[4911,[],"AsyncMetadata"]
9:["$","$13",null,{"fallback":null,"children":["$","$L14",null,{"promise":"$@15"}]}]
c:null
16:T1d71,<h2 id="前端代码覆盖率"><a aria-hidden="true" tabindex="-1" href="#前端代码覆盖率"><span class="icon icon-link"></span></a><a href="https://juejin.cn/post/7022928631756226591">前端代码覆盖率</a></h2>
<p>实现代码插桩插件: <code>babel-plugin-istanbul</code></p>
<h3 id="具体方案"><a aria-hidden="true" tabindex="-1" href="#具体方案"><span class="icon icon-link"></span></a>具体方案</h3>
<ol>
<li>
<p>确定当前环境是否需要收集代码覆盖率</p>
</li>
<li>
<p>加载 <code>babel-plugin-istanbul</code> 插件, 获得覆盖率(一般保存在 <code>window.__coverage__</code> 中)</p>
</li>
<li>
<p>上传覆盖率到服务端</p>
</li>
<li>
<p>服务端展示</p>
</li>
</ol>
<p>这里重点主要放在前三步, 实现方案</p>
<h3 id="webpack-项目方案"><a aria-hidden="true" tabindex="-1" href="#webpack-项目方案"><span class="icon icon-link"></span></a><code>webpack</code> 项目方案</h3>
<ol>
<li>
<p>在启动服务或者打包时(<code>start、build</code>)时添加自定义 <code>options</code>, 然后再通过 <code>process.argv</code> 判断是否存在该 <code>options</code></p>
<pre><code class="hljs language-json"><span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
   <span class="hljs-attr">"coverage-build"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"node scripts/build.js --coverageReport=true"</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre>
</li>
<li>
<p>正常的加载 <code>babel</code> 插件模式, 需要判断当前环境是否为收集覆盖率环境</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">if</span> (isCoverageReport) {
  babelPlugins.<span class="hljs-title function_">push</span>([
    <span class="hljs-string">'istanbul'</span>,
    {
      <span class="hljs-attr">exclude</span>: [<span class="hljs-string">'./node_modules/*'</span>],
    },
  ]);
}
</code></pre>
</li>
<li>
<p>轮询调用接口上传 <code>window.__coverage__</code> 中的内容, 同样需要注意的是只有在收集覆盖率环境中才会执行这段代码</p>
<pre><code class="hljs language-javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">entry</span>: [
    isCoverageReport &#x26;&#x26; <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">'../coverageScript'</span>), <span class="hljs-comment">//上传覆盖率代码</span>
    appIndexJs, <span class="hljs-comment">//项目入口文件</span>
  ],
};
</code></pre>
</li>
</ol>
<h3 id="vite-项目方案"><a aria-hidden="true" tabindex="-1" href="#vite-项目方案"><span class="icon icon-link"></span></a><code>vite</code> 项目方案</h3>
<ol>
<li>
<p>利用 <code>vite</code> 的 <a href="https://cn.vitejs.dev/guide/env-and-mode.html">mode options</a>, 指定当前环境的 <code>mode</code>, 在 <code>vite.config.js</code> 中判断当前 <code>mode</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =></span> {
  <span class="hljs-keyword">var</span> isCoverage = config.<span class="hljs-property">mode</span> === <span class="hljs-string">'coverage'</span>;
  <span class="hljs-keyword">var</span> isDebug = config.<span class="hljs-property">mode</span> === <span class="hljs-string">'development'</span>;
  <span class="hljs-keyword">var</span> isProduction = config.<span class="hljs-property">mode</span> === <span class="hljs-string">'production'</span>;

  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">//....</span>
  }
}
</code></pre>
</li>
<li>
<p>同样是正常的加载 <code>babel</code> 插件</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">//....</span>
<span class="hljs-keyword">return</span> {
  <span class="hljs-comment">//...</span>
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-title function_">react</span>({
      <span class="hljs-attr">babel</span>: {
        <span class="hljs-attr">plugins</span>: isCoverage ? [<span class="hljs-string">'istanbul'</span>] : [],
      },
    }),
  ],
};
</code></pre>
</li>
<li>
<p>虽然 <code>vite.config</code> 中也提供了 <code>rollupOptions</code> , 能够类似 <code>webpack</code> 中自定义指定入口文件, 但是 <code>vite</code> 的开发服务器使用的 <code>esBuild</code>, 这样便没法使用开发环境测试在不同的环境中是否有加载上传覆盖率的代码. 所以, 这里可以换个思路使用条件编译来实现该需求.</p>
<p>一个简单的 <code>vite</code> 实现条件编译的插件 <a href="https://www.npmjs.com/package/vite-plugin-conditional-compile">https://www.npmjs.com/package/vite-plugin-conditional-compile</a></p>
<p>最后只需要在项目入口文件中添加该段代码即可</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* IFTRUE_isCoverage */</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'../scripts/coverageScript'</span>;
<span class="hljs-comment">/*FITRUE_isCoverage*/</span>
</code></pre>
</li>
</ol>
<h2 id="鼠标移到表格的操作列的更多按钮的下拉时依然保持-hover-效果"><a aria-hidden="true" tabindex="-1" href="#鼠标移到表格的操作列的更多按钮的下拉时依然保持-hover-效果"><span class="icon icon-link"></span></a>鼠标移到表格的操作列的更多按钮的下拉时依然保持 hover 效果</h2>
<p>主要思路: 将下拉菜单与表格当前行绑定, 下拉菜单打开时给当前行设置 class, 让其具有 hover 效果.</p>
<p>第一个思路:</p>
<p>设置一个 <code>currentHoverData</code> 的状态, 当 <code>dropdown</code> 打开时设置成当前行数据, 关闭时置成 <code>null</code>, 再通过表格的 <code>rowClassName</code> 来给每一行数据设置一个 <code>class</code>, 若当前行数据与 <code>currentHoverData</code> 能匹配上则给其具有 <code>hover</code> 效果的 <code>class</code>, 来实现鼠标移走后也能有 <code>hover</code> 效果.</p>
<p>弊端:</p>
<ol>
<li>显而易见的缺陷是当表格数据量过大时, 每一行数据都要去进行计算, 造成性能问题.</li>
<li>因为下拉菜单的组件中并没有办法获取当前行数据, 只能去修改所有页面的 <code>tableHeader.tsx</code>文件, 这也太蠢了...</li>
</ol>
<p>第二个思路:</p>
<p>主题思路没有发生变化, 主要的变化是怎样将当前打开的这个下拉菜单与当前行绑定. 这里使用的是通过 <code>element</code> 之间的联系来进行绑定.</p>
<p>找到下拉菜单与表格行的公共元素, 即触发下拉菜单显示的按钮, 它是存在于表格行中的. 通过找该元素的第一个节点类型是 <code>TR</code> 的父节点, 该元素即为需要显示 <code>hover</code> 效果的当前列, 后续给其添加 <code>class</code> 即可.</p>
<p>在处理这个需求一直想的是怎样通过 <strong>数据</strong> 来将下拉菜单与表格行数据进行绑定, 并没有去考虑使用 <code>javascript</code> 的一些操作元素的原生方法来进行处理, 于是陷入了一个死胡同...</p>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"work review"}]}],["$","time",null,{"dateTime":"2022-06-16","className":"text-center block my-4 text-sm opacity-60","children":"June\t16, 2022"}],[null,["$","section",null,{"className":"markdown-body-qklhk-chocolate max-w-3xl","dangerouslySetInnerHTML":{"__html":"$16"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
15:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$15:metadata","error":null,"digest":"$undefined"}
