1:"$Sreact.fragment"
2:I[996,["874","static/chunks/874-0197bf8342d89979.js","766","static/chunks/766-28cafc2b8349fbd8.js","177","static/chunks/app/layout-bb1da1aafb2c343b.js"],"default"]
3:I[7555,[],""]
4:I[1901,["874","static/chunks/874-0197bf8342d89979.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
5:I[1295,[],""]
6:I[9543,["874","static/chunks/874-0197bf8342d89979.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/e948a5c1bf791e9e.css","style"]
:HL["/_next/static/css/36a97ca7ae61047e.css","style"]
:HL["/_next/static/css/cb28a8db79c7a247.css","style"]
:HL["/_next/static/css/90e48aee015d076a.css","style"]
0:{"P":null,"b":"zqV1dHPRggiwu9nwtjnlM","p":"","c":["","posts","%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e948a5c1bf791e9e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","div",null,{"className":"min-h-screen","children":[["$","$L2",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/36a97ca7ae61047e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/cb28a8db79c7a247.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/90e48aee015d076a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","ehbMKQHfhGMTS5V4RBKK9",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:"$Sreact.suspense"
14:I[4911,[],"AsyncMetadata"]
9:["$","$13",null,{"fallback":null,"children":["$","$L14",null,{"promise":"$@15"}]}]
c:null
16:T1cb4,<h3 id="粉刷房间"><a aria-hidden="true" tabindex="-1" href="#粉刷房间"><span class="icon icon-link"></span></a>粉刷房间</h3>
<hr>
<h4 id="题目描述"><a aria-hidden="true" tabindex="-1" href="#题目描述"><span class="icon icon-link"></span></a>题目描述</h4>
<pre><code>假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。

当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。

例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。

请计算出粉刷完所有房子最少的花费成本。
</code></pre>
<h4 id="解题思路"><a aria-hidden="true" tabindex="-1" href="#解题思路"><span class="icon icon-link"></span></a>解题思路</h4>
<ol>
<li>递归暴力法</li>
</ol>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minCost</span>(<span class="hljs-params"><span class="hljs-attr">costs</span>: <span class="hljs-built_in">number</span>[][]</span>) {
  <span class="hljs-keyword">const</span> len = costs.<span class="hljs-property">length</span>;

  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">1</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(...costs[<span class="hljs-number">0</span>]);
  }

  <span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">prevIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">res</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">number</span> =></span> {
    <span class="hljs-keyword">if</span> (count === len) {
      <span class="hljs-keyword">return</span> res;
    }
    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>&#x3C;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>[]>([
      [<span class="hljs-number">0</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]],
      [<span class="hljs-number">1</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]],
      [<span class="hljs-number">2</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]],
    ]);
    <span class="hljs-keyword">const</span> arr = map.<span class="hljs-title function_">get</span>(prevIndex)!;
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(...arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> <span class="hljs-title function_">fn</span>(v, count + <span class="hljs-number">1</span>, res + costs[count][v])));
  };

  <span class="hljs-keyword">const</span> r = <span class="hljs-title function_">fn</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, costs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);
  <span class="hljs-keyword">const</span> g = <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, costs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);
  <span class="hljs-keyword">const</span> b = <span class="hljs-title function_">fn</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, costs[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]);
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, g, b);
}
</code></pre>
<p>不需要思考任何算法的一种方式, 直接递归计算出所有可能, 但是中间会包含很多重复计算, 执行 <code>LeetCode</code> 测试时会超时. 所以需要进一步思考最优解.</p>
<ol start="2">
<li>动态规划</li>
</ol>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minCost</span>(<span class="hljs-params"><span class="hljs-attr">costs</span>: <span class="hljs-built_in">number</span>[][]</span>) {
  <span class="hljs-keyword">let</span> [r, b, g] = costs[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &#x3C; costs.<span class="hljs-property">length</span>; ++i) {
    [r, b, g] = [
      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(b, g) + costs[i][<span class="hljs-number">0</span>],
      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, g) + costs[i][<span class="hljs-number">1</span>],
      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, b) + costs[i][<span class="hljs-number">2</span>],
    ];
  }
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, g, b);
}
</code></pre>
<p>大致思路:</p>
<ol>
<li>定义变量 r、b、g 分别表示粉刷至某一间房时红色、蓝色、绿色所需粉刷的最小花费</li>
</ol>
<ul>
<li>let [r, b, g] = costs[0] 即表示粉刷第一间时的最小花费</li>
</ul>
<ol start="2">
<li>从第二间房开始遍历, 第二间房可粉刷三种任意颜色, 但限制条件为粉刷红色时, 前一间房子的粉刷只能为绿色或蓝色, 依次类推, 得到</li>
</ol>
<pre><code class="hljs language-typescript">[r, b, g] = [
  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(b, g) + costs[i][<span class="hljs-number">0</span>],
  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, g) + costs[i][<span class="hljs-number">1</span>],
  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(r, b) + costs[i][<span class="hljs-number">2</span>],
];
</code></pre>
<p><strong>这里使用了 ES6 的数组解构, 类似于对象解构, 赋值语句左侧为粉刷到第 <code>i</code> 间房对应某一种颜色时的总最小花费, 右侧 <code>Math.min(b, g)</code> 表示粉刷到上一间房使用蓝色或绿色时的最小花费, <code>costs[i][0]</code> 表示粉刷第 <code>i</code>间房时使用红色的情况, 然后继续赋值给 r, 后续依次类推. 当循环结束时, 最后得到的 <code>r、b、g</code> 即为最后一间房子粉刷某一种情况的总花费, 最后返回最小值即可.</strong></p>
<hr>
<h3 id="todo持续更新"><a aria-hidden="true" tabindex="-1" href="#todo持续更新"><span class="icon icon-link"></span></a>.........<em>todo(持续更新)</em></h3>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"算法练习之动态规划"}]}],["$","time",null,{"dateTime":"2021-11-12","className":"text-center block my-4 text-sm opacity-60","children":"November\t12, 2021"}],[null,["$","section",null,{"className":"markdown-body-awesome-green max-w-3xl","dangerouslySetInnerHTML":{"__html":"$16"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
15:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$15:metadata","error":null,"digest":"$undefined"}
