1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-90f68e0a3827b559.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-90f68e0a3827b559.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/60adccb42f39203c.css","style"]
:HL["/_next/static/css/c7f6e508dc13ee25.css","style"]
0:{"P":null,"b":"fPyRDf3jU8EaKreMEXeMB","p":"","c":["","posts","5e2289e7df89d458df4f02f1"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","5e2289e7df89d458df4f02f1","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/60adccb42f39203c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c7f6e508dc13ee25.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","5e2289e7df89d458df4f02f1","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","ogmeLMsQHzOuxKPANEdXZ",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[2034,["874","static/chunks/874-90f68e0a3827b559.js","296","static/chunks/296-93bf38127a29d878.js","766","static/chunks/766-3404ce8492c1c2aa.js","846","static/chunks/846-5073d6248f7e4d01.js","651","static/chunks/app/(article)/layout-0113e097a12c4d28.js"],"default"]
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://vercel.com/","target":"_blank","children":"Vercel"}]]}]]}],false]}]}]
9:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
c:null
17:I[5099,["874","static/chunks/874-90f68e0a3827b559.js","296","static/chunks/296-93bf38127a29d878.js","766","static/chunks/766-3404ce8492c1c2aa.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-15870e626cfa21a8.js"],"ThemeLoader"]
18:T24d1,<h2 id="前言"><a aria-hidden="true" tabindex="-1" href="#前言"><span class="icon icon-link"></span></a>前言</h2>
<p>作为前端工程师，我们每天都在与各种包管理工具打交道。从最初的npm，到后来的yarn，再到现在的pnpm，每一次技术演进都在尝试解决前端项目中依赖管理的痛点。今天我们要聊的是yarn的一个新功能——Plug'n'Play（PnP）。</p>
<h2 id="什么是yarn-pnp"><a aria-hidden="true" tabindex="-1" href="#什么是yarn-pnp"><span class="icon icon-link"></span></a>什么是Yarn PnP？</h2>
<h3 id="传统node_modules的问题"><a aria-hidden="true" tabindex="-1" href="#传统node_modules的问题"><span class="icon icon-link"></span></a>传统node_modules的问题</h3>
<p>在深入了解PnP之前，我们先来看看传统的<code>node_modules</code>目录存在哪些问题：</p>
<ol>
<li><strong>磁盘空间占用巨大</strong>：每个项目都有自己的<code>node_modules</code>，导致大量重复文件</li>
<li><strong>安装速度慢</strong>：需要创建大量的文件和目录</li>
<li><strong>依赖解析复杂</strong>：Node.js的模块解析算法需要遍历整个文件系统</li>
<li><strong>幽灵依赖问题</strong>：可能访问到未声明的依赖</li>
</ol>
<h3 id="pnp的解决方案"><a aria-hidden="true" tabindex="-1" href="#pnp的解决方案"><span class="icon icon-link"></span></a>PnP的解决方案</h3>
<p>Yarn PnP通过一种全新的方式来管理依赖：</p>
<ul>
<li><strong>去除node_modules</strong>：完全抛弃传统的<code>node_modules</code>目录</li>
<li><strong>依赖映射表</strong>：使用<code>.pnp.cjs</code>文件来维护依赖关系映射</li>
<li><strong>运行时解析</strong>：通过自定义的解析器来定位依赖包</li>
</ul>
<h2 id="yarn版本演进"><a aria-hidden="true" tabindex="-1" href="#yarn版本演进"><span class="icon icon-link"></span></a>Yarn版本演进</h2>
<p>需要特别注意的是，yarn 分为两个主要版本：</p>
<ul>
<li><strong>Yarn v1 (Classic)</strong>：传统版本，维护在原始仓库中</li>
<li><strong>Yarn v2+ (Berry)</strong>：全新重写的版本，代码仓库为 <a href="https://github.com/yarnpkg/berry">yarnpkg/berry</a></li>
</ul>
<p>我们将在Berry版本中来演示该功能。</p>
<h2 id="配置yarn-pnp"><a aria-hidden="true" tabindex="-1" href="#配置yarn-pnp"><span class="icon icon-link"></span></a>配置Yarn PnP</h2>
<h3 id="第一步升级到berry版本"><a aria-hidden="true" tabindex="-1" href="#第一步升级到berry版本"><span class="icon icon-link"></span></a>第一步：升级到Berry版本</h3>
<p>有两种方式来升级yarn：</p>
<h4 id="方式一直接升级"><a aria-hidden="true" tabindex="-1" href="#方式一直接升级"><span class="icon icon-link"></span></a>方式一：直接升级</h4>
<pre><code class="hljs language-bash">yarn <span class="hljs-built_in">set</span> version stable
</code></pre>
<h4 id="方式二使用corepack推荐"><a aria-hidden="true" tabindex="-1" href="#方式二使用corepack推荐"><span class="icon icon-link"></span></a>方式二：使用Corepack（推荐）</h4>
<pre><code class="hljs language-bash">corepack <span class="hljs-built_in">enable</span>
</code></pre>
<p>Corepack是Node.js官方提供的包管理器版本管理工具，能够自动管理yarn、npm、pnpm等工具的版本。</p>
<h3 id="第二步验证版本"><a aria-hidden="true" tabindex="-1" href="#第二步验证版本"><span class="icon icon-link"></span></a>第二步：验证版本</h3>
<pre><code class="hljs language-bash">yarn --version
</code></pre>
<p>确保版本号为2.0或更高。</p>
<h3 id="第三步配置pnp模式"><a aria-hidden="true" tabindex="-1" href="#第三步配置pnp模式"><span class="icon icon-link"></span></a>第三步：配置PnP模式</h3>
<p>创建yarn配置文件<code>.yarnrc.yml</code>：</p>
<pre><code class="hljs language-bash">yarn config <span class="hljs-built_in">set</span> nodeLinker pnp
</code></pre>
<p>此命令会自动在项目根目录创建<code>.yarnrc.yml</code>文件，并写入配置：</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">nodeLinker:</span> <span class="hljs-string">pnp</span>
</code></pre>
<h3 id="第四步安装依赖"><a aria-hidden="true" tabindex="-1" href="#第四步安装依赖"><span class="icon icon-link"></span></a>第四步：安装依赖</h3>
<pre><code class="hljs language-bash">yarn install
</code></pre>
<p>安装完成后，你会发现项目中出现了两个重要文件：</p>
<ul>
<li><code>.pnp.cjs</code>：依赖映射表，包含所有包的位置信息</li>
<li><code>.pnp.loader.mjs</code>：ES模块加载器</li>
</ul>
<h2 id="解决typescript集成问题"><a aria-hidden="true" tabindex="-1" href="#解决typescript集成问题"><span class="icon icon-link"></span></a>解决TypeScript集成问题</h2>
<h3 id="问题描述"><a aria-hidden="true" tabindex="-1" href="#问题描述"><span class="icon icon-link"></span></a>问题描述</h3>
<p>启用PnP后，TypeScript可能无法正确解析依赖路径，导致IDE中出现类型错误。这是因为TypeScript仍然使用传统的模块解析策略。</p>
<h3 id="解决方案"><a aria-hidden="true" tabindex="-1" href="#解决方案"><span class="icon icon-link"></span></a>解决方案</h3>
<p>安装编辑器SDK来支持PnP：</p>
<h4 id="对于vscodecursor用户"><a aria-hidden="true" tabindex="-1" href="#对于vscodecursor用户"><span class="icon icon-link"></span></a>对于VSCode/Cursor用户</h4>
<pre><code class="hljs language-bash">yarn dlx @yarnpkg/sdks vscode
</code></pre>
<h4 id="对于其他编辑器"><a aria-hidden="true" tabindex="-1" href="#对于其他编辑器"><span class="icon icon-link"></span></a>对于其他编辑器</h4>
<pre><code class="hljs language-bash"><span class="hljs-comment"># WebStorm</span>
yarn dlx @yarnpkg/sdks webstorm

<span class="hljs-comment"># Vim</span>
yarn dlx @yarnpkg/sdks vim
</code></pre>
<p>安装完成后，项目中会生成<code>.yarn/sdk</code>目录，包含了适配各种开发工具的配置文件。</p>
<h2 id="pnp的优势"><a aria-hidden="true" tabindex="-1" href="#pnp的优势"><span class="icon icon-link"></span></a>PnP的优势</h2>
<h3 id="1-更快的安装速度"><a aria-hidden="true" tabindex="-1" href="#1-更快的安装速度"><span class="icon icon-link"></span></a>1. 更快的安装速度</h3>
<p>由于不需要创建<code>node_modules</code>目录和复制文件，安装速度显著提升。</p>
<h3 id="2-更小的磁盘占用"><a aria-hidden="true" tabindex="-1" href="#2-更小的磁盘占用"><span class="icon icon-link"></span></a>2. 更小的磁盘占用</h3>
<p>所有依赖都存储在全局缓存中，项目只保留映射关系。</p>
<h3 id="3-更严格的依赖管理"><a aria-hidden="true" tabindex="-1" href="#3-更严格的依赖管理"><span class="icon icon-link"></span></a>3. 更严格的依赖管理</h3>
<p>消除了幽灵依赖问题，只能访问package.json中明确声明的依赖。</p>
<h3 id="4-更好的确定性"><a aria-hidden="true" tabindex="-1" href="#4-更好的确定性"><span class="icon icon-link"></span></a>4. 更好的确定性</h3>
<p>依赖解析完全基于映射表，避免了文件系统遍历的不确定性。</p>
<h2 id="实践经验与注意事项"><a aria-hidden="true" tabindex="-1" href="#实践经验与注意事项"><span class="icon icon-link"></span></a>实践经验与注意事项</h2>
<h3 id="1-迁移现有项目"><a aria-hidden="true" tabindex="-1" href="#1-迁移现有项目"><span class="icon icon-link"></span></a>1. 迁移现有项目</h3>
<p>如果你有现有的项目需要迁移到PnP，建议：</p>
<ul>
<li>先备份现有的<code>node_modules</code></li>
<li>删除<code>node_modules</code>和<code>yarn.lock</code></li>
<li>重新配置并安装依赖</li>
</ul>
<h3 id="2-兼容性问题"><a aria-hidden="true" tabindex="-1" href="#2-兼容性问题"><span class="icon icon-link"></span></a>2. 兼容性问题</h3>
<p>某些老旧的npm包可能不兼容PnP，需要特别配置或寻找替代方案。</p>
<h3 id="3-团队协作"><a aria-hidden="true" tabindex="-1" href="#3-团队协作"><span class="icon icon-link"></span></a>3. 团队协作</h3>
<p>确保团队成员都了解PnP的工作原理，并正确配置开发环境。</p>
<h2 id="总结"><a aria-hidden="true" tabindex="-1" href="#总结"><span class="icon icon-link"></span></a>总结</h2>
<p>Yarn PnP是一个革新性的依赖管理方案，它通过彻底改变依赖存储和解析的方式，解决了传统<code>node_modules</code>的诸多问题。虽然在初期可能会遇到一些兼容性问题，但随着生态系统的不断完善，PnP将成为前端项目依赖管理的重要选择。</p>
<p>作为前端工程师，我们应该积极拥抱这些新技术，但也要在实际项目中谨慎评估其适用性。建议在新项目中尝试PnP，在现有项目中则需要充分测试后再决定是否迁移。</p>
<h2 id="参考资料"><a aria-hidden="true" tabindex="-1" href="#参考资料"><span class="icon icon-link"></span></a>参考资料</h2>
<ul>
<li><a href="https://yarnpkg.com/features/pnp">Yarn PnP官方文档</a></li>
<li><a href="https://yarnpkg.com/getting-started/editor-sdks">编辑器SDK配置指南</a></li>
<li><a href="https://github.com/yarnpkg/berry">Berry项目仓库</a></li>
</ul>
<hr>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"Yarn-Plug'n'Play"}]}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 mb-6","children":[["$","time",null,{"dateTime":"2025-07-07","className":"text-center block my-4 text-sm opacity-60","children":"July\t7, 2025"}],["$","span",null,{"className":"px-3 py-1 text-sm rounded bg-gray-100 dark:bg-gray-800","children":"blog"}],"$undefined"]}],[null,["$","$L17",null,{"theme":"fancy"}],["$","section",null,{"className":"markdown-body-fancy max-w-3xl","dangerouslySetInnerHTML":{"__html":"$18"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
16:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
