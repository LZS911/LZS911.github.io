1:"$Sreact.fragment"
2:I[996,["874","static/chunks/874-0197bf8342d89979.js","766","static/chunks/766-45f65761a5dfbf2c.js","177","static/chunks/app/layout-bb1da1aafb2c343b.js"],"default"]
3:I[7555,[],""]
4:I[1901,["874","static/chunks/874-0197bf8342d89979.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
5:I[1295,[],""]
6:I[9543,["874","static/chunks/874-0197bf8342d89979.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/aa504e0140d1beb9.css","style"]
:HL["/_next/static/css/36a97ca7ae61047e.css","style"]
:HL["/_next/static/css/cb28a8db79c7a247.css","style"]
:HL["/_next/static/css/90e48aee015d076a.css","style"]
0:{"P":null,"b":"Z9yB1QKJUCFVUxF_8PaeN","p":"","c":["","posts","Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aa504e0140d1beb9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","div",null,{"className":"min-h-screen","children":[["$","$L2",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/36a97ca7ae61047e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/cb28a8db79c7a247.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/90e48aee015d076a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","Lx869K0bCnjz450uYxdRx",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:"$Sreact.suspense"
14:I[4911,[],"AsyncMetadata"]
9:["$","$13",null,{"fallback":null,"children":["$","$L14",null,{"promise":"$@15"}]}]
c:null
17:I[3924,["766","static/chunks/766-45f65761a5dfbf2c.js","858","static/chunks/app/posts/%5Bslug%5D/page-032d0aa1acece2a1.js"],"default"]
16:T1553b,<h2 id="1-将下划线模式的-string-类型转化成驼峰类型"><a aria-hidden="true" tabindex="-1" href="#1-将下划线模式的-string-类型转化成驼峰类型"><span class="icon icon-link"></span></a>1. 将下划线模式的 string 类型转化成驼峰类型</h2>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TransformToCamelCase</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> =
  T <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span>_<span class="hljs-subst">${infer Rest}</span>`</span>
    ? <span class="hljs-string">`<span class="hljs-subst">${Left}</span><span class="hljs-subst">${TransformToCamelCase&#x3C;Capitalize&#x3C;Rest>>}</span>`</span>
    : T;

</code></pre>
<p><img src="/assets/typescript/example-1.png" alt="alt"></p>
<p>注意点:</p>
<p>需要递归继续处理剩余的部分.</p>
<h3 id="应用-当服务端定义的实体中的-key-的模式为下环线-但前端代码中需要使用驼峰模式时"><a aria-hidden="true" tabindex="-1" href="#应用-当服务端定义的实体中的-key-的模式为下环线-但前端代码中需要使用驼峰模式时"><span class="icon icon-link"></span></a>应用: 当服务端定义的实体中的 <code>key</code> 的模式为下环线, 但前端代码中需要使用驼峰模式时</h3>
<p>实现:</p>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CamelCase</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>>> = T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span>
  ? {
      [key <span class="hljs-keyword">in</span> keyof T <span class="hljs-keyword">as</span> <span class="hljs-title class_">TransformToCamelCase</span>&#x3C;
        key &#x26; <span class="hljs-built_in">string</span>
      >]: T[key] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Array</span>&#x3C;infer <span class="hljs-title class_">Element</span>>
        ? <span class="hljs-title class_">Array</span>&#x3C;
            <span class="hljs-title class_">Element</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
              ? <span class="hljs-title class_">TransformToCamelCase</span>&#x3C;<span class="hljs-title class_">Element</span>>
              : <span class="hljs-title class_">CamelCase</span>&#x3C;<span class="hljs-title class_">Element</span>>
          >
        : T[key] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>>
        ? <span class="hljs-title class_">CamelCase</span>&#x3C;T[key]>
        : T[key];
    }
  : <span class="hljs-built_in">never</span>;
</code></pre>
<p><img src="/assets/typescript/example-2.png" alt="alt"></p>
<p>注意点:</p>
<ol>
<li>当某项 <code>key</code> 的类型仍然满足 <code>Record&#x3C;string, any></code> 时, 需要递归继续.</li>
<li>因为 <code>Typescript</code> 不会去计算递归中的表达式, 所以需要加上一个一定为 <code>true</code> 的判断, 让他去执行, 也就是 <code>T extends any</code>.</li>
<li>需要注意 <code>Array</code> 的情况.</li>
</ol>
<h2 id="2-将索引类型转化为联合类型"><a aria-hidden="true" tabindex="-1" href="#2-将索引类型转化为联合类型"><span class="icon icon-link"></span></a>2. 将索引类型转化为联合类型</h2>
<ul>
<li>索引类型是一个聚合了多个元素的类型，对象、类、元组等都是索引类型, 举个栗子:</li>
</ul>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ExampleType</span> = {
  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;
  <span class="hljs-attr">sex</span>: <span class="hljs-built_in">boolean</span>;
  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;
  <span class="hljs-attr">hobbies</span>: <span class="hljs-built_in">string</span>[];
}
</code></pre>
<ul>
<li>联合类型. 顾名思义, 它是一个联合了多种类型的集合, 取值可以取其中任意一种类型.</li>
</ul>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">UnionTypes</span> = { <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> } | { <span class="hljs-attr">sex</span>: <span class="hljs-built_in">boolean</span> } | { <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>} | { <span class="hljs-attr">hobbies</span>: <span class="hljs-built_in">string</span>[] };
</code></pre>
<ul>
<li>
<p>需求: 实现一个工具类, 将 <code>ExampleType</code> 转化为 <code>UnionTypes</code></p>
</li>
<li>
<p>实现:</p>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SpiltObj</span>&#x3C;T> = {
  [key <span class="hljs-keyword">in</span> keyof T]: {
    [key2 <span class="hljs-keyword">in</span> key]:T[key2]
  }
}[keyof T]
</code></pre>
</li>
<li>
<p>拆分, 先看第一部分</p>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">SpiltObj</span>&#x3C;T> = {
  [key <span class="hljs-keyword">in</span> keyof T]: {
    [key2 <span class="hljs-keyword">in</span> key]:T[key2]
  }
}
</code></pre>
<pre><code class="hljs language-Typescript">  <span class="hljs-keyword">type</span> <span class="hljs-title class_">Res1</span> = <span class="hljs-title class_">SpiltObj</span>&#x3C;<span class="hljs-title class_">ExampleType</span>>
</code></pre>
<p><img src="/assets/typescript/example-3.png" alt="alt"></p>
<p>第二部分</p>
<pre><code class="hljs language-Typescript">  <span class="hljs-keyword">type</span> <span class="hljs-title class_">ExampleType</span> = {
    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;
    <span class="hljs-attr">sex</span>: <span class="hljs-built_in">boolean</span>;
    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;
    <span class="hljs-attr">hobbies</span>: <span class="hljs-built_in">string</span>[];
  }

  <span class="hljs-keyword">type</span> <span class="hljs-title class_">Res2</span> = <span class="hljs-title class_">ExampleType</span>[keyof <span class="hljs-title class_">ExampleType</span>]
</code></pre>
<p><img src="/assets/typescript/example-4.png" alt="alt"></p>
</li>
<li>
<p>拓展, 实现一个工具类, 拿到索性类型键值路径的联合类型</p>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Template</span> = {
  <span class="hljs-attr">aa</span>: {
    <span class="hljs-attr">bb</span>: <span class="hljs-built_in">string</span>;
  };
  <span class="hljs-attr">cc</span>: <span class="hljs-built_in">number</span>;
  <span class="hljs-attr">dd</span>: {
    <span class="hljs-attr">ee</span>: {
      <span class="hljs-attr">ff</span>: <span class="hljs-built_in">string</span>;
    }
  };
  <span class="hljs-attr">gg</span>: {
    <span class="hljs-attr">hh</span>: <span class="hljs-built_in">number</span>
  };
}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">TemplateKeyPath</span>&#x3C;T> ={
   [key <span class="hljs-keyword">in</span> keyof T]: key <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> ? T[key] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>> ? key | <span class="hljs-string">`<span class="hljs-subst">${key}</span>.<span class="hljs-subst">${TemplateKeyPath&#x3C;T[key]>}</span>`</span> : key : <span class="hljs-built_in">never</span>;
}[keyof T]

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Res3</span> = <span class="hljs-title class_">TemplateKeyPath</span>&#x3C;<span class="hljs-title class_">Template</span>>
</code></pre>
<p><img src="/assets/typescript/example-5.png" alt="alt"></p>
</li>
</ul>
<h2 id="3-使用数组长度进行数值计算"><a aria-hidden="true" tabindex="-1" href="#3-使用数组长度进行数值计算"><span class="icon icon-link"></span></a>3. 使用数组长度进行数值计算</h2>
<p>Typescript 本身是没有加减乘除运算符的, 所以需要取巧来处理数值的计算.</p>
<p>利用构造数组, 然后获取它的 <code>length</code>.</p>
<p><strong>注: 因为数组长度不会为负数, 所以这里做的数值计算只包含正整数</strong></p>
<p><img src="/assets/typescript/example-6.png" alt="alt"></p>
<p>实现运算方法之前, 先实现一个构造数组的工具类</p>
<pre><code class="hljs language-Typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">BuildArray</span>&#x3C;
  <span class="hljs-title class_">Length</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Element</span> = <span class="hljs-built_in">unknown</span>,
  <span class="hljs-title class_">Array</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = []
> = <span class="hljs-title class_">Array</span>[<span class="hljs-string">'length'</span>] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Length</span>
  ? <span class="hljs-title class_">Array</span>
  : <span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Length</span>, <span class="hljs-title class_">Element</span>, [<span class="hljs-title class_">Element</span>, ...<span class="hljs-title class_">Array</span>]>;

</code></pre>
<p><img src="/assets/typescript/example-7.png" alt="alt"></p>
<p><code>BuildArray</code> 接收三个泛形, 其中第一个参数 <code>Length</code> 为需要构造出来的数组长度, <code>Element</code> 为数组类的元素类型, 默认值为 <code>unknown</code>, <code>Array</code> 为返回结果, 用来递归处理. 如果将其转化为 <code>javascript</code> 代码, 大致如下:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildArray</span> = (<span class="hljs-params">length, element, arr = []</span>) => {
  <span class="hljs-keyword">if</span> (length === arr.<span class="hljs-property">length</span>) {
    <span class="hljs-keyword">return</span> arr;
  }

  <span class="hljs-keyword">return</span> <span class="hljs-title function_">buildArray</span>(length, element, [element, ...arr]);
};
</code></pre>
<h3 id="加法运算"><a aria-hidden="true" tabindex="-1" href="#加法运算"><span class="icon icon-link"></span></a>加法运算</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Add</span>&#x3C;<span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>> = [...<span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num1</span>>, ...<span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num2</span>>][<span class="hljs-string">'length'</span>]
</code></pre>
<p><img src="/assets/typescript/example-8.png" alt="alt"></p>
<p><img src="/assets/typescript/example-9.png" alt="alt"></p>
<h3 id="减法运算"><a aria-hidden="true" tabindex="-1" href="#减法运算"><span class="icon icon-link"></span></a>减法运算</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Subtract</span>&#x3C;
  <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>
> = <span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num1</span>> <span class="hljs-keyword">extends</span> [...<span class="hljs-attr">arr1</span>: <span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num2</span>>, ...<span class="hljs-attr">arr2</span>: infer <span class="hljs-title class_">Rest</span>]
  ? <span class="hljs-title class_">Rest</span>[<span class="hljs-string">'length'</span>]
  : <span class="hljs-built_in">never</span>;

</code></pre>
<p><img src="/assets/typescript/example-10.png" alt="alt"></p>
<p><img src="/assets/typescript/example-11.png" alt="alt"></p>
<h3 id="乘法运算"><a aria-hidden="true" tabindex="-1" href="#乘法运算"><span class="icon icon-link"></span></a>乘法运算</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Multiply</span>&#x3C;
  <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">ResultArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = []
> = <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-number">0</span>
  ? <span class="hljs-title class_">ResultArray</span>[<span class="hljs-string">'length'</span>]
  : <span class="hljs-title class_">Multiply</span>&#x3C;<span class="hljs-title class_">Num1</span>, <span class="hljs-title class_">Subtract</span>&#x3C;<span class="hljs-title class_">Num2</span>, <span class="hljs-number">1</span>>, [...<span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num1</span>>, ...<span class="hljs-title class_">ResultArray</span>]>;
</code></pre>
<p><img src="/assets/typescript/example-12.png" alt="alt"></p>
<p><img src="/assets/typescript/example-13.png" alt="alt"></p>
<h3 id="除法运算"><a aria-hidden="true" tabindex="-1" href="#除法运算"><span class="icon icon-link"></span></a>除法运算</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Divide</span>&#x3C;
  <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">ResultArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = []
> = <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-number">0</span>
  ? <span class="hljs-title class_">ResultArray</span>[<span class="hljs-string">'length'</span>]
  : <span class="hljs-title class_">Divide</span>&#x3C;<span class="hljs-title class_">Subtract</span>&#x3C;<span class="hljs-title class_">Num1</span>, <span class="hljs-title class_">Num2</span>>, <span class="hljs-title class_">Num2</span>, [<span class="hljs-built_in">unknown</span>, ...<span class="hljs-title class_">ResultArray</span>]>; 
  <span class="hljs-comment">// [unknown, ...ResultArray] => [...BuildArray&#x3C;Add&#x3C;ResultArray['length'], 1> &#x26; number>]</span>

</code></pre>
<p><img src="/assets/typescript/example-14.png" alt="alt"></p>
<p><img src="/assets/typescript/example-15.png" alt="alt"></p>
<h2 id="4-判断两个正整数的大小"><a aria-hidden="true" tabindex="-1" href="#4-判断两个正整数的大小"><span class="icon icon-link"></span></a>4. 判断两个正整数的大小</h2>
<h3 id="比较是否相等"><a aria-hidden="true" tabindex="-1" href="#比较是否相等"><span class="icon icon-link"></span></a>比较是否相等</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberIsEqual</span>&#x3C;<span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>> = <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Num2</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;
</code></pre>
<p><img src="/assets/typescript/example-16.png" alt="alt"></p>
<p><img src="/assets/typescript/example-17.png" alt="alt"></p>
<h3 id="判断是否大于"><a aria-hidden="true" tabindex="-1" href="#判断是否大于"><span class="icon icon-link"></span></a>判断是否大于</h3>
<p>大致思路: 利用构造数组, 递归对构造出来的数组进行 Pop 操作, 通过判断数组的长度是否为 0 来确定大小.</p>
<p>在开始实现钱先实现几个工具类, 减少重复代码和提高可读性.</p>
<p><strong>注: 后续使用到同名工具类时默认为这几个类型</strong></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Or</span>&#x3C;<span class="hljs-title class_">Case1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">boolean</span>, <span class="hljs-title class_">Case2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">boolean</span>> = <span class="hljs-title class_">Case1</span> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span>
  ? <span class="hljs-literal">true</span>
  : <span class="hljs-title class_">Case2</span> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span>
  ? <span class="hljs-literal">true</span>
  : <span class="hljs-literal">false</span>;

<span class="hljs-keyword">type</span> <span class="hljs-title class_">ArrayPop</span>&#x3C;<span class="hljs-title class_">Arr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[]> = <span class="hljs-title class_">Arr</span> <span class="hljs-keyword">extends</span> [...infer <span class="hljs-title class_">Left</span>, infer <span class="hljs-title class_">Last</span>]
  ? <span class="hljs-title class_">Left</span>
  : <span class="hljs-built_in">never</span>;

<span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberIsZero</span>&#x3C;<span class="hljs-title class_">Num</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>> = <span class="hljs-title class_">Num</span> <span class="hljs-keyword">extends</span> <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;
</code></pre>
<p>最终代码</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberIsCompare</span>&#x3C;
  <span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>,
  <span class="hljs-title class_">Arr1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = <span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num1</span>>,
  <span class="hljs-title class_">Arr2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = <span class="hljs-title class_">BuildArray</span>&#x3C;<span class="hljs-title class_">Num2</span>>
> = <span class="hljs-title class_">NumberIsEqual</span>&#x3C;<span class="hljs-title class_">Num1</span>, <span class="hljs-title class_">Num2</span>> <span class="hljs-keyword">extends</span> <span class="hljs-literal">false</span>
  ? <span class="hljs-title class_">Or</span>&#x3C;<span class="hljs-title class_">NumberIsZero</span>&#x3C;<span class="hljs-title class_">Arr1</span>[<span class="hljs-string">'length'</span>]>, <span class="hljs-title class_">NumberIsZero</span>&#x3C;<span class="hljs-title class_">Arr2</span>[<span class="hljs-string">'length'</span>]>> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span>
    ? <span class="hljs-title class_">NumberIsZero</span>&#x3C;<span class="hljs-title class_">Arr1</span>[<span class="hljs-string">'length'</span>]> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span>
      ? <span class="hljs-literal">false</span>
      : <span class="hljs-literal">true</span>
    : <span class="hljs-title class_">NumberIsCompare</span>&#x3C;<span class="hljs-title class_">ArrayPop</span>&#x3C;<span class="hljs-title class_">Arr1</span>>[<span class="hljs-string">'length'</span>], <span class="hljs-title class_">ArrayPop</span>&#x3C;<span class="hljs-title class_">Arr2</span>>[<span class="hljs-string">'length'</span>]>
  : <span class="hljs-literal">false</span>;

</code></pre>
<p><img src="/assets/typescript/example-18.png" alt="alt">
<img src="/assets/typescript/example-19.png" alt="alt">
<img src="/assets/typescript/example-20.png" alt="alt">
<img src="/assets/typescript/example-21.png" alt="alt">
<img src="/assets/typescript/example-22.png" alt="alt"></p>
<h3 id="判断是否小与"><a aria-hidden="true" tabindex="-1" href="#判断是否小与"><span class="icon icon-link"></span></a>判断是否小与</h3>
<p>过滤掉相等情况后对大于取反就好了.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberIsLess</span>&#x3C;<span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>> = <span class="hljs-title class_">NumberIsEqual</span>&#x3C;
  <span class="hljs-title class_">Num1</span>,
  <span class="hljs-title class_">Num2</span>
> <span class="hljs-keyword">extends</span> <span class="hljs-literal">false</span>
  ? <span class="hljs-title class_">NumberIsCompare</span>&#x3C;<span class="hljs-title class_">Num1</span>, <span class="hljs-title class_">Num2</span>> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span>
    ? <span class="hljs-literal">false</span>
    : <span class="hljs-literal">true</span>
  : <span class="hljs-literal">false</span>;
</code></pre>
<h2 id="5-实现-indexof---从左往右查找子串的位置"><a aria-hidden="true" tabindex="-1" href="#5-实现-indexof---从左往右查找子串的位置"><span class="icon icon-link"></span></a>5. 实现 IndexOf - 从左往右查找子串的位置</h2>
<p>核心原理</p>
<p><img src="/assets/typescript/example-23.png" alt="alt"></p>
<p>最后实现一个获取字符串长度的工具类型即可获得最终结果</p>
<p><strong>注意: <code>['a']['length']的值为数组长度, 而 'aa'['length']</code> 的值为 number</strong></p>
<p>所以我们可以将字符串切割为数组, 然后来获取长度.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Split</span>&#x3C;
  S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">Element</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>,
  <span class="hljs-title class_">ResultArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>[] = []
> = S <span class="hljs-keyword">extends</span> <span class="hljs-string">''</span>
  ? [...<span class="hljs-title class_">ResultArray</span>, S]
  : S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${Element}</span><span class="hljs-subst">${infer Rest}</span>`</span>
    ? <span class="hljs-title class_">Split</span>&#x3C;<span class="hljs-title class_">Rest</span>, <span class="hljs-title class_">Element</span>, [...<span class="hljs-title class_">ResultArray</span>, <span class="hljs-title class_">Left</span>]>
    : [...<span class="hljs-title class_">ResultArray</span>, S];
</code></pre>
<p><img src="/assets/typescript/example-24.png" alt="alt">
<img src="/assets/typescript/example-25.png" alt="alt">
<img src="/assets/typescript/example-26.png" alt="alt"></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetStringLength</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> =  <span class="hljs-title class_">Split</span>&#x3C;S> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">never</span> ? <span class="hljs-built_in">never</span> : <span class="hljs-title class_">Split</span>&#x3C;S>[<span class="hljs-string">'length'</span>]
</code></pre>
<p>最后结果</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">IndexOf</span>&#x3C;
  <span class="hljs-variable constant_">S1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-variable constant_">S2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">Len1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span> = <span class="hljs-title class_">GetStringLength</span>&#x3C;<span class="hljs-variable constant_">S1</span>>,
  <span class="hljs-title class_">Len2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span> = <span class="hljs-title class_">GetStringLength</span>&#x3C;<span class="hljs-variable constant_">S2</span>>
> = <span class="hljs-title class_">Or</span>&#x3C;<span class="hljs-title class_">NumberIsCompare</span>&#x3C;<span class="hljs-title class_">Len1</span>, <span class="hljs-title class_">Len2</span>>, <span class="hljs-title class_">NumberIsEqual</span>&#x3C;<span class="hljs-title class_">Len1</span>, <span class="hljs-title class_">Len2</span>>> <span class="hljs-keyword">extends</span> <span class="hljs-literal">false</span>
  ? -<span class="hljs-number">1</span>
  : <span class="hljs-variable constant_">S1</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${S2}</span><span class="hljs-subst">${infer Rest}</span>`</span>
  ? <span class="hljs-title class_">GetStringLength</span>&#x3C;<span class="hljs-title class_">Left</span>>
  : -<span class="hljs-number">1</span>;
</code></pre>
<p><img src="/assets/typescript/example-27.png" alt="alt">
<img src="/assets/typescript/example-28.png" alt="alt">
<img src="/assets/typescript/example-29.png" alt="alt">
<img src="/assets/typescript/example-30.png" alt="alt"></p>
<h2 id="6-实现字符串的-replace-与-replaceall"><a aria-hidden="true" tabindex="-1" href="#6-实现字符串的-replace-与-replaceall"><span class="icon icon-link"></span></a>6. 实现字符串的 Replace 与 ReplaceAll</h2>
<ol>
<li>
<p><code>Replace</code></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Replace</span>&#x3C;
  <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">MatchStr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">ReplaceStr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
> = <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${MatchStr}</span><span class="hljs-subst">${infer Rest}</span>`</span>
  ? <span class="hljs-string">`<span class="hljs-subst">${Left}</span><span class="hljs-subst">${ReplaceStr}</span><span class="hljs-subst">${Rest}</span>`</span>
  : <span class="hljs-title class_">Str</span>;
</code></pre>
<p><img src="/assets/typescript/example-31.png" alt="alt">
<img src="/assets/typescript/example-32.png" alt="alt">
<img src="/assets/typescript/example-33.png" alt="alt"></p>
</li>
<li>
<p><code>ReplaceAll</code></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ReplaceAll</span>&#x3C;
  <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">MatchStr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,
  <span class="hljs-title class_">ReplaceStr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
> = <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${MatchStr}</span><span class="hljs-subst">${infer Rest}</span>`</span>
  ? <span class="hljs-title class_">Rest</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left2}</span><span class="hljs-subst">${MatchStr}</span><span class="hljs-subst">${infer Rest2}</span>`</span>
    ? <span class="hljs-title class_">ReplaceAll</span>&#x3C;<span class="hljs-string">`<span class="hljs-subst">${Left}</span><span class="hljs-subst">${ReplaceStr}</span><span class="hljs-subst">${Rest}</span>`</span>, <span class="hljs-title class_">MatchStr</span>, <span class="hljs-title class_">ReplaceStr</span>>
    : <span class="hljs-string">`<span class="hljs-subst">${Left}</span><span class="hljs-subst">${ReplaceStr}</span><span class="hljs-subst">${Rest}</span>`</span>
  : <span class="hljs-title class_">Str</span>;
</code></pre>
<p><img src="/assets/typescript/example-34.png" alt="alt">
<img src="/assets/typescript/example-35.png" alt="alt"></p>
</li>
</ol>
<h2 id="7-实现类似-vue-的类型支持的简化版本"><a aria-hidden="true" tabindex="-1" href="#7-实现类似-vue-的类型支持的简化版本"><span class="icon icon-link"></span></a>7. 实现类似 Vue 的类型支持的简化版本</h2>
<p>通过提供一个函数SimpleVue（类似于Vue.extend或defineComponent），它应该正确地推断出 computed 和 methods 内部的this类型。</p>
<p>在此挑战中，我们假设SimpleVue接受只带有data，computed和methods字段的Object作为其唯一的参数，</p>
<p>data是一个简单的函数，它返回一个提供上下文this的对象，但是你无法在data中获取其他的计算属性或方法。</p>
<p>computed是将this作为上下文的函数的对象，进行一些计算并返回结果。在上下文中应暴露计算出的值而不是函数。</p>
<p>methods是函数的对象，其上下文也为this。函数中可以访问data，computed以及其他methods中的暴露的字段。 computed与methods的不同之处在于methods在上下文中按原样暴露为函数。</p>
<p>SimpleVue的返回值类型可以是任意的。</p>
<pre><code class="hljs language-JavaScript"><span class="hljs-keyword">const</span> instance = <span class="hljs-title class_">SimpleVue</span>({
  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">firstname</span>: <span class="hljs-string">'Type'</span>,
      <span class="hljs-attr">lastname</span>: <span class="hljs-string">'Challenges'</span>,
      <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span>,
    }
  },
  <span class="hljs-attr">computed</span>: {
    <span class="hljs-title function_">fullname</span>(<span class="hljs-params"></span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstname</span> + <span class="hljs-string">' '</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastname</span>
    }
  },
  <span class="hljs-attr">methods</span>: {
    <span class="hljs-title function_">hi</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fullname</span>.<span class="hljs-title function_">toLowerCase</span>())
    }
  }
})

</code></pre>
<p>实现:</p>
<pre><code class="hljs language-TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Computed</span>&#x3C;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-title class_">PropertyKey</span>, <span class="hljs-function">() =></span> <span class="hljs-built_in">any</span>>> = {
  [<span class="hljs-variable constant_">CK</span> <span class="hljs-keyword">in</span> keyof C]: <span class="hljs-title class_">ReturnType</span>&#x3C;C[<span class="hljs-variable constant_">CK</span>]>;
};

<span class="hljs-keyword">type</span> <span class="hljs-title class_">SimpleVueType</span>&#x3C;D <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-title class_">PropertyKey</span>, <span class="hljs-built_in">any</span>>, C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-title class_">PropertyKey</span>, <span class="hljs-built_in">any</span>>, M <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&#x3C;<span class="hljs-title class_">PropertyKey</span>, <span class="hljs-built_in">any</span>>> = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">arg</span>: {
  data:() => D;
  computed:C &#x26; ThisType&#x3C;D>;
  methods: M &#x26; ThisType&#x3C;D &#x26; M &#x26; Computed&#x3C;C>>;
}</span>) =></span> <span class="hljs-built_in">any</span>
</code></pre>
<h2 id="8-函数柯里化"><a aria-hidden="true" tabindex="-1" href="#8-函数柯里化"><span class="icon icon-link"></span></a>8. 函数柯里化</h2>
<p>Currying 是一种将带有多个参数的函数转换为每个带有一个参数的函数序列的技术。</p>
<p>例如：</p>
<pre><code class="hljs language-TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>) => a + b
<span class="hljs-keyword">const</span> three = <span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)

<span class="hljs-keyword">const</span> curriedAdd = <span class="hljs-title class_">Currying</span>(add)
<span class="hljs-keyword">const</span> five = <span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)
</code></pre>
<p>传递给 Currying 的函数可能有多个参数，您需要正确键入它。
在此挑战中，curried 函数一次仅接受一个参数。分配完所有参数后，它应返回其结果。</p>
<p>实现:</p>
<pre><code class="hljs language-TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CurryingType</span>&#x3C;T> = T <span class="hljs-title function_">extends</span> (...<span class="hljs-attr">args</span>: [infer <span class="hljs-title class_">Left</span>, ...infer <span class="hljs-title class_">Rest</span>]) => infer R
    ? <span class="hljs-title class_">Rest</span>[<span class="hljs-string">'length'</span>] <span class="hljs-keyword">extends</span> <span class="hljs-number">0</span>
        ? T
        : <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">arg</span>: <span class="hljs-title class_">Left</span></span>) =></span> <span class="hljs-title class_">CurryingType</span>&#x3C;<span class="hljs-function">(<span class="hljs-params">...<span class="hljs-attr">args</span>: <span class="hljs-title class_">Rest</span></span>) =></span> R>
    : <span class="hljs-built_in">never</span>
</code></pre>
<h2 id="9-uniontointersection"><a aria-hidden="true" tabindex="-1" href="#9-uniontointersection"><span class="icon icon-link"></span></a>9. UnionToIntersection</h2>
<p><code>type I = Union2Intersection&#x3C;'foo' | 42 | true> // expected to be 'foo' &#x26; 42 &#x26; true</code></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">UnionToFunction</span>&#x3C;T> = T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span> ? <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">arg</span>:T</span>) =></span> <span class="hljs-built_in">void</span> : <span class="hljs-built_in">never</span>;

<span class="hljs-keyword">type</span> test1 = <span class="hljs-title class_">UnionToFunction</span>&#x3C;<span class="hljs-string">"foo"</span> | <span class="hljs-number">42</span> | <span class="hljs-literal">true</span>>;<span class="hljs-comment">// (arg: "foo") => void | (arg: 42) => void | (arg: true) => void;</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">UnionToIntersection</span>&#x3C;U> = <span class="hljs-title class_">UnionToFunction</span>&#x3C;U> <span class="hljs-title function_">extends</span> (<span class="hljs-attr">arg</span>:infer T) => <span class="hljs-built_in">void</span> ? <span class="hljs-attr">T</span>:<span class="hljs-built_in">never</span>;

<span class="hljs-keyword">type</span> test2 = <span class="hljs-title class_">UnionToIntersection</span>&#x3C;{<span class="hljs-attr">a</span>:<span class="hljs-built_in">string</span>} | {<span class="hljs-attr">b</span>:<span class="hljs-built_in">number</span>} | {<span class="hljs-attr">c</span>:<span class="hljs-built_in">boolean</span>}>;<span class="hljs-comment">// {a: string} &#x26; {b: number} &#x26; {c: boolean}</span>

</code></pre>
<p>解题思路: <a href="https://github.com/type-challenges/type-challenges/issues?q=label%3A55+label%3Aanswer+sort%3Areactions-%2B1-desc">https://github.com/type-challenges/type-challenges/issues?q=label%3A55+label%3Aanswer+sort%3Areactions-%2B1-desc</a></p>
<h2 id="10-getrequired-and-getoptional"><a aria-hidden="true" tabindex="-1" href="#10-getrequired-and-getoptional"><span class="icon icon-link"></span></a>10. GetRequired and GetOptional</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetRequired</span>&#x3C;T> = {[P <span class="hljs-keyword">in</span> keyof T <span class="hljs-keyword">as</span> T[P] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Required</span>&#x3C;T>[P] ? P : <span class="hljs-built_in">never</span>]:T[P]}
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetOptional</span>&#x3C;T> = {[P <span class="hljs-keyword">in</span> keyof T <span class="hljs-keyword">as</span> T[P] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Required</span>&#x3C;T>[P] ? <span class="hljs-built_in">never</span> : P]:T[P]}
</code></pre>
<h2 id="11-capitalize-words"><a aria-hidden="true" tabindex="-1" href="#11-capitalize-words"><span class="icon icon-link"></span></a>11. Capitalize Words</h2>
<p>Implement CapitalizeWords which converts the first letter of each word of a string to uppercase and leaves the rest as-is.</p>
<p>For example</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> capitalized = <span class="hljs-title class_">CapitalizeWords</span>&#x3C;<span class="hljs-string">'hello world, my friends'</span>> <span class="hljs-comment">// expected to be 'Hello World, My Friends'</span>
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CapitalizeRest</span>&#x3C;T> = T <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${infer Rest}</span>`</span> ? <span class="hljs-string">`<span class="hljs-subst">${Left}</span><span class="hljs-subst">${CapitalizeRest&#x3C;Capitalize&#x3C;Left> <span class="hljs-keyword">extends</span> Lowercase&#x3C;Left> ? Capitalize&#x3C;Rest> : Rest>}</span>`</span>

 : T;

<span class="hljs-keyword">type</span> <span class="hljs-title class_">CapitalizeWords</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = <span class="hljs-title class_">Capitalize</span>&#x3C;<span class="hljs-title class_">CapitalizeRest</span>&#x3C;S>>;
</code></pre>
<h2 id="12-camelcase"><a aria-hidden="true" tabindex="-1" href="#12-camelcase"><span class="icon icon-link"></span></a>12 CamelCase</h2>
<p>Implement CamelCase which converts snake_case string to camelCase.</p>
<p>For example</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> camelCase1 = <span class="hljs-title class_">CamelCase</span>&#x3C;<span class="hljs-string">'hello_world_with_types'</span>> <span class="hljs-comment">// expected to be 'helloWorldWithTypes'</span>
<span class="hljs-keyword">type</span> camelCase2 = <span class="hljs-title class_">CamelCase</span>&#x3C;<span class="hljs-string">'HELLO_WORLD_WITH_TYPES'</span>> <span class="hljs-comment">// expected to be same as previous one</span>
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">IsGap</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = <span class="hljs-title class_">Uppercase</span>&#x3C;T> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Lowercase</span>&#x3C;T> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;

<span class="hljs-keyword">type</span> <span class="hljs-title class_">CamelCase</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = S <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Lowercase</span>&#x3C;S>
  ? S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer L}</span>_<span class="hljs-subst">${infer C}</span><span class="hljs-subst">${infer R}</span>`</span>
    ? C <span class="hljs-keyword">extends</span> <span class="hljs-string">'_'</span>
      ? <span class="hljs-string">`<span class="hljs-subst">${L}</span>_<span class="hljs-subst">${CamelCase&#x3C;<span class="hljs-string">`_<span class="hljs-subst">${R}</span>`</span>>}</span>`</span>
      : <span class="hljs-string">`<span class="hljs-subst">${L}</span><span class="hljs-subst">${IsGap&#x3C;C> <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span> ? <span class="hljs-string">`_<span class="hljs-subst">${C}</span>`</span> : Uppercase&#x3C;C>}</span><span class="hljs-subst">${CamelCase&#x3C;R>}</span>`</span>
    : S
  : <span class="hljs-title class_">CamelCase</span>&#x3C;<span class="hljs-title class_">Lowercase</span>&#x3C;S>>;

</code></pre>
<h2 id="13-c-printf-parser"><a aria-hidden="true" tabindex="-1" href="#13-c-printf-parser"><span class="icon icon-link"></span></a>13 C-printf Parser</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">Expect</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@type-challenges/utils'</span>

<span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">''</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'Any string.'</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %d.'</span>>, [<span class="hljs-string">'dec'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %%d.'</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %%%d.'</span>>, [<span class="hljs-string">'dec'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %f.'</span>>, [<span class="hljs-string">'float'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %h.'</span>>, [<span class="hljs-string">'hex'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %q.'</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'Hello %s: score is %d.'</span>>, [<span class="hljs-string">'string'</span>, <span class="hljs-string">'dec'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-string">'The result is %'</span>>, []>>,
]
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ControlsMap</span> = {
  <span class="hljs-attr">c</span>: <span class="hljs-string">'char'</span>
  <span class="hljs-attr">s</span>: <span class="hljs-string">'string'</span>
  <span class="hljs-attr">d</span>: <span class="hljs-string">'dec'</span>
  <span class="hljs-attr">o</span>: <span class="hljs-string">'oct'</span>
  <span class="hljs-attr">h</span>: <span class="hljs-string">'hex'</span>
  <span class="hljs-attr">f</span>: <span class="hljs-string">'float'</span>
  <span class="hljs-attr">p</span>: <span class="hljs-string">'pointer'</span>
}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsePrintFormat</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Start}</span>%<span class="hljs-subst">${infer Letter}</span><span class="hljs-subst">${infer Rest}</span>`</span>
  ? (<span class="hljs-title class_">Letter</span> <span class="hljs-keyword">extends</span> keyof <span class="hljs-title class_">ControlsMap</span>
      ? [<span class="hljs-title class_">ControlsMap</span>[<span class="hljs-title class_">Letter</span>], ...<span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-title class_">Rest</span>>]
      : <span class="hljs-title class_">ParsePrintFormat</span>&#x3C;<span class="hljs-title class_">Rest</span>>)
  : []

</code></pre>
<h2 id="14-typed-get"><a aria-hidden="true" tabindex="-1" href="#14-typed-get"><span class="icon icon-link"></span></a>14. Typed Get</h2>
<p>实现以下功能的工具类型:</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Data</span> = {
  <span class="hljs-attr">foo</span>: {
    <span class="hljs-attr">bar</span>: {
      <span class="hljs-attr">value</span>: <span class="hljs-string">'foobar'</span>,
      <span class="hljs-attr">count</span>: <span class="hljs-number">6</span>,
    },
    <span class="hljs-attr">included</span>: <span class="hljs-literal">true</span>,
  },
  <span class="hljs-attr">hello</span>: <span class="hljs-string">'world'</span>
}
  
<span class="hljs-keyword">type</span> A = <span class="hljs-title class_">Get</span>&#x3C;<span class="hljs-title class_">Data</span>, <span class="hljs-string">'hello'</span>> <span class="hljs-comment">// 'world'</span>
<span class="hljs-keyword">type</span> B = <span class="hljs-title class_">Get</span>&#x3C;<span class="hljs-title class_">Data</span>, <span class="hljs-string">'foo.bar.count'</span>> <span class="hljs-comment">// 6</span>
<span class="hljs-keyword">type</span> C = <span class="hljs-title class_">Get</span>&#x3C;<span class="hljs-title class_">Data</span>, <span class="hljs-string">'foo.bar'</span>> <span class="hljs-comment">// { value: 'foobar', count: 6 }</span>
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Split</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>, <span class="hljs-title class_">Element</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">'.'</span>> = S <span class="hljs-keyword">extends</span> <span class="hljs-string">''</span>
  ? []
  : S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer Left}</span><span class="hljs-subst">${Element}</span><span class="hljs-subst">${infer Rest}</span>`</span>
  ? [<span class="hljs-title class_">Left</span>, <span class="hljs-title class_">Rest</span>]
  : [S];

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Get</span>&#x3C;T, K <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = K <span class="hljs-keyword">extends</span> keyof T
  ? T[K]
  : <span class="hljs-title class_">Split</span>&#x3C;K>[<span class="hljs-string">'length'</span>] <span class="hljs-keyword">extends</span> <span class="hljs-number">2</span>
  ? <span class="hljs-title class_">Split</span>&#x3C;K>[<span class="hljs-number">0</span>] <span class="hljs-keyword">extends</span> keyof T
    ? <span class="hljs-title class_">Split</span>&#x3C;K>[<span class="hljs-number">1</span>] <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
      ? <span class="hljs-title class_">Get</span>&#x3C;T[<span class="hljs-title class_">Split</span>&#x3C;K>[<span class="hljs-number">0</span>]], <span class="hljs-title class_">Split</span>&#x3C;K>[<span class="hljs-number">1</span>]>
      : <span class="hljs-built_in">never</span>
    : <span class="hljs-built_in">never</span>
  : <span class="hljs-built_in">never</span>;
</code></pre>
<h2 id="15-string-to-number"><a aria-hidden="true" tabindex="-1" href="#15-string-to-number"><span class="icon icon-link"></span></a>15. String to Number</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ToNumber</span>&#x3C;<span class="hljs-string">'0'</span>>, <span class="hljs-number">0</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ToNumber</span>&#x3C;<span class="hljs-string">'5'</span>>, <span class="hljs-number">5</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ToNumber</span>&#x3C;<span class="hljs-string">'12'</span>>, <span class="hljs-number">12</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ToNumber</span>&#x3C;<span class="hljs-string">'27'</span>>, <span class="hljs-number">27</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ToNumber</span>&#x3C;<span class="hljs-string">'18@7_$%'</span>>, <span class="hljs-built_in">never</span>>>,
]
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ToNumber</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer N <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>}</span>`</span> ? N : <span class="hljs-built_in">never</span>;
</code></pre>
<h2 id="16-tuple-filter"><a aria-hidden="true" tabindex="-1" href="#16-tuple-filter"><span class="icon icon-link"></span></a>16. Tuple Filter</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[], <span class="hljs-built_in">never</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[<span class="hljs-built_in">never</span>], <span class="hljs-built_in">never</span>>, []>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[<span class="hljs-string">'a'</span>, <span class="hljs-built_in">never</span>], <span class="hljs-built_in">never</span>>, [<span class="hljs-string">'a'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[<span class="hljs-number">1</span>, <span class="hljs-built_in">never</span>, <span class="hljs-string">'a'</span>], <span class="hljs-built_in">never</span>>, [<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[<span class="hljs-built_in">never</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>], <span class="hljs-built_in">never</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>>, [<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-literal">false</span>]>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">FilterOut</span>&#x3C;[<span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>, <span class="hljs-built_in">never</span>], <span class="hljs-built_in">never</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>>, [<span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>]>>,
]

</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">FilterOut</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span>[], F> = T <span class="hljs-keyword">extends</span> [infer R, ...infer <span class="hljs-title class_">Rest</span>] ? [R] <span class="hljs-keyword">extends</span> [F] ? <span class="hljs-title class_">FilterOut</span>&#x3C;<span class="hljs-title class_">Rest</span>, F> : [R, ...<span class="hljs-title class_">FilterOut</span>&#x3C;<span class="hljs-title class_">Rest</span>, F>] : []

</code></pre>
<h2 id="17tuple-to-enum-object"><a aria-hidden="true" tabindex="-1" href="#17tuple-to-enum-object"><span class="icon icon-link"></span></a>17.Tuple to Enum Object</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">Enum</span>&#x3C;[]>, {}>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;
  <span class="hljs-title class_">Enum</span>&#x3C;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">OperatingSystem</span>>,
  {
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">MacOS</span>: <span class="hljs-string">'macOS'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Windows</span>: <span class="hljs-string">'Windows'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Linux</span>: <span class="hljs-string">'Linux'</span>
  }
  >>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;
  <span class="hljs-title class_">Enum</span>&#x3C;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">OperatingSystem</span>, <span class="hljs-literal">true</span>>,
  {
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">MacOS</span>: <span class="hljs-number">0</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Windows</span>: <span class="hljs-number">1</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Linux</span>: <span class="hljs-number">2</span>
  }
  >>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;
  <span class="hljs-title class_">Enum</span>&#x3C;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Command</span>>,
  {
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Echo</span>: <span class="hljs-string">'echo'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Grep</span>: <span class="hljs-string">'grep'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Sed</span>: <span class="hljs-string">'sed'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Awk</span>: <span class="hljs-string">'awk'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Cut</span>: <span class="hljs-string">'cut'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Uniq</span>: <span class="hljs-string">'uniq'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Head</span>: <span class="hljs-string">'head'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Tail</span>: <span class="hljs-string">'tail'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Xargs</span>: <span class="hljs-string">'xargs'</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Shift</span>: <span class="hljs-string">'shift'</span>
  }
  >>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;
  <span class="hljs-title class_">Enum</span>&#x3C;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Command</span>, <span class="hljs-literal">true</span>>,
  {
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Echo</span>: <span class="hljs-number">0</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Grep</span>: <span class="hljs-number">1</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Sed</span>: <span class="hljs-number">2</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Awk</span>: <span class="hljs-number">3</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Cut</span>: <span class="hljs-number">4</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Uniq</span>: <span class="hljs-number">5</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Head</span>: <span class="hljs-number">6</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Tail</span>: <span class="hljs-number">7</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Xargs</span>: <span class="hljs-number">8</span>
    <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">Shift</span>: <span class="hljs-number">9</span>
  }
  >>,
]
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TupleKeys</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">unknown</span>[]> = T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">readonly</span> [
  infer <span class="hljs-title class_">Head</span>,
  ...infer <span class="hljs-title class_">Tail</span>
]
  ? <span class="hljs-title class_">TupleKeys</span>&#x3C;<span class="hljs-title class_">Tail</span>> | <span class="hljs-title class_">Tail</span>[<span class="hljs-string">"length"</span>]
  : <span class="hljs-built_in">never</span>;

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Enum</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">string</span>[], N <span class="hljs-keyword">extends</span> <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>> = {
  <span class="hljs-keyword">readonly</span> [K <span class="hljs-keyword">in</span> <span class="hljs-title class_">TupleKeys</span>&#x3C;T> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Capitalize</span>&#x3C;T[K]>]: N <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span> ? K : T[K]
};
</code></pre>
<h2 id="18-deep-object-to-unique"><a aria-hidden="true" tabindex="-1" href="#18-deep-object-to-unique"><span class="icon icon-link"></span></a>18. Deep object to unique</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DeepObjectToUniq</span>&#x3C;O <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>> = {
  [k <span class="hljs-keyword">in</span> keyof O]: O[k] <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span> ? <span class="hljs-title class_">DeepObjectToUniq</span>&#x3C;O[k]> &#x26; { [<span class="hljs-attr">unique</span>: <span class="hljs-built_in">symbol</span>]: [O, k] } : O[k]
} &#x26; { [<span class="hljs-attr">unique</span>: <span class="hljs-built_in">symbol</span>]: O }

<span class="hljs-comment">/* _____________ Test Cases _____________ */</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">IsFalse</span>, <span class="hljs-title class_">IsTrue</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@type-challenges/utils'</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Quz</span> = { <span class="hljs-attr">quz</span>: <span class="hljs-number">4</span> }

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = { <span class="hljs-attr">foo</span>: <span class="hljs-number">2</span>; <span class="hljs-attr">baz</span>: <span class="hljs-title class_">Quz</span>; <span class="hljs-attr">bar</span>: <span class="hljs-title class_">Quz</span> }
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bar</span> = { <span class="hljs-attr">foo</span>: <span class="hljs-number">2</span>; <span class="hljs-attr">baz</span>: <span class="hljs-title class_">Quz</span>; <span class="hljs-attr">bar</span>: <span class="hljs-title class_">Quz</span> &#x26; { <span class="hljs-attr">quzz</span>?: <span class="hljs-number">0</span> } }

<span class="hljs-keyword">type</span> <span class="hljs-title class_">UniqQuz</span> = <span class="hljs-title class_">DeepObjectToUniq</span>&#x3C;<span class="hljs-title class_">Quz</span>>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">UniqFoo</span> = <span class="hljs-title class_">DeepObjectToUniq</span>&#x3C;<span class="hljs-title class_">Foo</span>>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">UniqBar</span> = <span class="hljs-title class_">DeepObjectToUniq</span>&#x3C;<span class="hljs-title class_">Bar</span>>

<span class="hljs-keyword">declare</span> <span class="hljs-keyword">let</span> <span class="hljs-attr">foo</span>: <span class="hljs-title class_">Foo</span>
<span class="hljs-keyword">declare</span> <span class="hljs-keyword">let</span> <span class="hljs-attr">uniqFoo</span>: <span class="hljs-title class_">UniqFoo</span>

uniqFoo = foo
foo = uniqFoo

<span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">IsFalse</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqQuz</span>, <span class="hljs-title class_">Quz</span>>>,
  <span class="hljs-title class_">IsFalse</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqFoo</span>, <span class="hljs-title class_">Foo</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'foo'</span>], <span class="hljs-title class_">Foo</span>[<span class="hljs-string">'foo'</span>]>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'bar'</span>][<span class="hljs-string">'quz'</span>], <span class="hljs-title class_">Foo</span>[<span class="hljs-string">'bar'</span>][<span class="hljs-string">'quz'</span>]>>,
  <span class="hljs-title class_">IsFalse</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqQuz</span>, <span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'baz'</span>]>>,
  <span class="hljs-title class_">IsFalse</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'bar'</span>], <span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'baz'</span>]>>,
  <span class="hljs-title class_">IsFalse</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UniqBar</span>[<span class="hljs-string">'baz'</span>], <span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'baz'</span>]>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;keyof <span class="hljs-title class_">UniqBar</span>[<span class="hljs-string">'baz'</span>], keyof <span class="hljs-title class_">UniqFoo</span>[<span class="hljs-string">'baz'</span>]>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;keyof <span class="hljs-title class_">Foo</span>, keyof <span class="hljs-title class_">UniqFoo</span> &#x26; <span class="hljs-built_in">string</span>>>,
]
</code></pre>
<h2 id="19-length-of-string-2"><a aria-hidden="true" tabindex="-1" href="#19-length-of-string-2"><span class="icon icon-link"></span></a>19. Length of String 2</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Two</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,L <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>,R <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">''</span>> =
  S <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer x}</span><span class="hljs-subst">${infer xs}</span>`</span>
    ? xs <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">${infer y}</span><span class="hljs-subst">${infer ys}</span>`</span>
      ? <span class="hljs-title class_">Two</span>&#x3C;ys, <span class="hljs-string">`<span class="hljs-subst">${L}</span><span class="hljs-subst">${x}</span>`</span>, <span class="hljs-string">`<span class="hljs-subst">${R}</span><span class="hljs-subst">${y}</span>`</span>>
    : [<span class="hljs-string">`<span class="hljs-subst">${S}</span><span class="hljs-subst">${L}</span>`</span>,R]
  : [L,R];

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Spread</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> =
  S <span class="hljs-keyword">extends</span> <span class="hljs-string">''</span>
    ? []
  : <span class="hljs-title class_">Two</span>&#x3C;S> <span class="hljs-keyword">extends</span> [infer L, <span class="hljs-string">''</span>] ? [L]
  : <span class="hljs-title class_">Two</span>&#x3C;S> <span class="hljs-keyword">extends</span> [infer L, infer R]
    ? L <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
      ? R <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>
        ? [...<span class="hljs-title class_">Spread</span>&#x3C;L>, ...<span class="hljs-title class_">Spread</span>&#x3C;R>]
      : <span class="hljs-built_in">never</span>
    : <span class="hljs-built_in">never</span>
  : [];
<span class="hljs-keyword">type</span> <span class="hljs-title class_">LengthOfString</span>&#x3C;S <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>> = <span class="hljs-title class_">Spread</span>&#x3C;S>[<span class="hljs-string">'length'</span>];

<span class="hljs-comment">/* _____________ Test Cases _____________ */</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">IsTrue</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@type-challenges/utils'</span>

<span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">''</span>>, <span class="hljs-number">0</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1'</span>>, <span class="hljs-number">1</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12'</span>>, <span class="hljs-number">2</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123'</span>>, <span class="hljs-number">3</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234'</span>>, <span class="hljs-number">4</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345'</span>>, <span class="hljs-number">5</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456'</span>>, <span class="hljs-number">6</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567'</span>>, <span class="hljs-number">7</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678'</span>>, <span class="hljs-number">8</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456789'</span>>, <span class="hljs-number">9</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567890'</span>>, <span class="hljs-number">10</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678901'</span>>, <span class="hljs-number">11</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456789012'</span>>, <span class="hljs-number">12</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567890123'</span>>, <span class="hljs-number">13</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678901234'</span>>, <span class="hljs-number">14</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456789012345'</span>>, <span class="hljs-number">15</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567890123456'</span>>, <span class="hljs-number">16</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678901234567'</span>>, <span class="hljs-number">17</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456789012345678'</span>>, <span class="hljs-number">18</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567890123456789'</span>>, <span class="hljs-number">19</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678901234567890'</span>>, <span class="hljs-number">20</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'123456789012345678901'</span>>, <span class="hljs-number">21</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'1234567890123456789012'</span>>, <span class="hljs-number">22</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'12345678901234567890123'</span>>, <span class="hljs-number">23</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-string">'aaaaaaaaaaaaggggggggggggggggggggkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>>, <span class="hljs-number">272</span>>>,
  <span class="hljs-title class_">IsTrue</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">LengthOfString</span>&#x3C;<span class="hljs-stringspan>>, <span class="hljs-number">999</span>>>,
]
</code></pre>
<h2 id="20-union-to-tuple"><a aria-hidden="true" tabindex="-1" href="#20-union-to-tuple"><span class="icon icon-link"></span></a>20. Union to Tuple</h2>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">UnionToIntersection</span>&#x3C;U> = (U <span class="hljs-keyword">extends</span> U ? <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">x</span>: U</span>) =></span> <span class="hljs-built_in">unknown</span> : <span class="hljs-built_in">never</span>) <span class="hljs-title function_">extends</span> (
  <span class="hljs-attr">x</span>: infer R,
) => <span class="hljs-built_in">unknown</span>
  ? R
  : <span class="hljs-built_in">never</span>;

<span class="hljs-comment">// type res = UnionToIntersection&#x3C;{ a: string } | { b: number }>;</span>

<span class="hljs-comment">/**
 * 并集转元组
 */</span>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">UnionToTuple</span>&#x3C;T> = <span class="hljs-title class_">UnionToIntersection</span>&#x3C;
  T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span> ? <span class="hljs-function">() =></span> T : <span class="hljs-built_in">never</span>
> <span class="hljs-title function_">extends</span> () => infer <span class="hljs-title class_">ReturnType</span>
  ? [...<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-title class_">Exclude</span>&#x3C;T, <span class="hljs-title class_">ReturnType</span>>>, <span class="hljs-title class_">ReturnType</span>]
  : [];

<span class="hljs-comment">/* _____________ Test Cases _____________ */</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">Expect</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@type-challenges/utils'</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span>[]> = T[keyof T &#x26; <span class="hljs-built_in">number</span>]

<span class="hljs-keyword">type</span> cases = [
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-string">'a'</span> | <span class="hljs-string">'b'</span>>[<span class="hljs-string">'length'</span>], <span class="hljs-number">2</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-string">'a'</span> | <span class="hljs-string">'b'</span>>>, <span class="hljs-string">'a'</span> | <span class="hljs-string">'b'</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-string">'a'</span>>>, <span class="hljs-string">'a'</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-built_in">any</span>>>, <span class="hljs-built_in">any</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-literal">undefined</span> | <span class="hljs-built_in">void</span> | <span class="hljs-number">1</span>>>, <span class="hljs-built_in">void</span> | <span class="hljs-number">1</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-built_in">any</span> | <span class="hljs-number">1</span>>>, <span class="hljs-built_in">any</span> | <span class="hljs-number">1</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-built_in">any</span> | <span class="hljs-number">1</span>>>, <span class="hljs-built_in">any</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-string">'d'</span> | <span class="hljs-string">'f'</span> | <span class="hljs-number">1</span> | <span class="hljs-built_in">never</span>>>, <span class="hljs-string">'f'</span> | <span class="hljs-string">'d'</span> | <span class="hljs-number">1</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;[{ <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> }] | <span class="hljs-number">1</span>>>, [{ <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> }] | <span class="hljs-number">1</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-built_in">never</span>>>, <span class="hljs-built_in">never</span>>>,
  <span class="hljs-title class_">Expect</span>&#x3C;<span class="hljs-title class_">Equal</span>&#x3C;<span class="hljs-title class_">ExtractValuesOfTuple</span>&#x3C;<span class="hljs-title class_">UnionToTuple</span>&#x3C;<span class="hljs-string">'a'</span> | <span class="hljs-string">'b'</span> | <span class="hljs-string">'c'</span> | <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-string">'d'</span> | <span class="hljs-string">'e'</span> | <span class="hljs-string">'f'</span> | <span class="hljs-string">'g'</span>>>, <span class="hljs-string">'f'</span> | <span class="hljs-string">'e'</span> | <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-string">'g'</span> | <span class="hljs-string">'c'</span> | <span class="hljs-string">'d'</span> | <span class="hljs-string">'a'</span> | <span class="hljs-string">'b'</span>>>,
]
</code></pre>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"Typescript 体操练习"}]}],["$","time",null,{"dateTime":"2022-09-26","className":"text-center block my-4 text-sm opacity-60","children":"September\t26, 2022"}],[null,["$","section",null,{"className":"markdown-body-fancy max-w-3xl","dangerouslySetInnerHTML":{"__html":"$16"}}]],["$","$L17",null,{"slug":"Typescript%20%E4%BD%93%E6%93%8D%E7%BB%83%E4%B9%A0"}]]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
15:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$15:metadata","error":null,"digest":"$undefined"}
