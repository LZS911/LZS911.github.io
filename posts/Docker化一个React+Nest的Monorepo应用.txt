1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1901,["874","static/chunks/874-90f68e0a3827b559.js","39","static/chunks/app/error-d036ecfd03716e30.js"],"default"]
4:I[1295,[],""]
5:I[9543,["874","static/chunks/874-90f68e0a3827b559.js","345","static/chunks/app/not-found-2113bbd7a2f55e8f.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[8460,["209","static/chunks/app/loading-b73dd9bd22c3caa2.js"],"default"]
10:I[9665,[],"ViewportBoundary"]
12:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/afd685b2833157f9.css","style"]
0:{"P":null,"b":"b2cI1DuFmdmFcolkW81qY","p":"","c":["","posts","Docker%E5%8C%96%E4%B8%80%E4%B8%AAReact%2BNest%E7%9A%84Monorepo%E5%BA%94%E7%94%A8"],"i":false,"f":[[["",{"children":["(article)",{"children":["posts",{"children":[["slug","Docker%E5%8C%96%E4%B8%80%E4%B8%AAReact%2BNest%E7%9A%84Monorepo%E5%BA%94%E7%94%A8","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/afd685b2833157f9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$3","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["(article)",["$","$1","c",{"children":[null,"$L6"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","Docker%E5%8C%96%E4%B8%80%E4%B8%AAReact%2BNest%E7%9A%84Monorepo%E5%BA%94%E7%94%A8","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},[["$","$Lf","l",{}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","C00WTk7nD3r9KjG428JZa",{"children":[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:I[4467,["874","static/chunks/874-90f68e0a3827b559.js","766","static/chunks/766-dfd76e5b111fda64.js","651","static/chunks/app/(article)/layout-120a8801c6045af4.js"],"default"]
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":[["$","div",null,{"className":"min-h-screen","children":[["$","$L13",null,{}],["$","main",null,{"className":"p-6 flex justify-center","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-neutral-50 border-t border-neutral-200 text-center text-xs opacity-50 py-4","children":["© 2022 - ",2025,["$","a",null,{"rel":"noopener noreferrer","className":"hover:underline hover:bg-indigo","href":"https://github.com/LZS911","target":"_blank","children":", LZS_911"}],", build with"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://nextjs.org/","target":"_blank","children":"Next.js"}]," ","and"," ",["$","a",null,{"rel":"noopener noreferrer","className":"underline hover:bg-indigo","href":"https://pages.github.com/?(null)","target":"_blank","children":"GitHub Pages"}]]}]]}],false]}]}]
9:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
c:null
17:I[5099,["766","static/chunks/766-dfd76e5b111fda64.js","62","static/chunks/62-abd5adcc4de2f71a.js","520","static/chunks/app/(article)/posts/%5Bslug%5D/page-3df7d22b1edb27cc.js"],"ThemeLoader"]
18:T89d3,<h2 id="目标"><a aria-hidden="true" tabindex="-1" href="#目标"><span class="icon icon-link"></span></a>目标</h2>
<p>使用 <code>Docker</code> 和 <code>Docker Compose</code> 将一个使用 <a href="https://react.dev/">React</a> + <a href="https://nestjs.com/">NestJS</a> + <a href="https://www.postgresql.org/">PostgreSQL</a> + <a href="https://www.prisma.io/">prisma</a> 构建的 Web 应用程序 <strong>Dockerize</strong>。</p>
<h2 id="前置准备"><a aria-hidden="true" tabindex="-1" href="#前置准备"><span class="icon icon-link"></span></a>前置准备</h2>
<ul>
<li>安装 <a href="https://nodejs.org/en">Node.js</a>, 且保证 Node.js 版本为 v14.17.0 或者更高版本.</li>
<li>安装 <a href="https://docs.nestjs.com/cli/overview">Nest.js CLI</a></li>
<li>安装 <a href="https://pnpm.io/">Pnpm</a></li>
<li>安装 <a href="https://docs.docker.com/engine/install/">Docker Engine</a></li>
<li>安装 <a href="https://docs.docker.com/compose/install/">Docker Compose</a></li>
<li>安装 <a href="https://opensource.com/article/18/8/what-how-makefile">Make</a></li>
</ul>
<h2 id="项目结构"><a aria-hidden="true" tabindex="-1" href="#项目结构"><span class="icon icon-link"></span></a>项目结构</h2>
<h3 id="使用-pnpm-的-workspace-功能构建一个-monorepo"><a aria-hidden="true" tabindex="-1" href="#使用-pnpm-的-workspace-功能构建一个-monorepo"><span class="icon icon-link"></span></a>使用 Pnpm 的 <a href="https://pnpm.io/workspaces">Workspace</a> 功能构建一个 Monorepo</h3>
<p>对于一个 <code>Monorepo</code>, 我们需要创建在项目根路径创建一个 <code>packages</code> 文件夹. <code>packages</code> 里面包含了由 <a href="https://www.npmjs.com/package/create-vite">create-vite</a> 创建的 <code>React</code> 项目以及由 <code>Nest.js CLI</code> 创建的后端服务. 当然, 在项目根路径也需要创建一些全局的配置文件.</p>
<p>具体操作步骤如下:</p>
<ul>
<li>
<p>在根目录初始化一个新的 git 仓库并创建以下文件:</p>
<pre><code class="hljs language-sh">.dockerignore
.gitignore
.<span class="hljs-built_in">env</span>
.docker-compose.yaml
Makefile
</code></pre>
</li>
<li>
<p>创建 packages 文件用于存放前后端项目:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">mkdir</span> packages &#x26;&#x26; <span class="hljs-built_in">cd</span> packages
</code></pre>
</li>
<li>
<p>创建前端项目, 并添加 Dockerfile.local 以及 Dockerfile.production 文件</p>
<pre><code class="hljs language-sh">pnpm create vite
</code></pre>
</li>
<li>
<p>创建后端项目, 并且在执行完后手动删除 node_modules, 同时也添加 Dockerfile.local 以及 Dockerfile.production 文件</p>
<pre><code class="hljs language-sh">nest new backend
</code></pre>
</li>
<li>
<p>重新配置 tsconfig.json:</p>
<p>首先在项目根目录执行: <code>tsc --init</code>, 初始化一份 <code>tsconfig.json</code>, 并且将文件内容修改至以下内容:</p>
<pre><code class="hljs language-json">  <span class="hljs-punctuation">{</span>
   <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
     <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"commonjs"</span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"declaration"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"removeComments"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"emitDecoratorMetadata"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"experimentalDecorators"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"allowSyntheticDefaultImports"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"target"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"es2017"</span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"sourceMap"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"outDir"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./dist"</span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./"</span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"incremental"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"skipLibCheck"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"strictNullChecks"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"noImplicitAny"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"strictBindCallApply"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"forceConsistentCasingInFileNames"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"noFallthroughCasesInSwitch"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"strict"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
     <span class="hljs-attr">"jsx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"react-jsx"</span>
   <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
   <span class="hljs-attr">"include"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"packages/*/src"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
</code></pre>
<p>最后将前后端项目中由工具创建的 <code>tsconfig.json</code> 文件内容修改至以下内容:</p>
<pre><code class="hljs language-json">  <span class="hljs-punctuation">{</span>
   <span class="hljs-attr">"extends"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"../../tsconfig.json"</span><span class="hljs-punctuation">,</span>
   <span class="hljs-attr">"include"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"./src"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
</code></pre>
</li>
<li>
<p>创建 pnpm-workspace.yml, 填充以下内容:</p>
<pre><code class="hljs language-yml">  <span class="hljs-attr">packages:</span>
 <span class="hljs-bullet">-</span> <span class="hljs-string">'packages/**'</span>
</code></pre>
</li>
<li>
<p>在根目录创建 package.json 文件, 并且将前后端相同的依赖项提取至其中. 执行 <code>pnpm install -r</code> , 完成依赖的安装.</p>
</li>
</ul>
<p>最后, 得到的项目结构应如下图所示</p>
<p><img src="/assets/docker-react-nest/example1.png" alt="alt"></p>
<h2 id="dockerize"><a aria-hidden="true" tabindex="-1" href="#dockerize"><span class="icon icon-link"></span></a>Dockerize</h2>
<h3 id="backend-dockerfile"><a aria-hidden="true" tabindex="-1" href="#backend-dockerfile"><span class="icon icon-link"></span></a>Backend Dockerfile</h3>
<p>回到本文主题, 现在, 我们的 Backend 文件夹中包含了两个 Dockerfile 文件. 其中一个用于在本地运行项目, 它用于docker-compose.yaml 文件, 而另一个用于生产环境.</p>
<p>现在将以下内容填充至 Dockerfile.local:</p>
<pre><code class="hljs language-dockerfile">#获取node镜像源
FROM node:16.16.0-alpine

#设置工作目录
WORKDIR /projects

# 将 pnpm-lock.yaml 拷贝至工作目录, 为后续的 pnpm fetch 做准备
COPY ./pnpm-lock.yaml ./

# 安装 pnpm, 并且固定版本, 也可以考虑在获取node镜像源时直接获取带有pnpm的镜像, 这样就能省略这一步了
RUN npm install -g pnpm@8.3.1

# pnpm fetch 通过提供仅使用锁定文件中的信息将包加载到虚拟存储中的能力，完美地解决了上述问题. 具体见: https://pnpm.io/cli/fetch
RUN pnpm fetch

COPY . .

# 安装依赖, 关于 --offline 见: https://pnpm.io/cli/fetch
RUN pnpm install -r --offline

# https://zhuanlan.zhihu.com/p/89335014
VOLUME ["/projects/node_modules/", "/projects/packages/backend/node_modules/", "/projects/.pnpm-store/"]

# https://yeasy.gitbook.io/docker_practice/image/dockerfile/expose
EXPOSE $BACKEND_PORT

# 启动后端服务
CMD rm -rf dist &#x26;&#x26; cd packages/backend &#x26;&#x26; pnpm start:debug
</code></pre>
<h3 id="frontend-dockerfile"><a aria-hidden="true" tabindex="-1" href="#frontend-dockerfile"><span class="icon icon-link"></span></a>Frontend Dockerfile</h3>
<p>前端文件夹下的 Dockerfile:</p>
<pre><code class="hljs language-dockerfile">#获取node镜像源
FROM node:16.16.0-alpine

#设置工作目录
WORKDIR /app

# 将 pnpm-lock.yaml 拷贝至工作目录, 为后续的 pnpm fetch 做准备
COPY ./pnpm-lock.yaml ./

# 安装 pnpm, 并且固定版本, 也可以考虑在获取node镜像源时直接获取带有pnpm的镜像, 这样就能省略这一步了
RUN npm install -g pnpm@8.3.1

# pnpm fetch 通过提供仅使用锁定文件中的信息将包加载到虚拟存储中的能力，完美地解决了上述问题. 具体见: https://pnpm.io/cli/fetch
RUN pnpm fetch

COPY . .

# 安装依赖, 关于 --offline 见: https://pnpm.io/cli/fetch
RUN pnpm install -r --offline

# https://zhuanlan.zhihu.com/p/89335014
VOLUME ["/app/node_modules/", "/app/packages/frontend/node_modules/", "/app/.pnpm-store/"]

# 启动前端服务
CMD cd packages/frontend &#x26;&#x26; pnpm start

</code></pre>
<h3 id="创建-docker-compose-文件并运行项目"><a aria-hidden="true" tabindex="-1" href="#创建-docker-compose-文件并运行项目"><span class="icon icon-link"></span></a>创建 Docker Compose 文件并运行项目</h3>
<ol>
<li>
<p>配置环境变量: 将以下内容填充至 <code>&#x3C;rootDir>/.env</code></p>
<pre><code class="hljs language-sh">   NODE_ENV=development
   FRONTEND_PORT=7879
   BACKEND_PORT=7878
   JWT_SECRET=jwt_secret_key_here
   JWT_EXPIRES_IN=30d
   DB_HOST=bp-pg-db
   DB_NAME=bp-pg-db
   DB_USER=postgres
   DB_PASSWORD=root
   DB_PORT=5432
   PGADMIN_DEFAULT_EMAIL=admin@backend.com
   PGADMIN_DEFAULT_PASSWORD=pass@123
   PGADMIN_PORT=5055
</code></pre>
</li>
<li>
<p>将以下内容填充至 <code>&#x3C;rootDIr>/docker-compose.yml</code></p>
<pre><code class="hljs language-yml">    <span class="hljs-attr">version:</span> <span class="hljs-string">'3.9'</span>
    <span class="hljs-attr">services:</span>
      <span class="hljs-attr">frontend:</span>
        <span class="hljs-attr">container_name:</span> <span class="hljs-string">frontend</span>
        <span class="hljs-attr">build:</span>
          <span class="hljs-attr">context:</span> <span class="hljs-string">./</span>
          <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">./packages/frontend/Dockerfile.local</span>
        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
        <span class="hljs-attr">env_file:</span> <span class="hljs-string">.env</span>
        <span class="hljs-attr">ports:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">'${FRONTEND_PORT}:${FRONTEND_PORT}'</span>
        <span class="hljs-attr">volumes:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">.:/app</span>
        <span class="hljs-attr">networks:</span>
          <span class="hljs-attr">bp-network:</span>
            <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span>
      <span class="hljs-attr">backend:</span>
        <span class="hljs-attr">container_name:</span> <span class="hljs-string">backend</span>
        <span class="hljs-attr">build:</span>
          <span class="hljs-attr">context:</span> <span class="hljs-string">./</span>
          <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">./packages/backend/Dockerfile.local</span>
        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
        <span class="hljs-attr">env_file:</span> <span class="hljs-string">.env</span>
        <span class="hljs-attr">volumes:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">.:/app</span>
        <span class="hljs-attr">networks:</span>
          <span class="hljs-attr">bp-network:</span>
            <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>
        <span class="hljs-attr">ports:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">'${BACKEND_PORT}:${BACKEND_PORT}'</span>
        <span class="hljs-attr">depends_on:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">bp-pg-db</span>
        <span class="hljs-attr">links:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">bp-pg-db</span>
      <span class="hljs-attr">bp-pg-db:</span>
        <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:12-alpine</span>
        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
        <span class="hljs-attr">container_name:</span> <span class="hljs-string">bp-pg-db</span>
        <span class="hljs-attr">env_file:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span>
        <span class="hljs-attr">environment:</span>
          <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">${DB_PASSWORD}</span>
          <span class="hljs-attr">PGDATA:</span> <span class="hljs-string">/var/lib/postgresql/data</span>
          <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">${DB_USER}</span>
          <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">${DB_NAME}</span>
        <span class="hljs-attr">ports:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">'${DB_PORT}:${DB_PORT}'</span>
        <span class="hljs-attr">volumes:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">pgdata:/var/lib/postgresql/data</span>
        <span class="hljs-attr">networks:</span>
          <span class="hljs-attr">bp-network:</span>
            <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span>
      <span class="hljs-attr">pgadmin-portal:</span>
        <span class="hljs-attr">image:</span> <span class="hljs-string">dpage/pgadmin4</span>
        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
        <span class="hljs-attr">container_name:</span> <span class="hljs-string">pgadmin-portal</span>
        <span class="hljs-attr">env_file:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span>
        <span class="hljs-attr">environment:</span>
          <span class="hljs-attr">PGADMIN_DEFAULT_PASSWORD:</span> <span class="hljs-string">'${PGADMIN_DEFAULT_PASSWORD}'</span>
          <span class="hljs-attr">PGADMIN_DEFAULT_EMAIL:</span> <span class="hljs-string">'${PGADMIN_DEFAULT_EMAIL}'</span>
        <span class="hljs-attr">volumes:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">pgadmin:/root/.pgadmin</span>
        <span class="hljs-attr">ports:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">'${PGADMIN_PORT}:80'</span>
        <span class="hljs-attr">depends_on:</span>
          <span class="hljs-bullet">-</span> <span class="hljs-string">bp-pg-db</span>
        <span class="hljs-attr">networks:</span>
          <span class="hljs-attr">bp-network:</span>
            <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-attr">pgdata:</span>
      <span class="hljs-attr">pgadmin:</span>
    <span class="hljs-attr">networks:</span>
      <span class="hljs-attr">bp-network:</span>
        <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span>
        <span class="hljs-attr">ipam:</span>
          <span class="hljs-attr">config:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>
    
</code></pre>
<ol>
<li><code>Services</code>: 每个服务代表一个将要创建的 Docker 容器</li>
</ol>
<ul>
<li>frontend: 基于前端项目的 Dockerfile.local 构建镜像以及容器. 此容器将会控制前端服务的启停.</li>
<li>backend: 基于后端项目的 Dockerfile.local 构建镜像以及容器. 此容器将会控制后端服务的启停.</li>
<li>bp-pg-db: 基于镜像 postgres:12-alpine 构建的 postgres 数据库容器.</li>
<li>pgadmin-portal: 基于镜像 dpage/pgadmin4 构建的 postgres 可视化界面操作服务.</li>
</ul>
</li>
<li>
<p>添加 Makefile 用来启动:</p>
<pre><code class="hljs language-Makefile"><span class="hljs-section">local: </span>
   docker-compose stop &#x26;&#x26; docker-compose up --build -d --remove-orphans
</code></pre>
</li>
</ol>
<p>使用 <code>make local</code> 命令后, 将构建镜像并启动容器服务, 此时便能通过配置中暴露出的端口号来正常的访问到前端、后端以及数据库服务. 同时, 得益于 <code>VOlUME</code>, 我们在本地修改代码后能及时的映射到容器的挂卷中, 通过项目的热更新来开发项目.</p>
<h2 id="生产环境部署"><a aria-hidden="true" tabindex="-1" href="#生产环境部署"><span class="icon icon-link"></span></a>生产环境部署</h2>
<h3 id="frontend-项目"><a aria-hidden="true" tabindex="-1" href="#frontend-项目"><span class="icon icon-link"></span></a>frontend 项目</h3>
<p><strong>目标: 利用 github webhook 在项目push代码后自动触发 jenkins 流水线用来构建项目</strong></p>
<p>环境准备:</p>
<ol>
<li>
<p>创建以下文件夹:</p>
<ul>
<li>jenkins/jenkins/home: 用来存放 jenkins 配置文件以及插件和 jenkins 的工作区等内容.</li>
<li>nginx/default.conf: nginx 的配置文件</li>
<li>webserver/static/jenkins/dist: 存放前端项目打包后的产物</li>
<li>docker-compose.yml: docker-compose 的配置文件</li>
</ul>
<p>default.conf 内容如下(本文不涉及 nginx 配置知识, 所以这里使用一个最基本的配置文件):</p>
<pre><code class="hljs language-conf">  server{
    listen  80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
  
    location / {
       try_files $uri $uri/ /index.html =404;
    }
          
  # location /v {
  # 根据项目配置反向代理  
  #   proxy_pass &#x3C;http://localhost:7878>
  # }
}
</code></pre>
</li>
<li>
<p>编写 <code>docker-compose.yml</code> 来构建 jenkins 容器以及部署前端项目的 nginx 容器, 内容如下:</p>
<pre><code class="hljs language-yml">   <span class="hljs-attr">version:</span> <span class="hljs-string">"3.9"</span>
     <span class="hljs-attr">services:</span>                                      
       <span class="hljs-attr">docker_jenkins:</span>
         <span class="hljs-attr">environment:</span>
           <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>
         <span class="hljs-attr">user:</span> <span class="hljs-string">root</span>                                
         <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>                           
         <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jenkins:lts</span>              
         <span class="hljs-attr">container_name:</span> <span class="hljs-string">cicd-jenkins</span>                 
         <span class="hljs-attr">ports:</span>                                
           <span class="hljs-bullet">-</span> <span class="hljs-number">8077</span><span class="hljs-string">:8080</span>                             
           <span class="hljs-bullet">-</span> <span class="hljs-number">50000</span><span class="hljs-string">:50000</span>                          
         <span class="hljs-attr">volumes:</span>                               
           <span class="hljs-bullet">-</span> <span class="hljs-string">./jenkins/jenkins_home/:/var/jenkins_home</span>  
           <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span>
           <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/bin/docker:/usr/bin/docker</span>              
           <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span>
       <span class="hljs-attr">docker_nginx:</span>
         <span class="hljs-attr">environment:</span>
           <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>
         <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
         <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:stable-alpine</span>               
         <span class="hljs-attr">container_name:</span> <span class="hljs-string">cicd-nginx</span>
         <span class="hljs-attr">ports:</span>
           <span class="hljs-bullet">-</span> <span class="hljs-number">7070</span><span class="hljs-string">:80</span>                             
         <span class="hljs-attr">volumes:</span>
           <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/:/etc/nginx/conf.d/</span>
           <span class="hljs-bullet">-</span> <span class="hljs-string">./webserver/static/jenkins/dist/:/usr/share/nginx/html/</span>
</code></pre>
</li>
<li>
<p>执行 <code>docker-compose up --build -d --remove-orphans</code> 后, 此时应该会成功启动两个容器, 可以使用 <code>docker container ls</code> 查看:, 大致内容如下:</p>
<p><img src="/assets/docker-react-nest/example2.png" alt="alt"></p>
<p>此时在本地访问 <code>http://ip(容器的宿主主机ip地址):8077</code> 应该能够正常访问 jenkins 服务, 初始化界面应该如下:</p>
<p><img src="/assets/docker-react-nest/example3.png" alt="alt"></p>
<p>在宿主主机上执行 <code>docker logs [container_id]</code>, 从 log 信息从获取管理源密码, 然后进入插件安装页面, 这里安装推荐插件即可.</p>
</li>
<li>
<p>插件安装完成且创建用户进入 jenkins 后点击 <strong>Manage Jenkins</strong>, 然后再点击进入<strong>Manage Plugins</strong>. 这里需要安装 <code>Node</code> 插件以及 <code>Publish over SSH</code>.</p>
<p>前者为构建流程提供 <code>NodeJs</code> 环境, 后者将构建完成后得到的前端产物压缩包上传至目标服务器.</p>
<p><img src="/assets/docker-react-nest/example4.png" alt="alt"></p>
</li>
<li>
<p>配置 <code>NodeJs</code> 环境. 点击 <strong>系统管理</strong>, 然后再点击进入<strong>全局工具配置</strong>, 找到 NodeJS, 点击 <strong>新增NodeJS</strong>. 最后根据项目的需求进行选择 <code>Node</code> 版本以及是否要安装全局工具即可.</p>
<p><img src="/assets/docker-react-nest/example5.png" alt="alt"></p>
</li>
<li>
<p>点击系统管理中的<strong>Credentials</strong>, 然后添加 github 的凭据. 可以添加 github 的 token、账号密码以及公私钥三种类型的凭据.</p>
</li>
<li>
<p>配置 github-webhook. 点击系统管理中的<strong>系统配置</strong>, 找到 Github, 然后点击<strong>添加Github</strong>服务器, 在凭据一栏添加在上一步添加的 Github 凭据.</p>
<p><img src="/assets/docker-react-nest/example6.png" alt="alt"></p>
<p>找到最下方的更多按钮, 点击后会出现覆盖 Hook URL的选项, 将这里的地址绑定到 github 项目上的 webhook 即可.
当然, 如果 jenkins 容器宿主主机为本地主机或者为内网主机, 可使用 <a href="https://dashboard.ngrok.com/">ngrok</a> 实现内网穿透, 来保证 github 能访问到 jenkins.</p>
<p>注意事项:</p>
<ol>
<li>github-webhook地址前缀需与 jenkins 配置中的 <strong>Jenkins URL</strong> 保持一致.</li>
<li>关于 <a href="https://docs.github.com/en/webhooks-and-events/webhooks/about-webhooks">github webhook</a>.</li>
</ol>
</li>
<li>
<p>添加服务器信息. 在系统配置中找到<strong>Publish over SSH</strong>, 在 Passphrase 一栏填入服务器密码, 然后点击<strong>新增</strong>, 填入服务器信息.</p>
<p><img src="/assets/docker-react-nest/example7.png" alt="alt"></p>
</li>
<li>
<p>创建任务</p>
<ul>
<li>
<p>点击新建任务, 输入任务名称后选择<strong>构建一个自由风格的软件项目</strong>
<img src="/assets/docker-react-nest/example8.png" alt="alt"></p>
</li>
<li>
<p>源码管理里输入项目地址、添加 Github 凭据, 选择项目分支.
<img src="/assets/docker-react-nest/example9.png" alt="alt"></p>
</li>
<li>
<p>构建触发器里选择 <strong>GitHub hook trigger for GITScm polling</strong>
<img src="/assets/docker-react-nest/example10.png" alt="alt"></p>
</li>
<li>
<p>选择构建环境
<img src="/assets/docker-react-nest/example11.png" alt="alt"></p>
</li>
<li>
<p>添加构建步骤. 这里可以将步骤放在 <code>Makefile</code> 文件中或者 <code>sh</code> 脚本中, 这样每次更新步骤只需要更新配置文件, 而不用修改 jenkins 配置. 当然这一步也可以用 <a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/">Jenkinsfile</a>替代.
<img src="/assets/docker-react-nest/example12.png" alt="alt"></p>
<p><code>build.sh</code>:</p>
<pre><code class="hljs language-sh"> pnpm fetch
 pnpm install -r --offline
 
 <span class="hljs-comment"># frontend</span>
 pnpm build:frontend
 <span class="hljs-built_in">cd</span> ./packages/frontend
 tar zcf frontend.tar.gz ./dist
 <span class="hljs-built_in">mv</span> ./frontend.tar.gz ../../frontend.tar.gz
</code></pre>
</li>
<li>
<p>添加构建后的操作. 这里选择 <strong>Send build artifacts over SSH</strong>, 填入以下内容:
<img src="/assets/docker-react-nest/example13.png" alt="alt">
其中 SSH Server Name 为上一步添加的服务器名称.</p>
</li>
</ul>
</li>
</ol>
<p>到这里, 一个前端项目的自动化部署基本完成了. 在提交项目代码后, 便会自动触发任务, 进行项目构建, 并将构建后的产物上传至目标服务器. 然后将文件内容映射到 nginx 容器中.</p>
<p>关于 <code>NestJs</code> 服务的部署, 将构建开发环境中的 <code>docker-compose.yml</code>稍微进行改造即可, 内容如下:</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.9'</span>
<span class="hljs-attr">services:</span>
  <span class="hljs-attr">backend-prod:</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">backend-prod</span>
    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span>
    <span class="hljs-attr">build:</span>
      <span class="hljs-attr">context:</span> <span class="hljs-string">./</span>
      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">./packages/backend/Dockerfile.prod</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">webserver-backend-prod</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">env_file:</span> <span class="hljs-string">.env</span>
    <span class="hljs-attr">networks:</span>
      <span class="hljs-attr">bp-network:</span>
        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">'${BACKEND_PORT}:3535'</span>
    <span class="hljs-attr">depends_on:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">bp-pg-db-prod</span>
    <span class="hljs-attr">command:</span> [<span class="hljs-string">sh</span>, <span class="hljs-string">-c</span>, <span class="hljs-string">"cd packages/backend &#x26;&#x26; pnpm migrate:postgres &#x26;&#x26; pnpm prisma:gen &#x26;&#x26; pnpm build &#x26;&#x26; pnpm start:prod"</span>]
  <span class="hljs-attr">bp-pg-db-prod:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:12-alpine</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">bp-pg-db-prod</span>
    <span class="hljs-attr">env_file:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">${DB_PASSWORD}</span>
      <span class="hljs-attr">PGDATA:</span> <span class="hljs-string">/var/lib/postgresql/data</span>
      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">${DB_USER}</span>
      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">${DB_NAME}</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">'${DB_PORT}:${DB_PORT}'</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">pgdata:/var/lib/postgresql/data</span>
    <span class="hljs-attr">networks:</span>
      <span class="hljs-attr">bp-network:</span>
        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span>
  <span class="hljs-attr">pgadmin-portal-prod:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">dpage/pgadmin4</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">pgadmin-portal-prod</span>
    <span class="hljs-attr">env_file:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-attr">PGADMIN_DEFAULT_PASSWORD:</span> <span class="hljs-string">'${PGADMIN_DEFAULT_PASSWORD}'</span>
      <span class="hljs-attr">PGADMIN_DEFAULT_EMAIL:</span> <span class="hljs-string">'${PGADMIN_DEFAULT_EMAIL}'</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">pgadmin:/root/.pgadmin</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">'${PGADMIN_PORT}:80'</span>
    <span class="hljs-attr">depends_on:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">bp-pg-db-prod</span>
    <span class="hljs-attr">networks:</span>
      <span class="hljs-attr">bp-network:</span>
        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span>
<span class="hljs-attr">volumes:</span>
  <span class="hljs-attr">pgdata:</span>
  <span class="hljs-attr">pgadmin:</span>
<span class="hljs-attr">networks:</span>
  <span class="hljs-attr">bp-network:</span>
    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span>
    <span class="hljs-attr">ipam:</span>
      <span class="hljs-attr">config:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>

</code></pre>
<p>Dockerfile.prod:</p>
<pre><code class="hljs language-dockerfile">FROM node:16.16.0-alpine


WORKDIR /app

COPY ./pnpm-lock.yaml ./

RUN npm install -g pnpm@8.3.1

RUN pnpm fetch

COPY . .

RUN pnpm install -r --offline

VOLUME ["/app/node_modules/", "/app/packages/backend/node_modules/", "/app/.pnpm-store/"]
</code></pre>
<p>由于本文所构建项目为一个 Monorepo, 所以在提交前端代码时同时会触发后端项目的构建, 所以我们仅需将以下内容添加至前端构建流程中的 <code>./scripts/build.sh</code>即可:</p>
<pre><code class="hljs language-sh">docker-compose -f docker-compose.server.yaml stop &#x26;&#x26; docker-compose -f docker-compose.server.yaml up --build -d --remove-orphans
</code></pre>
<p>注意事项:</p>
<ol>
<li>需要移除 docker-compose 中后端服务的 volume. 由于jenkins在构建完成后会清空工作区, 所以这里不需要同构建开发环境一样进行文件映射.</li>
<li>NestJS 项目中开发环境以及生产环境中环境变量的区分.</li>
</ol>
<p>最后, 构建完成后, 宿主主机上容器列表如下:</p>
<p><img src="/assets/docker-react-nest/example14.png" alt="alt"></p>
<p>通过 http:[ip]:7878 即可正常访问后端服务, http:[ip]:5055 可访问 pgadmin.</p>
<p>项目地址: <a href="https://github.com/LZS911/todo-react-nest-docker">https://github.com/LZS911/todo-react-nest-docker</a></p>
<p>jenkins+nginx容器构建: <a href="https://github.com/LZS911/jenkins-nginx-docker">https://github.com/LZS911/jenkins-nginx-docker</a></p>7:["$","article",null,{"children":[["$","div",null,{"className":"flex justify-center font-[Arial] max-w-[864px] text-center","children":["$","h1",null,{"className":"text-[2.5rem] font-bold bg-lime-300 px-5 py-2 rounded-sm text-shadow-lg leading-[1.1]","children":"Docker化一个React+Nest的Monorepo应用"}]}],["$","time",null,{"dateTime":"2023-04-25","className":"text-center block my-4 text-sm opacity-60","children":"April\t25, 2023"}],[null,["$","$L17",null,{"theme":"orange"}],["$","section",null,{"className":"markdown-body-orange max-w-3xl","dangerouslySetInnerHTML":{"__html":"$18"}}]],null]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
16:{"metadata":[["$","title","0",{"children":"Ai.Haibara codes"}],["$","meta","1",{"name":"description","content":"LZS Blog"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"96x96"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
